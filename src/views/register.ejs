<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register - CollabSpace</title>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    
<style>
  /* CollabSpace - Professional Register Design */
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
  
  :root {
    --color-primary: #1e40af;
    --color-primary-hover: #2563eb;
    --color-primary-light: #dbeafe;
    --color-primary-dark: #1d4ed8;
    --color-success: #10b981;
    --color-danger: #ef4444;
    --color-warning: #f59e0b;
    --color-white: #ffffff;
    --color-gray-50: #f9fafb;
    --color-gray-100: #f3f4f6;
    --color-gray-200: #e5e7eb;
    --color-gray-300: #d1d5db;
    --color-gray-400: #9ca3af;
    --color-gray-500: #6b7280;
    --color-gray-600: #4b5563;
    --color-gray-700: #374151;
    --color-gray-800: #1f2937;
    --color-gray-900: #111827;
    --font-family-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    --font-size-xs: 0.75rem;
    --font-size-sm: 0.875rem;
    --font-size-base: 1rem;
    --font-size-lg: 1.125rem;
    --font-size-xl: 1.25rem;
    --font-size-2xl: 1.5rem;
    --font-size-3xl: 1.875rem;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --line-height-normal: 1.5;
    --line-height-relaxed: 1.625;
    --space-1: 0.25rem;
    --space-2: 0.5rem;
    --space-3: 0.75rem;
    --space-4: 1rem;
    --space-6: 1.5rem;
    --space-8: 2rem;
    --radius-sm: 0.25rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --radius-full: 9999px;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
    --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
    --transition-smooth: 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

      *, *::before, *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

    body {
  font-family: var(--font-family-primary);
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
  color: var(--color-gray-900);
  
  /* --- CRITICAL STYLES FOR CENTERING --- */
  background-color: var(--color-gray-50); /* The light gray page background */
  min-height: 100vh; /* Make the body fill the full screen height */
  
  display: flex; /* Activates the flex layout */
  justify-content: center; /* Centers content HORIZONTALLY */
  align-items: flex-start;    /* Centers content VERTICALLY */

  padding: 2rem; /* Adds some space around the card on smaller screens */
  overflow-x: hidden;
}

      /* No specific body::before for animated pattern on this layout */
      /* The animated pattern could be added to the blue side if desired */

      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }

      @keyframes slideIn {
        from { opacity: 0; transform: translateX(-30px); }
        to { opacity: 1; transform: translateX(0); }
      }

      /* Main container for the split layout */
      .register-split-container {
        display: flex;
        background: var(--color-white);
        border-radius: var(--radius-xl); /* Rounded corners for the entire card */
        box-shadow: var(--shadow-xl);
        border: 1px solid var(--color-gray-200);
        overflow: hidden; /* Ensures rounded corners clip content */
        width: 100%;
        max-width: 1000px; /* Adjust as needed for overall width */
        min-height: 600px; /* Ensure a minimum height */
        animation: fadeIn 0.6s ease-out;
      }

      /* Left blue section */
      .register-left-panel {
        flex: 1; /* Takes up available space */
        background: var(--color-primary); /* Solid blue background */
        color: var(--color-white);
        padding: 3rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        position: relative;
      }

      .register-left-panel::before { /* Optional: Add a subtle overlay or pattern */
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(255,255,255,0.05) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.05) 50%, rgba(255,255,255,0.05) 75%, transparent 75%, transparent);
        background-size: 60px 60px;
        opacity: 0.2;
      }


      .left-panel-logo {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 3rem;
        opacity: 0.9;
      }

      .left-panel-logo i {
        font-size: 2.2rem;
        color: var(--color-white);
      }

      .left-panel-logo span {
        font-size: var(--font-size-xl);
        font-weight: var(--font-weight-bold);
      }

      .left-panel-title {
        font-size: var(--font-size-3xl);
        font-weight: var(--font-weight-bold);
        line-height: 1.2;
        margin-bottom: 1.5rem;
      }

      .left-panel-subtitle {
        font-size: var(--font-size-lg);
        line-height: var(--line-height-relaxed);
        margin-bottom: 3rem;
        opacity: 0.9;
      }

      .left-panel-features {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .left-panel-features li {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: var(--font-size-lg);
        margin-bottom: 1rem;
        opacity: 0.9;
      }

      .left-panel-features li i {
        font-size: 1.25rem;
        color: var(--color-primary-light);
      }

      /* Right white section for the form */
      .register-right-panel {
        flex: 1; /* Takes up available space */
        background: var(--color-white);
        padding: 3rem;
        display: flex;
        flex-direction: column;
        /* Removed justify-content: center; to ensure content starts from the top */
      }

      .register-header {
        text-align: left; /* Adjust header alignment for right panel */
        margin-bottom: 2rem;
        /* Added a small top padding for visual balance, similar to other forms */
        padding-top: 0.5rem; 
      }

      .register-header h1 {
        font-size: var(--font-size-2xl); /* Slightly smaller than original registration header */
        font-weight: var(--font-weight-bold);
        color: var(--color-gray-900);
        margin-bottom: 0.5rem;
        background: none; /* Remove gradient from text for simplicity */
        -webkit-background-clip: unset;
        -webkit-text-fill-color: unset;
        background-clip: unset;
      }

      .register-header p {
        color: var(--color-gray-600);
        font-size: var(--font-size-base); /* Slightly smaller than original registration header */
        margin: 0;
      }

      .form-group {
        margin-bottom: 1rem; /* Slightly reduced margin for compactness */
      }

      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
      }

      .form-label {
        display: block;
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        color: var(--color-gray-700);
        margin-bottom: 0.5rem;
      }

            .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--color-gray-200);
        border-radius: 12px;
        font-size: var(--font-size-base);
        transition: all 0.2s ease-in-out;
        background-color: var(--color-white);
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05);
      }

      select.form-control {
        cursor: pointer;
        appearance: none;
        background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 12px center;
        background-size: 16px;
        padding-right: 40px;
      }

      .form-control:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 3px var(--color-primary-light);
        background: var(--color-white);
      }

      .form-control::placeholder {
        color: var(--color-gray-400);
        font-size: var(--font-size-sm);
      }

      .input-group {
        position: relative;
      }

      .input-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--color-gray-400);
        font-size: var(--font-size-base); /* Slightly smaller icon */
        z-index: 10;
        transition: color var(--transition-fast);
      }

      .form-control:focus + .input-icon {
        color: var(--color-primary);
      }

      .form-control.has-icon {
        padding-left: 3rem;
      }

      .form-text {
        font-size: var(--font-size-xs);
        color: var(--color-gray-500);
        margin-top: 0.25rem; /* Reduced margin */
        line-height: 1.4;
      }

      .password-strength {
        margin-top: 0.25rem;
        font-size: var(--font-size-xs);
      }

      .strength-weak { color: var(--color-danger); }
      .strength-medium { color: var(--color-warning); }
      .strength-strong { color: var(--color-success); }

      .checkbox-group {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
      }

      .checkbox-input {
        width: 1rem;
        height: 1rem;
        margin-top: 0.25rem;
        accent-color: var(--color-primary);
      }

      .checkbox-label {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        line-height: var(--line-height-relaxed);
      }

      .checkbox-label a {
        color: var(--color-primary);
        text-decoration: none;
        font-weight: var(--font-weight-medium);
      }

      .checkbox-label a:hover {
        text-decoration: underline;
      }

      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem; /* Adjusted padding */
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-semibold);
        font-family: var(--font-family-primary);
        border: none;
        border-radius: var(--radius-lg);
        text-decoration: none;
        cursor: pointer;
        transition: all var(--transition-fast);
        position: relative;
        overflow: hidden;
        min-height: 44px; /* Slightly smaller min-height */
        width: 100%;
      }

      .btn-primary {
        background: var(--color-primary); /* Solid color for primary button */
        color: var(--color-white);
        box-shadow: var(--shadow-md);
        margin-bottom: 1rem;
      }

      .btn-primary:hover {
        background: var(--color-primary-hover);
        transform: translateY(-1px); /* Slightly less pronounced hover */
        box-shadow: var(--shadow-lg);
      }

      .btn-primary:active {
        transform: translateY(0);
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      .btn-loading {
        pointer-events: none;
      }

      .btn-loading::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      .btn-loading span {
        opacity: 0;
      }

      @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
      }

      .alert {
        padding: 0.75rem 1rem; /* Adjusted padding */
        margin-bottom: 1.5rem;
        border-radius: var(--radius-lg);
        border: 1px solid transparent;
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        display: flex;
        align-items: center;
        gap: 0.75rem;
        animation: slideIn 0.3s ease-out;
      }

      .alert-danger {
        background: rgba(239, 68, 68, 0.1);
        color: var(--color-danger);
        border-color: rgba(239, 68, 68, 0.2);
      }

      .alert-success {
        background: rgba(16, 185, 129, 0.1);
        color: var(--color-success);
        border-color: rgba(16, 185, 129, 0.2);
      }

      .register-footer {
        text-align: center;
        margin-top: 2rem;
        padding-top: 1.5rem; /* Reduced padding */
        border-top: 1px solid var(--color-gray-200);
      }

      .register-footer p {
        color: var(--color-gray-600);
        font-size: var(--font-size-sm);
        margin: 0;
      }

      .register-footer a {
        color: var(--color-primary);
        text-decoration: none;
        font-weight: var(--font-weight-medium);
        transition: color var(--transition-fast);
      }

      .register-footer a:hover {
        color: var(--color-primary-hover);
        text-decoration: underline;
      }

      .hidden {
        display: none !important;
      }

      .fade-in {
        animation: fadeIn 0.3s ease-out;
      }

      /* Responsive Design */
      @media (max-width: 900px) { /* Adjust breakpoint for split layout */
        .register-split-container {
          flex-direction: column; /* Stack panels vertically on smaller screens */
          max-width: 500px; /* Limit width when stacked */
          min-height: auto;
        }

        .register-left-panel {
          padding: 2rem;
          text-align: center;
          align-items: center;
        }

        .left-panel-logo {
            margin-bottom: 1.5rem;
        }
        .left-panel-features {
            text-align: left; /* Keep features aligned to left for readability */
        }
        .left-panel-features li {
            justify-content: flex-start;
        }

        .register-right-panel {
          padding: 2rem;
        }
        .register-header {
            text-align: center;
        }
        .register-header h1 {
            font-size: var(--font-size-xl);
        }
        .register-header p {
            font-size: var(--font-size-sm);
        }
        .form-row {
          grid-template-columns: 1fr;
        }
      }

      @media (max-width: 600px) {
        body {
            padding: 1rem;
        }
        .register-split-container {
            border-radius: var(--radius-lg);
        }
        .register-left-panel {
            padding: 1.5rem;
        }
        .left-panel-title {
            font-size: var(--font-size-2xl);
        }
        .left-panel-subtitle {
            font-size: var(--font-size-base);
        }
        .left-panel-features li {
            font-size: var(--font-size-base);
        }
        .register-right-panel {
            padding: 1.5rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="register-split-container">
      <div class="register-left-panel">
        <div class="left-panel-logo">
          <svg width="32" height="32" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <linearGradient id="registerLogoGradient1" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#43e97b"/>
                <stop offset="50%" style="stop-color:#00f2fe"/>
                <stop offset="100%" style="stop-color:#4facfe"/>
              </linearGradient>
              <linearGradient id="registerLogoGradient2" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#00f2fe"/>
                <stop offset="100%" style="stop-color:#667eea"/>
              </linearGradient>
              <linearGradient id="registerLogoGradient3" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#667eea"/>
                <stop offset="100%" style="stop-color:#764ba2"/>
              </linearGradient>
            </defs>
            <!-- Outer hexagon -->
            <path d="M25 20 L75 20 L90 50 L75 80 L25 80 L10 50 Z" fill="url(#registerLogoGradient1)" opacity="0.9"/>
            <!-- Inner C shape - top part -->
            <path d="M35 30 L65 30 L70 35 L70 45 L50 45 L45 40 L45 35 L35 35 Z" fill="white"/>
            <!-- Inner C shape - bottom part -->
            <path d="M35 55 L45 55 L45 60 L50 65 L70 65 L70 55 L65 50 L35 50 Z" fill="white"/>
            <!-- 3D effect - right side -->
            <path d="M75 20 L80 15 L80 45 L90 50 L80 55 L80 85 L75 80 L90 50 Z" fill="url(#registerLogoGradient2)" opacity="0.8"/>
            <!-- 3D effect - bottom -->
            <path d="M25 80 L75 80 L80 85 L30 85 L25 80 Z" fill="url(#registerLogoGradient3)" opacity="0.7"/>
          </svg>
          <span>CollabSpace</span>
        </div>
        <h2 class="left-panel-title">Get Started with CollabSpace</h2>
        <p class="left-panel-subtitle">
          Connect, collaborate, and create amazing things together with your team.
          Register now to unlock your workspace!
        </p>
        <ul class="left-panel-features">
          <li><i class="fas fa-comments"></i> Real-time messaging</li>
          <li><i class="fas fa-tasks"></i> Task management & workflows</li>
          <li><i class="fas fa-user-friends"></i> Seamless team collaboration</li>
          <li><i class="fas fa-file-alt"></i> Secure file sharing</li>
        </ul>
      </div>

      <div class="register-right-panel">
        <div class="register-header">
          <h1>Create Your Account</h1>
          <p>Join thousands of teams using CollabSpace</p>
        </div>

        <form id="registerForm" action="javascript:void(0);">
          <div
            id="errorAlert"
            class="alert alert-danger hidden"
            role="alert"
          >
            <i class="fas fa-exclamation-triangle"></i>
            <span id="errorMessage"></span>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="firstName" class="form-label">First Name</label>
              <div class="input-group">
                <input
                  type="text"
                  class="form-control has-icon"
                  id="firstName"
                  name="firstName"
                  placeholder="Enter your first name"
                  required
                />
                <i class="input-icon fas fa-user"></i>
              </div>
            </div>

            <div class="form-group">
              <label for="lastName" class="form-label">Last Name</label>
              <div class="input-group">
                <input
                  type="text"
                  class="form-control has-icon"
                  id="lastName"
                  name="lastName"
                  placeholder="Enter your last name"
                  required
                />
                <i class="input-icon fas fa-user"></i>
              </div>
            </div>
          </div>

          <div class="form-group">
            <label for="username" class="form-label">Username</label>
            <div class="input-group">
              <input
                type="text"
                class="form-control has-icon"
                id="username"
                name="username"
                placeholder="Choose a username"
                required
              />
              <i class="input-icon fas fa-at"></i>
            </div>
            <div class="form-text">
              3-30 characters, letters, numbers, underscores, and hyphens only
            </div>
          </div>

          <div class="form-group">
            <label for="email" class="form-label">Email Address</label>
            <div class="input-group">
              <input
                type="email"
                class="form-control has-icon"
                id="email"
                name="email"
                placeholder="Enter your email"
                required
                autocomplete="email"
              />
              <i class="input-icon fas fa-envelope"></i>
            </div>
          </div>

          <div class="form-group">
            <label for="role" class="form-label">Account Type</label>
            <div class="input-group">
              <select
                class="form-control has-icon"
                id="role"
                name="role"
                required
              >
                <option value="">Choose your account type</option>
                <option value="Organiser">Organiser - Create and manage teams</option>
                <option value="Team Member">Team Member - Join and collaborate with teams</option>
              </select>
              <i class="input-icon fas fa-user-tag"></i>
            </div>
            <div class="form-text">
              <strong>Organiser:</strong> Create teams, manage members, and assign tasks<br />
              <strong>Team Member:</strong> Join teams and collaborate on assigned tasks
            </div>
          </div>

          <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <div class="input-group">
              <input
                type="password"
                class="form-control has-icon"
                id="password"
                name="password"
                placeholder="Create a strong password"
                required
                autocomplete="new-password"
              />
              <i class="input-icon fas fa-lock"></i>
            </div>
            <div class="form-text">
              <strong>Password Requirements:</strong><br />
              • At least 8 characters long<br />
              • One uppercase letter (A-Z)<br />
              • One lowercase letter (a-z)<br />
              • One number (0-9)
            </div>
            <div id="passwordStrength" class="password-strength"></div>
          </div>

          <div class="form-group">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <div class="input-group">
              <input
                type="password"
                class="form-control has-icon"
                id="confirmPassword"
                name="confirmPassword"
                placeholder="Confirm your password"
                required
                autocomplete="new-password"
              />
              <i class="input-icon fas fa-lock"></i>
            </div>
          </div>

          <div class="checkbox-group">
            <input
              type="checkbox"
              class="checkbox-input"
              id="terms"
              required
            />
            <label class="checkbox-label" for="terms">
              I agree to the <a href="#" class="text-primary" onclick="showTerms()">Terms of Service</a> and
              <a href="#" class="text-primary" onclick="showPrivacyPolicy()">Privacy Policy</a>
            </label>
          </div>

          <button type="submit" class="btn btn-primary" id="registerButton">
            <span>
              <i class="fas fa-user-plus"></i>
              Create Account
            </span>
          </button>
        </form>

        <div class="register-footer">
          <p>Already have an account? <a href="/login">Sign In</a></p>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Register page loaded");

        const registerForm = document.getElementById("registerForm");
        const registerButton = document.getElementById("registerButton");
        const errorAlert = document.getElementById("errorAlert");
        const errorMessage = document.getElementById("errorMessage");
        const passwordInput = document.getElementById("password");
        const confirmPasswordInput = document.getElementById("confirmPassword");
        const passwordStrength = document.getElementById("passwordStrength");

        registerForm.addEventListener("submit", function (e) {
          console.log("Form submit intercepted");
          e.preventDefault();
          handleRegister();
        });

        function showError(message) {
          errorMessage.textContent = message;
          errorAlert.classList.remove("hidden");
          errorAlert.classList.add("fade-in");
        }

        function hideError() {
          errorAlert.classList.add("hidden");
        }

        function setLoading(loading) {
          if (loading) {
            registerButton.disabled = true;
            registerButton.classList.add("btn-loading");
          } else {
            registerButton.disabled = false;
            registerButton.classList.remove("btn-loading");
          }
        }

        // Password strength indicator
        passwordInput.addEventListener("input", function () {
          const password = this.value;
          let strength = 0;
          let feedback = "";

          if (password.length >= 8) strength++;
          if (/[a-z]/.test(password)) strength++;
          if (/[A-Z]/.test(password)) strength++;
          if (/\d/.test(password)) strength++;

          switch (strength) {
            case 0:
            case 1:
              feedback = '<span class="strength-weak">Very Weak</span>';
              break;
            case 2:
              feedback = '<span class="strength-weak">Weak</span>';
              break;
            case 3:
              feedback = '<span class="strength-medium">Medium</span>';
              break;
            case 4:
              feedback = '<span class="strength-strong">Strong</span>';
              break;
          }

          passwordStrength.innerHTML = `Password Strength: ${feedback}`;
        });

        async function handleRegister() {
          console.log("handleRegister called");
          hideError();
          setLoading(true);

          const formData = new FormData(registerForm);
          const data = Object.fromEntries(formData);

          console.log("Register data:", { ...data, password: "***", confirmPassword: "***" });

          // Validation
          if (data.password !== data.confirmPassword) {
            setLoading(false);
            showError("Passwords do not match!");
            return;
          }

          if (data.password.length < 8) {
            setLoading(false);
            showError("Password must be at least 8 characters long!");
            return;
          }

          if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(data.password)) {
            setLoading(false);
            showError("Password must contain at least one lowercase letter, one uppercase letter, and one number!");
            return;
          }

          try {
            console.log("Sending registration request...");
            const response = await fetch("/api/auth/register", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            });

            console.log("Response status:", response.status);
            const result = await response.json();
            console.log("Register response:", {
              success: result.success,
              message: result.message,
            });

            if (response.ok && result.success) {
              // Show success message briefly then redirect
              registerButton.innerHTML = '<span><i class="fas fa-check"></i> Success!</span>';
              console.log("Registration successful, redirecting...");

              // Redirect to login with user data
              setTimeout(() => {
                window.location.href = `/login?email=${encodeURIComponent(data.email)}`;
              }, 1000);
            } else {
              setLoading(false);
              if (result.errors && result.errors.length > 0) {
                const errorMessages = result.errors.map((err) => err.msg).join(", ");
                showError("Registration failed: " + errorMessages);
              } else {
                showError(result.message || "Registration failed. Please try again.");
              }
              console.error("Registration failed:", result.message);
            }
          } catch (error) {
            setLoading(false);
            showError("Network error. Please check your connection and try again.");
            console.error("Registration error:", error);
          }
        }

        // Add input animations
        const inputs = document.querySelectorAll('.form-control');
        inputs.forEach(input => {
          input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
          });
          
          input.addEventListener('blur', function() {
            this.parentElement.classList.remove('focused');
          });
        });

        function showTerms() {
          alert('Terms of Service would be displayed here. This is a placeholder for the actual terms.');
        }

        function showPrivacyPolicy() {
          alert('Privacy Policy would be displayed here. This is a placeholder for the actual policy.');
        }
      }); // <-- Add this closing brace for DOMContentLoaded
    </script>
  </body>
</html>
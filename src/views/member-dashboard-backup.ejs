<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Member Dashboard - CollabSpace</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        :root {
            /* CollabSpace Brand Colors */
            --primary: #1e40af;
            --primary-light: #3b82f6;
            --primary-dark: #1d4ed8;
            --primary-50: #eff6ff;
            --primary-100: #dbeafe;
            --primary-500: #3b82f6;
            --primary-600: #2563eb;
            --primary-700: #1d4ed8;
            --primary-800: #1e40af;
            --primary-900: #1e3a8a;
            
            /* Accent Colors */
            --accent: #06b6d4;
            --accent-light: #22d3ee;
            --accent-dark: #0891b2;
            
            /* Status Colors */
            --success: #10b981;
            --success-light: #34d399;
            --success-dark: #059669;
            --warning: #f59e0b;
            --warning-light: #fbbf24;
            --warning-dark: #d97706;
            --danger: #ef4444;
            --danger-light: #f87171;
            --danger-dark: #dc2626;
            
            /* Gradients */
            --primary-gradient: linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #06b6d4 100%);
            --secondary-gradient: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            --success-gradient: linear-gradient(135deg, #10b981 0%, #34d399 100%);
            --warning-gradient: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);
            --danger-gradient: linear-gradient(135deg, #ef4444 0%, #f87171 100%);
            --accent-gradient: linear-gradient(135deg, #06b6d4 0%, #22d3ee 100%);
            
            /* Neutral Colors */
            --white: #ffffff;
            --gray-50: #f8fafc;
            --gray-100: #f1f5f9;
            --gray-200: #e2e8f0;
            --gray-300: #cbd5e1;
            --gray-400: #94a3b8;
            --gray-500: #64748b;
            --gray-600: #475569;
            --gray-700: #334155;
            --gray-800: #1e293b;
            --gray-900: #0f172a;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-2xl: 0 25px 50px -12px rgba(30, 64, 175, 0.15);
            --shadow-colored: 0 25px 50px -12px rgba(30, 64, 175, 0.25);
            
            /* Legacy color variables for backward compatibility */
            --color-primary: var(--primary);
            --color-primary-hover: var(--primary-light);
            --color-primary-light: var(--primary-100);
            --color-success: var(--success);
            --color-warning: var(--warning);
            --color-danger: var(--danger);
            --color-white: var(--white);
            --color-gray-50: var(--gray-50);
            --color-gray-100: var(--gray-100);
            --color-gray-200: var(--gray-200);
            --color-gray-300: var(--gray-300);
            --color-gray-400: var(--gray-400);
            --color-gray-500: var(--gray-500);
            --color-gray-600: var(--gray-600);
            --color-gray-700: var(--gray-700);
            --color-gray-800: var(--gray-800);
            --color-gray-900: var(--gray-900);
            --font-family-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-family-primary);
            background: var(--primary-gradient);
            background-attachment: fixed;
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            color: var(--gray-900);
            line-height: 1.6;
            min-height: 100vh;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            width: 320px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border-right: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-2xl);
            overflow-y: auto;
            z-index: 1000;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .sidebar-header {
            padding: 40px 32px;
            border-bottom: 1px solid var(--gray-200);
            background: linear-gradient(135deg, var(--primary-50) 0%, var(--white) 100%);
            position: relative;
            overflow: hidden;
        }

        .sidebar-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 20%, rgba(30, 64, 175, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }

        .brand-section {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            gap: 12px;
        }

        .brand-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
        }

        .brand-name {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
        }

        .user-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 80px;
            height: 80px;
            border-radius: 20px;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            font-weight: 800;
            margin-bottom: 20px;
            color: white;
            box-shadow: var(--shadow-lg);
            position: relative;
            overflow: hidden;
        }

        .user-avatar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
        }

        .user-info h3 {
            font-size: 24px;
            font-weight: 800;
            margin-bottom: 8px;
            color: var(--gray-900);
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .user-role {
            background: var(--primary-100);
            color: var(--primary-800);
            padding: 8px 16px;
            border-radius: 12px;
            font-size: 14px;
            font-weight: 600;
            display: inline-block;
            border: 1px solid var(--primary-200);
        }

        .nav-menu {
            list-style: none;
            padding: 24px 0;
        }

        .nav-item {
            margin-bottom: 4px;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 16px 32px;
            color: var(--gray-600);
            text-decoration: none;
            font-weight: 600;
            font-size: 15px;
            position: relative;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            border-radius: 0 25px 25px 0;
            margin-right: 20px;
        }

        .nav-link::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--primary-gradient);
            transform: scaleY(0);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 0 2px 2px 0;
        }

        .nav-link:hover::before,
        .nav-link.active::before {
            transform: scaleY(1);
        }

        .nav-link:hover,
        .nav-link.active {
            color: var(--primary);
            background: linear-gradient(135deg, var(--primary-50) 0%, rgba(30, 64, 175, 0.1) 100%);
            box-shadow: var(--shadow-sm);
        }

        .nav-link:hover {
            transform: translateX(4px);
        }

        .nav-link.active {
            color: var(--white);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            font-weight: 700;
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.4);
            transform: translateX(8px);
        }

        .nav-link.active i {
            color: var(--white);
        }

        .nav-link i {
            margin-right: 16px;
            font-size: 18px;
            width: 20px;
            transition: all 0.3s ease;
        }

        .nav-link:hover i {
            transform: scale(1.1);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 320px;
            padding: 32px;
            min-height: 100vh;
            position: relative;
        }

        .page-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 32px 40px;
            border-radius: 24px;
            box-shadow: var(--shadow-xl);
            margin-bottom: 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(30, 64, 175, 0.05) 0%, rgba(6, 182, 212, 0.05) 100%);
            pointer-events: none;
        }

        .page-title {
            font-size: 32px;
            font-weight: 800;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 8px;
        }

        .page-subtitle {
            color: var(--gray-600);
            font-size: 16px;
            font-weight: 500;
        }

        .header-actions {
            display: flex;
            gap: 16px;
            align-items: center;
        }

        .btn {
            padding: 14px 28px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 14px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .btn:hover::before {
            transform: translateX(100%);
        }

        .btn-primary {
            background: var(--primary-gradient);
            color: white;
            box-shadow: var(--shadow-lg);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-xl);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.9);
            color: var(--gray-700);
            border: 1px solid var(--gray-200);
            backdrop-filter: blur(10px);
        }

        .btn-secondary:hover {
            background: white;
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        /* Content Sections */
        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 32px;
            border-radius: 20px;
            box-shadow: var(--shadow-xl);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(30, 64, 175, 0.05) 0%, rgba(6, 182, 212, 0.05) 100%);
            pointer-events: none;
        }

        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-2xl);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .stat-title {
            color: var(--color-gray-600);
            font-size: 14px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 800;
            color: var(--color-gray-900);
            margin-bottom: 8px;
        }

        .stat-change {
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .stat-change.positive {
            color: var(--color-success);
        }

        .stat-change.negative {
            color: var(--color-danger);
        }

        /* Cards */
        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            box-shadow: var(--shadow-xl);
            margin-bottom: 32px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-2xl);
        }

        .card-header {
            padding: 24px 32px;
            border-bottom: 1px solid var(--color-gray-200);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--color-gray-900);
        }

        .card-content {
            padding: 32px;
        }

        /* Task List */
        .task-list {
            list-style: none;
        }

        .task-item {
            display: flex;
            align-items: center;
            padding: 16px 0;
            border-bottom: 1px solid var(--color-gray-100);
            transition: all 0.3s ease;
        }

        .task-item:hover {
            background: var(--color-gray-50);
            margin: 0 -16px;
            padding: 16px;
            border-radius: 8px;
        }

        .task-checkbox {
            margin-right: 16px;
            width: 20px;
            height: 20px;
            accent-color: var(--color-primary);
        }

        .task-content {
            flex: 1;
        }

        .task-title {
            font-weight: 600;
            color: var(--color-gray-900);
            margin-bottom: 4px;
        }

        .task-meta {
            font-size: 14px;
            color: var(--color-gray-500);
            display: flex;
            gap: 16px;
        }

        .task-priority {
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-high {
            background: rgba(239, 68, 68, 0.1);
            color: var(--color-danger);
        }

        .priority-medium {
            background: rgba(245, 158, 11, 0.1);
            color: var(--color-warning);
        }

        .priority-low {
            background: rgba(16, 185, 129, 0.1);
            color: var(--color-success);
        }

        /* Team Cards */
        .teams-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
        }

        .team-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 32px;
            box-shadow: var(--shadow-xl);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .team-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(30, 64, 175, 0.05) 0%, rgba(6, 182, 212, 0.05) 100%);
            pointer-events: none;
        }

        .team-card:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-2xl);
        }

        .team-header {
            display: flex;
            align-items: center;
            margin-bottom: 16px;
        }

        .team-avatar {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: var(--color-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            margin-right: 16px;
        }

        .team-info h3 {
            font-weight: 700;
            color: var(--color-gray-900);
            margin-bottom: 4px;
        }

        .team-info p {
            color: var(--color-gray-600);
            font-size: 14px;
        }

        .team-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px solid var(--color-gray-100);
        }

        .team-stat {
            text-align: center;
        }

        .team-stat-value {
            font-weight: 700;
            color: var(--color-gray-900);
            font-size: 18px;
        }

        .team-stat-label {
            font-size: 12px;
            color: var(--color-gray-500);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--color-gray-700);
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--color-gray-300);
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
        }

        /* Filter Bar */
        .filter-bar {
            display: flex;
            gap: 16px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid var(--color-gray-300);
            border-radius: 8px;
            background: white;
            font-size: 14px;
        }

        .search-input {
            flex: 1;
            min-width: 200px;
            padding: 8px 16px;
            border: 1px solid var(--color-gray-300);
            border-radius: 8px;
            font-size: 14px;
        }

        /* Loading States */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
            color: var(--color-gray-500);
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid var(--color-gray-200);
            border-top: 3px solid var(--color-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 48px 24px;
            color: var(--color-gray-500);
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--color-gray-700);
        }

        /* Quick Actions */
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 32px;
        }

        .quick-action {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 16px;
            padding: 24px;
            text-align: center;
            text-decoration: none;
            color: var(--gray-700);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .quick-action::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--primary-gradient);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .quick-action:hover {
            border-color: var(--primary);
            transform: translateY(-4px);
            box-shadow: var(--shadow-xl);
        }

        .quick-action:hover::before {
            opacity: 0.05;
        }

        .quick-action i {
            font-size: 32px;
            margin-bottom: 12px;
            color: var(--primary);
            transition: all 0.3s ease;
        }

        .quick-action:hover i {
            transform: scale(1.1);
        }

        .quick-action h4 {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .quick-action p {
            font-size: 14px;
            color: var(--color-gray-500);
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .sidebar {
                width: 280px;
            }

            .main-content {
                margin-left: 280px;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                transform: translateX(-100%);
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 16px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .teams-grid {
                grid-template-columns: 1fr;
            }

            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 16px;
                padding: 24px;
            }

            .header-actions {
                width: 100%;
                justify-content: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <div class="brand-section">
                    <div class="brand-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <h2 class="brand-name">CollabSpace</h2>
                </div>
                <div class="user-section">
                    <div class="user-avatar" id="userAvatar">
                        <%= user && user.name ? user.name.charAt(0).toUpperCase() : 'M' %>
                    </div>
                    <div class="user-info">
                        <h3 id="userName"><%= user ? user.name : 'Member' %></h3>
                        <span class="user-role">Team Member</span>
                    </div>
                </div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="#" class="nav-link active" data-section="overview">
                        <i class="fas fa-home"></i>
                        <span>Overview</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="tasks">
                        <i class="fas fa-tasks"></i>
                        <span>My Tasks</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="teams">
                        <i class="fas fa-users"></i>
                        <span>My Teams</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="messages">
                        <i class="fas fa-comments"></i>
                        <span>Messages</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="profile">
                        <i class="fas fa-user"></i>
                        <span>Profile</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="settings">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                </li>
                <li class="nav-item" style="margin-top: 32px;">
                    <a href="#" class="nav-link" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Overview Section -->
            <div id="overview" class="content-section active">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">Welcome back, <%= user ? user.name : 'Member' %>!</h1>
                        <p class="page-subtitle">Here's what's happening with your work today</p>
                    </div>
                    <div class="header-actions">
                        <button class="btn btn-secondary">
                            <i class="fas fa-bell"></i>
                            Notifications
                        </button>
                        <button class="btn btn-primary" onclick="showSection('tasks')">
                            <i class="fas fa-plus"></i>
                            View Tasks
                        </button>
                    </div>
                </div>

                <!-- Stats Cards -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-header">
                            <div class="stat-title">My Tasks</div>
                            <div class="stat-icon" style="background: rgba(30, 64, 175, 0.1); color: var(--color-primary);">
                                <i class="fas fa-tasks"></i>
                            </div>
                        </div>
                        <div class="stat-value" id="totalTasks">0</div>
                        <div class="stat-change positive">
                            <i class="fas fa-arrow-up"></i>
                            <span id="tasksChange">+0 this week</span>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-header">
                            <div class="stat-title">Completed</div>
                            <div class="stat-icon" style="background: rgba(16, 185, 129, 0.1); color: var(--color-success);">
                                <i class="fas fa-check-circle"></i>
                            </div>
                        </div>
                        <div class="stat-value" id="completedTasks">0</div>
                        <div class="stat-change positive">
                            <i class="fas fa-arrow-up"></i>
                            <span id="completedChange">+0 this week</span>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-header">
                            <div class="stat-title">Teams</div>
                            <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1); color: var(--color-warning);">
                                <i class="fas fa-users"></i>
                            </div>
                        </div>
                        <div class="stat-value" id="totalTeams">0</div>
                        <div class="stat-change">
                            <i class="fas fa-minus"></i>
                            <span>No change</span>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-header">
                            <div class="stat-title">Messages</div>
                            <div class="stat-icon" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6;">
                                <i class="fas fa-comments"></i>
                            </div>
                        </div>
                        <div class="stat-value" id="totalMessages">0</div>
                        <div class="stat-change positive">
                            <i class="fas fa-arrow-up"></i>
                            <span id="messagesChange">+0 today</span>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="quick-actions">
                    <div class="quick-action" onclick="showSection('tasks')">
                        <i class="fas fa-plus-circle"></i>
                        <h4>View Tasks</h4>
                        <p>Check your assigned tasks</p>
                    </div>
                    <div class="quick-action" onclick="showSection('teams')">
                        <i class="fas fa-users"></i>
                        <h4>Team Activity</h4>
                        <p>See what your teams are up to</p>
                    </div>
                    <div class="quick-action" onclick="showSection('messages')">
                        <i class="fas fa-comment-dots"></i>
                        <h4>Team Chat</h4>
                        <p>Join team conversations</p>
                    </div>
                    <div class="quick-action" onclick="showSection('profile')">
                        <i class="fas fa-user-edit"></i>
                        <h4>Update Profile</h4>
                        <p>Edit your information</p>
                    </div>
                </div>

                <!-- Recent Activity -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Recent Activity</h2>
                        <button class="btn btn-secondary">View All</button>
                    </div>
                    <div class="card-content">
                        <div id="recentActivity" class="loading">
                            <div class="spinner"></div>
                            <span style="margin-left: 16px;">Loading activity...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Tasks Section -->
            <div id="tasks" class="content-section">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">My Tasks</h1>
                        <p class="page-subtitle">Manage your assigned tasks and track progress</p>
                    </div>
                    <div class="header-actions">
                        <button class="btn btn-secondary" onclick="refreshTasks()">
                            <i class="fas fa-sync-alt"></i>
                            Refresh
                        </button>
                    </div>
                </div>

                <!-- Filter Bar -->
                <div class="filter-bar">
                    <input type="text" class="search-input" placeholder="Search tasks..." id="taskSearch">
                    <select class="filter-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                    <select class="filter-select" id="priorityFilter">
                        <option value="">All Priority</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>

                <!-- Tasks List -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Your Tasks</h2>
                        <div id="taskStats" class="stat-change">
                            <span id="taskCount">0 tasks</span>
                        </div>
                    </div>
                    <div class="card-content">
                        <ul id="tasksList" class="task-list">
                            <div class="loading">
                                <div class="spinner"></div>
                                <span style="margin-left: 16px;">Loading tasks...</span>
                            </div>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- My Teams Section -->
            <div id="teams" class="content-section">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">My Teams</h1>
                        <p class="page-subtitle">Teams you're a member of and their activities</p>
                    </div>
                    <div class="header-actions">
                        <button class="btn btn-secondary" onclick="refreshTeams()">
                            <i class="fas fa-sync-alt"></i>
                            Refresh
                        </button>
                    </div>
                </div>

                <!-- Teams Grid -->
                <div id="teamsGrid" class="teams-grid">
                    <div class="loading">
                        <div class="spinner"></div>
                        <span style="margin-left: 16px;">Loading teams...</span>
                    </div>
                </div>
            </div>

            <!-- Messages Section -->
            <div id="messages" class="content-section">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">Messages</h1>
                        <p class="page-subtitle">Team communications and chat</p>
                    </div>
                    <div class="header-actions">
                        <button class="btn btn-primary" onclick="openChat()">
                            <i class="fas fa-comments"></i>
                            Open Chat
                        </button>
                    </div>
                </div>

                <!-- Messages Content -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Team Messages</h2>
                        <button class="btn btn-secondary">Mark All Read</button>
                    </div>
                    <div class="card-content">
                        <div id="messagesList" class="loading">
                            <div class="spinner"></div>
                            <span style="margin-left: 16px;">Loading messages...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Section -->
            <div id="profile" class="content-section">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">My Profile</h1>
                        <p class="page-subtitle">Manage your personal information and preferences</p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Profile Information</h2>
                        <button class="btn btn-primary" onclick="editProfile()">
                            <i class="fas fa-edit"></i>
                            Edit Profile
                        </button>
                    </div>
                    <div class="card-content">
                        <form id="profileForm">
                            <div class="form-group">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-input" id="profileName" value="<%= user ? user.name : '' %>" readonly>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Email Address</label>
                                <input type="email" class="form-input" id="profileEmail" value="<%= user ? user.email : '' %>" readonly>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Bio</label>
                                <textarea class="form-input form-textarea" id="profileBio" readonly placeholder="Tell us about yourself..."></textarea>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Skills</label>
                                <input type="text" class="form-input" id="profileSkills" readonly placeholder="e.g., JavaScript, Python, Design...">
                            </div>
                            <div style="display: none;" id="profileActions">
                                <button type="button" class="btn btn-primary" onclick="saveProfile()">
                                    <i class="fas fa-save"></i>
                                    Save Changes
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="cancelEdit()">
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Settings Section -->
            <div id="settings" class="content-section">
                <div class="page-header">
                    <div>
                        <h1 class="page-title">Settings</h1>
                        <p class="page-subtitle">Configure your preferences and account settings</p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Notification Preferences</h2>
                    </div>
                    <div class="card-content">
                        <div class="form-group">
                            <label class="form-label">
                                <input type="checkbox" id="emailNotifications" checked>
                                Email notifications for new tasks
                            </label>
                        </div>
                        <div class="form-group">
                            <label class="form-label">
                                <input type="checkbox" id="pushNotifications" checked>
                                Push notifications for messages
                            </label>
                        </div>
                        <div class="form-group">
                            <label class="form-label">
                                <input type="checkbox" id="weeklyDigest" checked>
                                Weekly activity digest
                            </label>
                        </div>
                        <button class="btn btn-primary" onclick="saveSettings()">
                            <i class="fas fa-save"></i>
                            Save Settings
                        </button>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Account Security</h2>
                    </div>
                    <div class="card-content">
                        <div class="form-group">
                            <label class="form-label">Current Password</label>
                            <input type="password" class="form-input" id="currentPassword">
                        </div>
                        <div class="form-group">
                            <label class="form-label">New Password</label>
                            <input type="password" class="form-input" id="newPassword">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Confirm New Password</label>
                            <input type="password" class="form-input" id="confirmPassword">
                        </div>
                        <button class="btn btn-primary" onclick="changePassword()">
                            <i class="fas fa-key"></i>
                            Change Password
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Include Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        // Global variables
        let socket;
        let currentUser;
        let currentSection = 'overview';
        
    </script>
    
    <!-- User data injection -->
    <script type="application/json" id="userData"><%- JSON.stringify(user || null) %></script>
    
    <script>
        // Parse user data from JSON script tag
        currentUser = JSON.parse(document.getElementById('userData').textContent);

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeSocket();
            setupNavigation();
            loadDashboardData();
            setupEventListeners();
        });

        // Socket.IO initialization
        function initializeSocket() {
            socket = io();
            
            socket.on('connect', () => {
                console.log('Connected to server');
                if (currentUser && currentUser._id) {
                    socket.emit('join user', { userId: currentUser._id });
                }
            });

            socket.on('task update', (data) => {
                handleTaskUpdate(data);
            });

            socket.on('task updated', (data) => {
                console.log('Task updated event received:', data);
                handleTaskUpdate(data);
                // Refresh overview stats and task lists
                loadSectionData('overview');
                if (currentSection === 'tasks') {
                    loadSectionData('tasks');
                }
            });

            socket.on('dashboard refresh', (data) => {
                console.log('Dashboard refresh event received:', data);
                // Refresh current section data
                loadSectionData(currentSection || 'overview');
            });

            socket.on('team update', (data) => {
                handleTeamUpdate(data);
            });

            socket.on('new message', (data) => {
                handleNewMessage(data);
            });
        }

        // Navigation setup
        function setupNavigation() {
            console.log('Setting up navigation...');
            const navLinks = document.querySelectorAll('.nav-link');
            console.log('Found nav links:', navLinks.length);
            
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    console.log('Nav link clicked:', this.dataset.section);
                    
                    if (this.getAttribute('onclick')) {
                        console.log('Skipping link with onclick attribute');
                        return; // Skip logout link
                    }
                    
                    const section = this.dataset.section;
                    if (section) {
                        console.log('Calling showSection with:', section);
                        showSection(section);
                    } else {
                        console.error('No section data found for link:', this);
                    }
                });
            });
        }

        // Show specific section
        function showSection(sectionName) {
            console.log('Switching to section:', sectionName);
            currentSection = sectionName; // Track current section
            
            // Update navigation
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            const activeNavLink = document.querySelector(`[data-section="${sectionName}"]`);
            if (activeNavLink) {
                activeNavLink.classList.add('active');
                console.log('Set active nav:', sectionName);
            } else {
                console.error('Nav link not found for section:', sectionName);
            }
            
            // Update content
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            const activeSection = document.getElementById(sectionName);
            if (activeSection) {
                activeSection.classList.add('active');
                console.log('Set active content:', sectionName);
            } else {
                console.error('Content section not found:', sectionName);
            }
            
            // Load section-specific data
            loadSectionData(sectionName);
        }

        // Load dashboard data
        async function loadDashboardData() {
            try {
                await Promise.all([
                    loadStats(),
                    loadRecentActivity(),
                    loadTasks(),
                    loadTeams()
                ]);
            } catch (error) {
                console.error('Error loading dashboard data:', error);
            }
        }

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/api/member/stats');
                const data = await response.json();
                
                if (data.success) {
                    updateStats(data.stats);
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Update statistics display
        function updateStats(stats) {
            document.getElementById('totalTasks').textContent = stats.totalTasks || 0;
            document.getElementById('completedTasks').textContent = stats.completedTasks || 0;
            document.getElementById('totalTeams').textContent = stats.totalTeams || 0;
            document.getElementById('totalMessages').textContent = stats.totalMessages || 0;
            
            // Update changes
            document.getElementById('tasksChange').textContent = `+${stats.tasksThisWeek || 0} this week`;
            document.getElementById('completedChange').textContent = `+${stats.completedThisWeek || 0} this week`;
            document.getElementById('messagesChange').textContent = `+${stats.messagesToday || 0} today`;
        }

        // Load recent activity
        async function loadRecentActivity() {
            try {
                const response = await fetch('/api/member/activity');
                const data = await response.json();
                
                const activityContainer = document.getElementById('recentActivity');
                
                if (data.success && data.activities.length > 0) {
                    activityContainer.innerHTML = data.activities.map(activity => `
                        <div class="task-item">
                            <div class="task-content">
                                <div class="task-title">${activity.title}</div>
                                <div class="task-meta">
                                    <span><i class="fas fa-clock"></i> ${formatDate(activity.date)}</span>
                                    <span class="task-priority priority-${activity.type || 'medium'}">${activity.type || 'info'}</span>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    activityContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-history"></i>
                            <h3>No recent activity</h3>
                            <p>Your activity will appear here as you work on tasks</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading activity:', error);
                document.getElementById('recentActivity').innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>Error loading activity</h3>
                        <p>Please try refreshing the page</p>
                    </div>
                `;
            }
        }

        // Load tasks
        async function loadTasks() {
            try {
                const response = await fetch('/api/member/tasks');
                const data = await response.json();
                
                const tasksList = document.getElementById('tasksList');
                const taskCount = document.getElementById('taskCount');
                
                if (data.success && data.tasks.length > 0) {
                    tasksList.innerHTML = data.tasks.map(task => `
                        <li class="task-item">
                            <input type="checkbox" class="task-checkbox" ${task.status === 'completed' ? 'checked' : ''} 
                                   onchange="updateTaskStatus('${task._id}', this.checked)">
                            <div class="task-content">
                                <div class="task-title">${task.title}</div>
                                <div class="task-meta">
                                    <span><i class="fas fa-calendar"></i> Due ${formatDate(task.dueDate)}</span>
                                    <span><i class="fas fa-users"></i> ${task.team?.name || 'No Team'}</span>
                                    <span class="task-priority priority-${task.priority}">${task.priority}</span>
                                </div>
                            </div>
                        </li>
                    `).join('');
                    
                    taskCount.textContent = `${data.tasks.length} tasks`;
                } else {
                    tasksList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-tasks"></i>
                            <h3>No tasks assigned</h3>
                            <p>You don't have any tasks assigned yet</p>
                        </div>
                    `;
                    taskCount.textContent = '0 tasks';
                }
            } catch (error) {
                console.error('Error loading tasks:', error);
                document.getElementById('tasksList').innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>Error loading tasks</h3>
                        <p>Please try refreshing the page</p>
                    </div>
                `;
            }
        }

        // Load teams
        async function loadTeams() {
            try {
                const response = await fetch('/api/member/teams');
                const data = await response.json();
                
                const teamsGrid = document.getElementById('teamsGrid');
                
                if (data.success && data.teams.length > 0) {
                    teamsGrid.innerHTML = data.teams.map(team => `
                        <div class="team-card">
                            <div class="team-header">
                                <div class="team-avatar">${team.name.charAt(0).toUpperCase()}</div>
                                <div class="team-info">
                                    <h3>${team.name}</h3>
                                    <p>${team.description || 'No description'}</p>
                                </div>
                            </div>
                            <div class="team-stats">
                                <div class="team-stat">
                                    <div class="team-stat-value">${team.memberCount || 0}</div>
                                    <div class="team-stat-label">Members</div>
                                </div>
                                <div class="team-stat">
                                    <div class="team-stat-value">${team.taskCount || 0}</div>
                                    <div class="team-stat-label">Tasks</div>
                                </div>
                                <div class="team-stat">
                                    <div class="team-stat-value">${team.completedTasks || 0}</div>
                                    <div class="team-stat-label">Completed</div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    teamsGrid.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-users"></i>
                            <h3>No teams yet</h3>
                            <p>You're not a member of any teams yet</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading teams:', error);
                document.getElementById('teamsGrid').innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>Error loading teams</h3>
                        <p>Please try refreshing the page</p>
                    </div>
                `;
            }
        }

        // Load section-specific data
        function loadSectionData(section) {
            switch (section) {
                case 'tasks':
                    loadTasks();
                    break;
                case 'teams':
                    loadTeams();
                    break;
                case 'messages':
                    loadMessages();
                    break;
                case 'overview':
                    loadDashboardData();
                    break;
            }
        }

        // Load messages
        async function loadMessages() {
            try {
                const response = await fetch('/api/member/messages');
                const data = await response.json();
                
                const messagesList = document.getElementById('messagesList');
                
                if (data.success && data.messages.length > 0) {
                    messagesList.innerHTML = data.messages.map(message => `
                        <div class="task-item">
                            <div class="task-content">
                                <div class="task-title">${message.sender?.name || 'Unknown'}</div>
                                <div class="task-meta">
                                    <span>${message.content}</span>
                                    <span><i class="fas fa-clock"></i> ${formatDate(message.createdAt)}</span>
                                    <span><i class="fas fa-users"></i> ${message.team?.name || 'Direct Message'}</span>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    messagesList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-comments"></i>
                            <h3>No messages</h3>
                            <p>No recent messages to display</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading messages:', error);
                document.getElementById('messagesList').innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>Error loading messages</h3>
                        <p>Please try refreshing the page</p>
                    </div>
                `;
            }
        }

        // Event listeners setup
        function setupEventListeners() {
            // Task search
            document.getElementById('taskSearch')?.addEventListener('input', filterTasks);
            document.getElementById('statusFilter')?.addEventListener('change', filterTasks);
            document.getElementById('priorityFilter')?.addEventListener('change', filterTasks);
        }

        // Filter tasks
        function filterTasks() {
            const search = document.getElementById('taskSearch')?.value.toLowerCase() || '';
            const status = document.getElementById('statusFilter')?.value || '';
            const priority = document.getElementById('priorityFilter')?.value || '';
            
            const tasks = document.querySelectorAll('#tasksList .task-item');
            
            tasks.forEach(task => {
                const title = task.querySelector('.task-title')?.textContent.toLowerCase() || '';
                const taskPriority = task.querySelector('.task-priority')?.textContent || '';
                const checkbox = task.querySelector('.task-checkbox');
                const taskStatus = checkbox?.checked ? 'completed' : 'pending';
                
                const matchesSearch = title.includes(search);
                const matchesStatus = !status || taskStatus === status;
                const matchesPriority = !priority || taskPriority === priority;
                
                task.style.display = matchesSearch && matchesStatus && matchesPriority ? 'flex' : 'none';
            });
        }

        // Task functions
        async function updateTaskStatus(taskId, completed) {
            try {
                const response = await fetch(`/api/tasks/${taskId}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        status: completed ? 'completed' : 'pending' 
                    })
                });
                
                if (response.ok) {
                    // Refresh stats and tasks
                    loadStats();
                    showNotification('Task updated successfully', 'success');
                } else {
                    throw new Error('Failed to update task');
                }
            } catch (error) {
                console.error('Error updating task:', error);
                showNotification('Error updating task', 'error');
            }
        }

        function refreshTasks() {
            loadTasks();
            showNotification('Tasks refreshed', 'success');
        }

        function refreshTeams() {
            loadTeams();
            showNotification('Teams refreshed', 'success');
        }

        // Profile functions
        function editProfile() {
            const inputs = document.querySelectorAll('#profileForm input, #profileForm textarea');
            inputs.forEach(input => input.removeAttribute('readonly'));
            document.getElementById('profileActions').style.display = 'block';
        }

        function cancelEdit() {
            const inputs = document.querySelectorAll('#profileForm input, #profileForm textarea');
            inputs.forEach(input => input.setAttribute('readonly', true));
            document.getElementById('profileActions').style.display = 'none';
        }

        async function saveProfile() {
            try {
                const profileData = {
                    name: document.getElementById('profileName').value,
                    bio: document.getElementById('profileBio').value,
                    skills: document.getElementById('profileSkills').value
                };
                
                const response = await fetch('/api/user/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(profileData)
                });
                
                if (response.ok) {
                    cancelEdit();
                    showNotification('Profile updated successfully', 'success');
                } else {
                    throw new Error('Failed to update profile');
                }
            } catch (error) {
                console.error('Error updating profile:', error);
                showNotification('Error updating profile', 'error');
            }
        }

        // Settings functions
        async function saveSettings() {
            try {
                const settings = {
                    emailNotifications: document.getElementById('emailNotifications').checked,
                    pushNotifications: document.getElementById('pushNotifications').checked,
                    weeklyDigest: document.getElementById('weeklyDigest').checked
                };
                
                const response = await fetch('/api/user/settings', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(settings)
                });
                
                if (response.ok) {
                    showNotification('Settings saved successfully', 'success');
                } else {
                    throw new Error('Failed to save settings');
                }
            } catch (error) {
                console.error('Error saving settings:', error);
                showNotification('Error saving settings', 'error');
            }
        }

        async function changePassword() {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
                showNotification('Passwords do not match', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/user/change-password', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        currentPassword,
                        newPassword
                    })
                });
                
                if (response.ok) {
                    document.getElementById('currentPassword').value = '';
                    document.getElementById('newPassword').value = '';
                    document.getElementById('confirmPassword').value = '';
                    showNotification('Password changed successfully', 'success');
                } else {
                    throw new Error('Failed to change password');
                }
            } catch (error) {
                console.error('Error changing password:', error);
                showNotification('Error changing password', 'error');
            }
        }

        // Chat functions
        function openChat() {
            window.open('/chat', '_blank');
        }

        // Socket event handlers
        function handleTaskUpdate(data) {
            if (data.assignedTo === currentUser._id) {
                loadTasks();
                loadStats();
            }
        }

        function handleTeamUpdate(data) {
            loadTeams();
        }

        function handleNewMessage(data) {
            loadStats(); // Update message count
            if (document.getElementById('messages').classList.contains('active')) {
                loadMessages();
            }
        }

        // Utility functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diff = now - date;
            
            if (diff < 60000) return 'Just now';
            if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
            if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
            if (diff < 604800000) return `${Math.floor(diff / 86400000)}d ago`;
            
            return date.toLocaleDateString();
        }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? 'var(--color-success)' : type === 'error' ? 'var(--color-danger)' : 'var(--color-primary)'};
                color: white;
                padding: 16px 24px;
                border-radius: 8px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                z-index: 10000;
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                window.location.href = '/logout';
            }
        }
    </script>
</body>
</html>

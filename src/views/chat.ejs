<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CollabSpace Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-purple: #7B61FF;
            --primary-blue: #3B82F6;
            --dark-bg: #1E1B2E;
            --sidebar-bg: #2A2D3A;
            --chat-bg: #FFFFFF;
            --message-bg: #F5F5F7;
            --text-primary: #1A1A1A;
            --text-secondary: #6B7280;
            --text-muted: #9CA3AF;
            --text-white: #FFFFFF;
            --border-color: #E5E7EB;
            --online-green: #10B981;
            --unread-red: #EF4444;
            --hover-bg: #F3F4F6;
            --purple-light: #F0ECFF;
            --gradient-bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
        }

        .chat-container {
            display: flex;
            height: 100vh;
        }

        /* Left Sidebar Navigation */
        .sidebar-nav {
            width: 80px;
            background: var(--dark-bg);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px 0;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-nav .logo {
            margin-bottom: 30px;
            color: var(--text-white);
            font-size: 24px;
        }

        .nav-icons {
            display: flex;
            flex-direction: column;
            gap: 20px;
            flex: 1;
        }

        .nav-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-icon:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-white);
        }

        .nav-icon.active {
            background: var(--primary-purple);
            color: var(--text-white);
        }

        .nav-icon .notification-dot {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            background: var(--unread-red);
            border-radius: 50%;
        }

        .user-section {
            margin-top: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
        }

        /* Chat List */
        .chat-list {
            width: 350px;
            background: var(--chat-bg);
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--border-color);
        }

        .chat-header {
            padding: 24px;
            border-bottom: 1px solid var(--border-color);
        }

        .chat-header h2 {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 16px;
        }

        .search-container {
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px 12px 44px;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            background: var(--message-bg);
            font-size: 14px;
            outline: none;
        }

        .search-input:focus {
            border-color: var(--primary-purple);
        }

        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }

        .chat-items {
            flex: 1;
            overflow-y: auto;
            padding: 8px;
        }

        .chat-item {
            display: flex;
            align-items: center;
            padding: 16px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 4px;
        }

        .chat-item:hover {
            background: var(--hover-bg);
        }

        .chat-item.active {
            background: var(--purple-light);
        }

        .chat-avatar {
            position: relative;
            margin-right: 12px;
        }

        .chat-avatar img {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            background: var(--online-green);
            border: 2px solid white;
            border-radius: 50%;
        }

        .chat-info {
            flex: 1;
            min-width: 0;
        }

        .chat-name {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 4px;
        }

        .chat-last-message {
            color: var(--text-secondary);
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-meta {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 4px;
        }

        .chat-time {
            font-size: 12px;
            color: var(--text-muted);
        }

        .unread-badge {
            background: var(--unread-red);
            color: white;
            font-size: 12px;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 12px;
            min-width: 20px;
            text-align: center;
        }

        /* Main Chat Window */
        .chat-window {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--chat-bg);
        }

        .chat-window-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-title-section h3 {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .chat-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .chat-actions {
            display: flex;
            gap: 16px;
        }

        .action-btn {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--hover-bg);
            color: var(--text-primary);
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 24px;
            background: linear-gradient(to bottom, rgba(123, 97, 255, 0.02), rgba(255, 255, 255, 1));
        }

        .message {
            display: flex;
            margin-bottom: 24px;
            animation: fadeInUp 0.3s ease;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.sent {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin: 0 12px;
            object-fit: cover;
        }

        .message-content {
            max-width: 60%;
        }

        .message.sent .message-content {
            align-items: flex-end;
        }

        .message-bubble {
            padding: 16px 20px;
            border-radius: 20px;
            font-size: 15px;
            line-height: 1.4;
            position: relative;
        }

        .message.received .message-bubble {
            background: var(--message-bg);
            border-bottom-left-radius: 6px;
        }

        .message.sent .message-bubble {
            background: var(--primary-purple);
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-info {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 6px;
            font-size: 12px;
            color: var(--text-muted);
        }

        .message.sent .message-info {
            justify-content: flex-end;
        }

        .message-status {
            color: var(--primary-purple);
        }

        .message-image {
            border-radius: 16px;
            overflow: hidden;
            margin-bottom: 8px;
        }

        .message-image img {
            width: 100%;
            max-width: 300px;
            height: auto;
            display: block;
        }

        .voice-message {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px 20px;
            background: var(--message-bg);
            border-radius: 20px;
            border-bottom-left-radius: 6px;
        }

        .voice-play-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: var(--primary-purple);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .voice-waveform {
            flex: 1;
            height: 24px;
            background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 20'%3E%3Cg fill='%23e5e7eb'%3E%3Crect x='0' y='8' width='2' height='4'/%3E%3Crect x='4' y='5' width='2' height='10'/%3E%3Crect x='8' y='2' width='2' height='16'/%3E%3Crect x='12' y='6' width='2' height='8'/%3E%3Crect x='16' y='4' width='2' height='12'/%3E%3Crect x='20' y='7' width='2' height='6'/%3E%3Crect x='24' y='3' width='2' height='14'/%3E%3Crect x='28' y='9' width='2' height='2'/%3E%3Crect x='32' y='5' width='2' height='10'/%3E%3Crect x='36' y='8' width='2' height='4'/%3E%3C/g%3E%3C/svg%3E") center/contain no-repeat;
        }

        .voice-duration {
            font-size: 12px;
            color: var(--text-muted);
        }

        /* Chat Input */
        .chat-input-container {
            padding: 20px 24px;
            border-top: 1px solid var(--border-color);
            background: white;
        }

        .input-wrapper {
            display: flex;
            align-items: center;
            gap: 12px;
            background: var(--message-bg);
            border-radius: 24px;
            padding: 12px 20px;
            border: 1px solid transparent;
            transition: all 0.3s ease;
        }

        .input-wrapper:focus-within {
            border-color: var(--primary-purple);
            box-shadow: 0 0 0 3px rgba(123, 97, 255, 0.1);
        }

        .attachment-btn {
            color: var(--text-muted);
            font-size: 18px;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .attachment-btn:hover {
            color: var(--primary-purple);
        }

        .message-input {
            flex: 1;
            border: none;
            outline: none;
            background: transparent;
            font-size: 15px;
            color: var(--text-primary);
        }

        .message-input::placeholder {
            color: var(--text-muted);
        }

        .input-actions {
            display: flex;
            gap: 12px;
        }

        .send-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary-purple);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .send-btn:hover {
            background: #6b46e8;
            transform: scale(1.05);
        }

        /* Group Info Sidebar */
        .group-info {
            width: 320px;
            background: var(--chat-bg);
            border-left: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
        }

        .group-info-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .group-info-header h3 {
            font-size: 18px;
            font-weight: 600;
        }

        .close-btn {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background: transparent;
            border: none;
            color: var(--text-muted);
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: var(--hover-bg);
            color: var(--text-primary);
        }

        .group-info-content {
            flex: 1;
            overflow-y: auto;
            padding: 24px;
        }

        .info-section {
            margin-bottom: 32px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
        }

        .section-action {
            color: var(--primary-purple);
            font-size: 14px;
            text-decoration: none;
            font-weight: 500;
        }

        .files-preview {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 16px;
        }

        .file-thumbnail {
            aspect-ratio: 1;
            border-radius: 8px;
            overflow: hidden;
        }

        .file-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .file-category {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .file-category:last-child {
            border-bottom: none;
        }

        .category-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .category-icon {
            color: var(--text-muted);
            font-size: 16px;
        }

        .expand-btn {
            color: var(--text-muted);
            font-size: 14px;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .expand-btn:hover {
            color: var(--text-primary);
        }

        .members-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .member-item {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .member-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            object-fit: cover;
        }

        .member-info {
            flex: 1;
        }

        .member-name {
            font-weight: 500;
            font-size: 14px;
        }

        .member-status {
            font-size: 12px;
            color: var(--text-muted);
        }

        .admin-badge {
            background: var(--purple-light);
            color: var(--primary-purple);
            font-size: 11px;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 12px;
        }

        /* Scrollbar Styling */
        .chat-items::-webkit-scrollbar,
        .messages-container::-webkit-scrollbar,
        .group-info-content::-webkit-scrollbar {
            width: 4px;
        }

        .chat-items::-webkit-scrollbar-track,
        .messages-container::-webkit-scrollbar-track,
        .group-info-content::-webkit-scrollbar-track {
            background: transparent;
        }

        .chat-items::-webkit-scrollbar-thumb,
        .messages-container::-webkit-scrollbar-thumb,
        .group-info-content::-webkit-scrollbar-thumb {
            background: var(--border-color);
            border-radius: 2px;
        }

        .chat-items::-webkit-scrollbar-thumb:hover,
        .messages-container::-webkit-scrollbar-thumb:hover,
        .group-info-content::-webkit-scrollbar-thumb:hover {
            background: var(--text-muted);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .group-info {
                display: none;
            }
        }

        @media (max-width: 768px) {
            .chat-list {
                width: 300px;
            }
            
            .sidebar-nav {
                width: 60px;
            }
        }

        @media (max-width: 600px) {
            .chat-list {
                position: absolute;
                left: 0;
                top: 0;
                height: 100vh;
                z-index: 10;
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .chat-list.open {
                transform: translateX(0);
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Left Sidebar Navigation -->
        <div class="sidebar-nav">
            <div class="logo">
                <i class="fas fa-atom"></i>
            </div>
            
            <div class="nav-icons">
                <div class="nav-icon">
                    <i class="fas fa-inbox"></i>
                    <span class="notification-dot"></span>
                </div>
                <div class="nav-icon active">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="nav-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="nav-icon">
                    <i class="fas fa-newspaper"></i>
                </div>
                <div class="nav-icon">
                    <i class="fas fa-archive"></i>
                </div>
            </div>
            
            <div class="user-section">
                <div class="nav-icon">
                    <i class="fas fa-user"></i>
                </div>
                <div class="nav-icon">
                    <i class="fas fa-edit"></i>
                </div>
                <div class="nav-icon">
                    <i class="fas fa-sign-out-alt"></i>
                </div>
            </div>
        </div>

        <!-- Chat List -->
        <div class="chat-list">
            <div class="chat-header">
                <h2>Design chat</h2>
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="search-input" placeholder="Search" id="searchInput">
                </div>
            </div>
            
            <div class="chat-items" id="chatItems">
                <!-- Chat items will be dynamically populated -->
            </div>
        </div>

        <!-- Main Chat Window -->
        <div class="chat-window">
            <div class="chat-window-header">
                <div class="chat-title-section">
                    <h3 id="currentChatTitle">Design chat</h3>
                    <p class="chat-subtitle" id="currentChatSubtitle">23 members, 10 online</p>
                </div>
                <div class="chat-actions">
                    <button class="action-btn" id="voiceCallBtn">
                        <i class="fas fa-phone"></i>
                    </button>
                    <button class="action-btn" id="videoCallBtn">
                        <i class="fas fa-video"></i>
                    </button>
                    <button class="action-btn" id="moreOptionsBtn">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>
            
            <div class="messages-container" id="messagesContainer">
                <!-- Messages will be dynamically populated -->
            </div>
            
            <div class="chat-input-container">
                <div class="input-wrapper">
                    <button class="attachment-btn" id="attachmentBtn">
                        <i class="fas fa-paperclip"></i>
                    </button>
                    <input type="text" class="message-input" placeholder="Your message" id="messageInput">
                    <div class="input-actions">
                        <button class="attachment-btn" id="voiceBtn">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button class="attachment-btn" id="emojiBtn">
                            <i class="fas fa-smile"></i>
                        </button>
                    </div>
                    <button class="send-btn" id="sendBtn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Group Info Sidebar -->
        <div class="group-info">
            <div class="group-info-header">
                <h3>Group Info</h3>
                <button class="close-btn" id="closeGroupInfo">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="group-info-content">
                <div class="info-section">
                    <div class="section-header">
                        <h4 class="section-title">Files</h4>
                        <a href="#" class="section-action">View all</a>
                    </div>
                    
                    <div class="files-preview">
                        <div class="file-thumbnail">
                            <img src="https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=150&h=150&fit=crop" alt="File preview">
                        </div>
                        <div class="file-thumbnail">
                            <img src="https://images.unsplash.com/photo-1556761175-5973dc0f32e7?w=150&h=150&fit=crop" alt="File preview">
                        </div>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-image category-icon"></i>
                            <span>265 photos</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-video category-icon"></i>
                            <span>13 videos</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-file-alt category-icon"></i>
                            <span>378 files</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-link category-icon"></i>
                            <span>45 shared links</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-microphone category-icon"></i>
                            <span>21 audio files</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                    
                    <div class="file-category">
                        <div class="category-info">
                            <i class="fas fa-volume-up category-icon"></i>
                            <span>2,589 voice messages</span>
                        </div>
                        <i class="fas fa-chevron-down expand-btn"></i>
                    </div>
                </div>
                
                <div class="info-section">
                    <div class="section-header">
                        <h4 class="section-title">23 members</h4>
                        <button class="close-btn">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="members-list" id="membersList">
                        <!-- Members will be dynamically populated -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const API_BASE = '/api/chat';
        let currentUser = null;
        let currentChatId = null;
        let chatData = {
            conversations: [],
            messages: {},
            members: []
        };

        // Initialize the chat interface
        async function initializeChat() {
            try {
                // Load conversations from database
                await loadConversations();
                
                // Select first conversation if available
                if (chatData.conversations.length > 0) {
                    await selectChat(chatData.conversations[0].id);
                }
                
                setupEventListeners();
                
                // Start polling for new messages (in production, use WebSockets)
                setInterval(refreshCurrentChat, 5000);
            } catch (error) {
                console.error('Failed to initialize chat:', error);
                showError('Failed to load chat. Please refresh the page.');
            }
        }

        // Load conversations from database
        async function loadConversations() {
            try {
                const response = await fetch(`${API_BASE}/conversations`);
                const data = await response.json();
                
                if (data.success) {
                    chatData.conversations = data.conversations;
                    renderChatList();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error loading conversations:', error);
                throw error;
            }
        }

        // Load messages for a conversation
        async function loadMessages(conversationId) {
            try {
                const response = await fetch(`${API_BASE}/messages/${conversationId}`);
                const data = await response.json();
                
                if (data.success) {
                    chatData.messages[conversationId] = data.messages;
                    renderMessages();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
                showError('Failed to load messages');
            }
        }

        // Load team members
        async function loadMembers(teamId) {
            try {
                const response = await fetch(`${API_BASE}/team/${teamId}/members`);
                const data = await response.json();
                
                if (data.success) {
                    chatData.members = data.members;
                    renderMembers();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error loading members:', error);
            }
        }

        // Render chat list
        function renderChatList() {
            const chatItems = document.getElementById('chatItems');
            chatItems.innerHTML = '';

            chatData.conversations.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = `chat-item ${chat.id === currentChatId ? 'active' : ''}`;
                chatItem.onclick = () => selectChat(chat.id);

                const lastMessageText = chat.lastMessage ? 
                    (chat.lastMessage.type === 'image' ? '📷 Image' :
                     chat.lastMessage.type === 'voice' ? '🎤 Voice message' :
                     chat.lastMessage.content) : 'No messages yet';

                const timeAgo = chat.lastMessage ? 
                    formatTimeAgo(new Date(chat.lastMessage.timestamp)) : '';

                chatItem.innerHTML = `
                    <div class="chat-avatar">
                        <img src="${chat.avatar || generateAvatar(chat.name)}" alt="${chat.name}">
                        ${chat.type === 'group' && chat.onlineMembers > 0 ? '<div class="online-indicator"></div>' : ''}
                    </div>
                    <div class="chat-info">
                        <div class="chat-name">${chat.name}</div>
                        <div class="chat-last-message">${lastMessageText}</div>
                    </div>
                    <div class="chat-meta">
                        <div class="chat-time">${timeAgo}</div>
                        ${chat.unreadCount > 0 ? `<div class="unread-badge">${chat.unreadCount}</div>` : ''}
                    </div>
                `;

                chatItems.appendChild(chatItem);
            });
        }

        // Render messages for current chat
        function renderMessages() {
            const messagesContainer = document.getElementById('messagesContainer');
            const messages = chatData.messages[currentChatId] || [];
            
            messagesContainer.innerHTML = '';

            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.sender.id === currentUser?.id ? 'sent' : 'received'}`;

                let messageContent = '';
                
                if (message.type === 'text') {
                    messageContent = `
                        <div class="message-bubble">${escapeHtml(message.content)}</div>
                    `;
                } else if (message.type === 'image') {
                    messageContent = `
                        <div class="message-image">
                            <img src="${message.content}" alt="Shared image" loading="lazy">
                        </div>
                    `;
                } else if (message.type === 'voice') {
                    messageContent = `
                        <div class="voice-message">
                            <button class="voice-play-btn" data-message-id="${message.id}">
                                <i class="fas fa-play"></i>
                            </button>
                            <div class="voice-waveform"></div>
                            <div class="voice-duration">${message.duration || '0:15'}</div>
                        </div>
                    `;
                }

                const isOwnMessage = message.sender.id === currentUser?.id;
                const senderInfo = isOwnMessage ? '' : `${message.sender.name} • `;
                const statusIcon = isOwnMessage ? `<i class="fas fa-check-double message-status"></i>` : '';

                messageDiv.innerHTML = `
                    <img src="${message.sender.avatar}" alt="${message.sender.name}" class="message-avatar">
                    <div class="message-content">
                        ${messageContent}
                        <div class="message-info">
                            ${senderInfo}${message.timestamp} ${statusIcon}
                            ${message.isEdited ? '<span class="edited-indicator">(edited)</span>' : ''}
                        </div>
                    </div>
                `;

                messagesContainer.appendChild(messageDiv);
            });

            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Render members list
        function renderMembers() {
            const membersList = document.getElementById('membersList');
            membersList.innerHTML = '';

            chatData.members.forEach(member => {
                const memberDiv = document.createElement('div');
                memberDiv.className = 'member-item';

                memberDiv.innerHTML = `
                    <img src="${member.avatar}" alt="${member.name}" class="member-avatar">
                    <div class="member-info">
                        <div class="member-name">${member.name}</div>
                        <div class="member-status">${member.online ? 'Online' : 'Last seen recently'}</div>
                    </div>
                    ${member.role === 'admin' ? '<div class="admin-badge">admin</div>' : ''}
                `;

                membersList.appendChild(memberDiv);
            });
        }

        // Select a chat
        async function selectChat(chatId) {
            currentChatId = chatId;
            const selectedChat = chatData.conversations.find(chat => chat.id === chatId);
            
            if (!selectedChat) return;

            // Update chat title
            document.getElementById('currentChatTitle').textContent = selectedChat.name;
            
            if (selectedChat.type === 'group') {
                document.getElementById('currentChatSubtitle').textContent = 
                    `${selectedChat.members} members, ${selectedChat.onlineMembers} online`;
            } else {
                document.getElementById('currentChatSubtitle').textContent = 
                    'Direct message';
            }

            // Load messages and members
            await Promise.all([
                loadMessages(chatId),
                selectedChat.type === 'group' ? loadMembers(chatId) : Promise.resolve()
            ]);

            renderChatList();
        }

        // Send message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const content = messageInput.value.trim();
            
            if (!content || !currentChatId) return;

            try {
                const response = await fetch(`${API_BASE}/messages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        content: content,
                        teamId: currentChatId,
                        messageType: 'text'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Add message to local state
                    if (!chatData.messages[currentChatId]) {
                        chatData.messages[currentChatId] = [];
                    }
                    chatData.messages[currentChatId].push(data.message);

                    // Update conversation last message
                    const conversation = chatData.conversations.find(c => c.id === currentChatId);
                    if (conversation) {
                        conversation.lastMessage = {
                            content: content,
                            sender: data.message.sender.name,
                            timestamp: new Date(),
                            type: 'text'
                        };
                    }

                    messageInput.value = '';
                    renderMessages();
                    renderChatList();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showError('Failed to send message');
            }
        }

        // Refresh current chat
        async function refreshCurrentChat() {
            if (currentChatId) {
                await loadMessages(currentChatId);
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Send button
            document.getElementById('sendBtn').addEventListener('click', sendMessage);

            // Enter key to send
            document.getElementById('messageInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Search functionality
            document.getElementById('searchInput').addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                const chatItems = document.querySelectorAll('.chat-item');
                
                chatItems.forEach(item => {
                    const chatName = item.querySelector('.chat-name').textContent.toLowerCase();
                    if (chatName.includes(searchTerm)) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });

            // Voice message play buttons
            document.addEventListener('click', (e) => {
                if (e.target.closest('.voice-play-btn')) {
                    const playBtn = e.target.closest('.voice-play-btn');
                    const icon = playBtn.querySelector('i');
                    
                    if (icon.classList.contains('fa-play')) {
                        icon.classList.remove('fa-play');
                        icon.classList.add('fa-pause');
                        // TODO: Implement actual audio playback
                    } else {
                        icon.classList.remove('fa-pause');
                        icon.classList.add('fa-play');
                    }
                }
            });

            // File category expansion
            document.addEventListener('click', (e) => {
                if (e.target.closest('.expand-btn')) {
                    const expandBtn = e.target.closest('.expand-btn');
                    if (expandBtn.classList.contains('fa-chevron-down')) {
                        expandBtn.classList.remove('fa-chevron-down');
                        expandBtn.classList.add('fa-chevron-up');
                    } else {
                        expandBtn.classList.remove('fa-chevron-up');
                        expandBtn.classList.add('fa-chevron-down');
                    }
                }
            });
        }

        // Utility functions
        function generateAvatar(name) {
            return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=7B61FF&color=fff&size=100`;
        }

        function formatTimeAgo(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);

            if (minutes < 1) return 'now';
            if (minutes < 60) return `${minutes}m`;
            if (hours < 24) return `${hours}h`;
            return `${days}d`;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showError(message) {
            // TODO: Implement proper error notification system
            console.error(message);
            alert(message);
        }

        // Set current user (in production, get from authentication)
        currentUser = {
            id: 'current-user',
            name: 'You',
            avatar: 'https://ui-avatars.com/api/?name=You&background=7B61FF&color=fff'
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', initializeChat);
    </script>
</body>
</html>
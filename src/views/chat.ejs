<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat - CollabSpace</title>

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/public/css/style.css" />

    <%- include('partials/head') %>
  </head>
  <body class="bg-light">
    <!-- Navigation -->
    <%- include('partials/nav') %>

    <!-- Main Content -->
    <main class="container-fluid">
      <div class="row">
        <!-- Sidebar -->
        <%- include('partials/sidebar') %>

        <!-- Main Content Area -->
        <div class="col-md-9">
          <div class="container-fluid">
            <div class="row">
              <!-- Chat Sidebar -->
              <div class="col-md-3">
                <div class="card">
                  <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-users me-2"></i>Teams</h6>
                  </div>
                  <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="teamsList">
                      <a
                        href="#"
                        class="list-group-item list-group-item-action active"
                        data-team-id="1"
                      >
                        <div class="d-flex w-100 justify-content-between">
                          <h6 class="mb-1">Development Team</h6>
                          <small class="badge bg-success">5 online</small>
                        </div>
                        <small class="text-muted"
                          >Last message: 2 min ago</small
                        >
                      </a>
                      <a
                        href="#"
                        class="list-group-item list-group-item-action"
                        data-team-id="2"
                      >
                        <div class="d-flex w-100 justify-content-between">
                          <h6 class="mb-1">Marketing Team</h6>
                          <small class="badge bg-warning">3 online</small>
                        </div>
                        <small class="text-muted"
                          >Last message: 1 hour ago</small
                        >
                      </a>
                      <a
                        href="#"
                        class="list-group-item list-group-item-action"
                        data-team-id="3"
                      >
                        <div class="d-flex w-100 justify-content-between">
                          <h6 class="mb-1">Design Team</h6>
                          <small class="badge bg-secondary">2 online</small>
                        </div>
                        <small class="text-muted"
                          >Last message: 3 hours ago</small
                        >
                      </a>
                    </div>
                  </div>
                </div>

                <!-- Online Users -->
                <div class="card mt-3">
                  <div class="card-header">
                    <h6 class="mb-0">
                      <i class="fas fa-circle text-success me-2"></i>Online
                      Users
                    </h6>
                  </div>
                  <div class="card-body p-0">
                    <div
                      class="list-group list-group-flush"
                      id="onlineUsersList"
                    >
                      <div class="list-group-item d-flex align-items-center">
                        <img
                          src="https://via.placeholder.com/32x32"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div>
                          <small class="fw-bold">John Doe</small>
                          <div class="small text-muted">Development Team</div>
                        </div>
                        <span class="badge bg-success ms-auto">‚óè</span>
                      </div>
                      <div class="list-group-item d-flex align-items-center">
                        <img
                          src="https://via.placeholder.com/32x32"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div>
                          <small class="fw-bold">Jane Smith</small>
                          <div class="small text-muted">Marketing Team</div>
                        </div>
                        <span class="badge bg-success ms-auto">‚óè</span>
                      </div>
                      <div class="list-group-item d-flex align-items-center">
                        <img
                          src="https://via.placeholder.com/32x32"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div>
                          <small class="fw-bold">Bob Johnson</small>
                          <div class="small text-muted">Design Team</div>
                        </div>
                        <span class="badge bg-success ms-auto">‚óè</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Chat Main Area -->
              <div class="col-md-9">
                <div class="card">
                  <div
                    class="card-header d-flex justify-content-between align-items-center"
                  >
                    <div>
                      <h6 class="mb-0" id="currentTeamName">
                        Development Team
                      </h6>
                      <small class="text-muted" id="currentTeamStatus"
                        >5 members ‚Ä¢ 3 online</small
                      >
                    </div>
                    <div class="btn-group">
                      <button
                        class="btn btn-sm btn-outline-secondary"
                        data-bs-toggle="modal"
                        data-bs-target="#inviteUserModal"
                      >
                        <i class="fas fa-user-plus"></i>
                      </button>
                      <button
                        class="btn btn-sm btn-outline-secondary"
                        data-bs-toggle="modal"
                        data-bs-target="#teamSettingsModal"
                      >
                        <i class="fas fa-cog"></i>
                      </button>
                    </div>
                  </div>

                  <!-- Chat Messages -->
                  <div class="card-body chat-messages" id="chatMessages">
                    <!-- Welcome Message -->
                    <div class="text-center text-muted my-4">
                      <i class="fas fa-comments fa-2x mb-2"></i>
                      <p>Welcome to Development Team chat!</p>
                      <small
                        >Start a conversation with your team members.</small
                      >
                    </div>

                    <!-- Sample Messages -->
                    <div class="message-item mb-3" data-message-id="1">
                      <div class="d-flex">
                        <img
                          src="https://via.placeholder.com/40x40"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div class="flex-grow-1">
                          <div class="d-flex align-items-center mb-1">
                            <strong class="me-2">John Doe</strong>
                            <small class="text-muted">2 minutes ago</small>
                          </div>
                          <div class="message-content">
                            <p class="mb-1">
                              Hey team! I've just finished implementing the user
                              authentication system. Ready for review!
                            </p>
                          </div>
                          <div class="message-actions">
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="reactToMessage(1, 'üëç')"
                            >
                              üëç
                            </button>
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="reactToMessage(1, 'üëè')"
                            >
                              üëè
                            </button>
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="replyToMessage(1)"
                            >
                              Reply
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="message-item mb-3" data-message-id="2">
                      <div class="d-flex">
                        <img
                          src="https://via.placeholder.com/40x40"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div class="flex-grow-1">
                          <div class="d-flex align-items-center mb-1">
                            <strong class="me-2">Jane Smith</strong>
                            <small class="text-muted">1 minute ago</small>
                          </div>
                          <div class="message-content">
                            <p class="mb-1">
                              Great work, John! I'll review it this afternoon.
                              Any specific areas you'd like me to focus on?
                            </p>
                          </div>
                          <div class="message-actions">
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="reactToMessage(2, 'üëç')"
                            >
                              üëç
                            </button>
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="replyToMessage(2)"
                            >
                              Reply
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="message-item mb-3" data-message-id="3">
                      <div class="d-flex">
                        <img
                          src="https://via.placeholder.com/40x40"
                          class="rounded-circle me-2"
                          alt="User Avatar"
                        />
                        <div class="flex-grow-1">
                          <div class="d-flex align-items-center mb-1">
                            <strong class="me-2">Bob Johnson</strong>
                            <small class="text-muted">Just now</small>
                          </div>
                          <div class="message-content">
                            <p class="mb-1">
                              Perfect timing! I'm wrapping up the UI components,
                              so we can integrate everything together.
                            </p>
                          </div>
                          <div class="message-actions">
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="reactToMessage(3, 'üéâ')"
                            >
                              üéâ
                            </button>
                            <button
                              class="btn btn-sm btn-link p-0 me-2"
                              onclick="replyToMessage(3)"
                            >
                              Reply
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Typing Indicator -->
                  <div
                    class="card-footer"
                    id="typingIndicator"
                    style="display: none"
                  >
                    <small class="text-muted">
                      <i class="fas fa-pencil me-1"></i>
                      <span id="typingUsers">Someone</span> is typing...
                    </small>
                  </div>

                  <!-- Message Input -->
                  <div class="card-footer">
                    <form id="messageForm" class="d-flex">
                      <div class="flex-grow-1 me-2">
                        <div class="input-group">
                          <button
                            type="button"
                            class="btn btn-outline-secondary"
                            onclick="toggleEmojiPicker()"
                          >
                            <i class="fas fa-smile"></i>
                          </button>
                          <input
                            type="text"
                            class="form-control"
                            id="messageInput"
                            placeholder="Type your message..."
                            autocomplete="off"
                          />
                          <button
                            type="button"
                            class="btn btn-outline-secondary"
                            onclick="attachFile()"
                          >
                            <i class="fas fa-paperclip"></i>
                          </button>
                        </div>
                      </div>
                      <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i>
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Invite User Modal -->
          <div class="modal fade" id="inviteUserModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Invite User to Team</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <form>
                    <div class="mb-3">
                      <label for="inviteEmail" class="form-label"
                        >Email Address</label
                      >
                      <input
                        type="email"
                        class="form-control"
                        id="inviteEmail"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="inviteMessage" class="form-label"
                        >Personal Message (Optional)</label
                      >
                      <textarea
                        class="form-control"
                        id="inviteMessage"
                        rows="3"
                        placeholder="Add a personal message to your invitation..."
                      ></textarea>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button type="button" class="btn btn-primary">
                    Send Invitation
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Team Settings Modal -->
          <div class="modal fade" id="teamSettingsModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Team Settings</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <form>
                    <div class="mb-3">
                      <label for="teamName" class="form-label">Team Name</label>
                      <input
                        type="text"
                        class="form-control"
                        id="teamName"
                        value="Development Team"
                      />
                    </div>
                    <div class="mb-3">
                      <label for="teamDescription" class="form-label"
                        >Description</label
                      >
                      <textarea
                        class="form-control"
                        id="teamDescription"
                        rows="3"
                      >
Core development team for the main application</textarea
                      >
                    </div>
                    <div class="mb-3">
                      <div class="form-check">
                        <input
                          class="form-check-input"
                          type="checkbox"
                          id="teamPublic"
                          checked
                        />
                        <label class="form-check-label" for="teamPublic">
                          Make team public
                        </label>
                      </div>
                    </div>
                    <div class="mb-3">
                      <div class="form-check">
                        <input
                          class="form-check-input"
                          type="checkbox"
                          id="allowGuestMessages"
                        />
                        <label
                          class="form-check-label"
                          for="allowGuestMessages"
                        >
                          Allow guest messages
                        </label>
                      </div>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button type="button" class="btn btn-primary">
                    Save Changes
                  </button>
                </div>
              </div>
            </div>
          </div>

          <script>
            // Chat functionality
            let currentTeamId = 1;
            let typingTimeout;

            // Initialize chat
            document.addEventListener("DOMContentLoaded", function () {
              initializeChat();
              setupEventListeners();
            });

            function initializeChat() {
              // Set up Socket.IO connection for real-time chat
              if (typeof io !== "undefined") {
                const socket = io();

                socket.on("connect", () => {
                  console.log("Connected to chat server");
                  socket.emit("join team", { teamId: currentTeamId });
                });

                socket.on("new message", (data) => {
                  addMessage(data);
                });

                socket.on("user typing", (data) => {
                  showTypingIndicator(data.user, data.teamId);
                });

                socket.on("user stopped typing", (data) => {
                  hideTypingIndicator();
                });

                socket.on("user joined", (data) => {
                  addSystemMessage(`${data.user} joined the team`);
                });

                socket.on("user left", (data) => {
                  addSystemMessage(`${data.user} left the team`);
                });
              }
            }

            function setupEventListeners() {
              // Team switching
              document
                .querySelectorAll("[data-team-id]")
                .forEach((teamLink) => {
                  teamLink.addEventListener("click", function (e) {
                    e.preventDefault();
                    const teamId = this.getAttribute("data-team-id");
                    switchTeam(teamId);
                  });
                });

              // Message form submission
              document
                .getElementById("messageForm")
                .addEventListener("submit", function (e) {
                  e.preventDefault();
                  sendMessage();
                });

              // Typing indicator
              document
                .getElementById("messageInput")
                .addEventListener("input", function () {
                  handleTyping();
                });
            }

            function switchTeam(teamId) {
              currentTeamId = teamId;

              // Update active team in sidebar
              document.querySelectorAll("[data-team-id]").forEach((link) => {
                link.classList.remove("active");
              });
              document
                .querySelector(`[data-team-id="${teamId}"]`)
                .classList.add("active");

              // Update team name and status
              const teamNames = {
                1: { name: "Development Team", status: "5 members ‚Ä¢ 3 online" },
                2: { name: "Marketing Team", status: "4 members ‚Ä¢ 2 online" },
                3: { name: "Design Team", status: "3 members ‚Ä¢ 1 online" },
              };

              document.getElementById("currentTeamName").textContent =
                teamNames[teamId].name;
              document.getElementById("currentTeamStatus").textContent =
                teamNames[teamId].status;

              // Clear messages and load team messages
              clearMessages();
              loadTeamMessages(teamId);

              // Join team room via Socket.IO
              if (typeof io !== "undefined") {
                const socket = io();
                socket.emit("join team", { teamId: teamId });
              }
            }

            function sendMessage() {
              const messageInput = document.getElementById("messageInput");
              const message = messageInput.value.trim();

              if (!message) return;

              const messageData = {
                teamId: currentTeamId,
                content: message,
                timestamp: new Date(),
                userId: "current-user", // This would come from authentication
                userName: "Current User", // This would come from authentication
              };

              // Add message to chat
              addMessage(messageData);

              // Send via Socket.IO
              if (typeof io !== "undefined") {
                const socket = io();
                socket.emit("send message", messageData);
              }

              // Clear input
              messageInput.value = "";

              // Stop typing indicator
              hideTypingIndicator();
            }

            function addMessage(messageData) {
              const chatMessages = document.getElementById("chatMessages");
              const messageElement = document.createElement("div");
              messageElement.className = "message-item mb-3";
              messageElement.setAttribute("data-message-id", Date.now());

              const isCurrentUser = messageData.userId === "current-user";
              const alignClass = isCurrentUser ? "justify-content-end" : "";
              const bgClass = isCurrentUser
                ? "bg-primary text-white"
                : "bg-light";

              messageElement.innerHTML = `
        <div class="d-flex ${alignClass}">
            ${
              !isCurrentUser
                ? `<img src="https://via.placeholder.com/40x40" class="rounded-circle me-2" alt="User Avatar">`
                : ""
            }
            <div class="flex-grow-1 ${isCurrentUser ? "text-end" : ""}">
                <div class="d-flex align-items-center mb-1 ${
                  isCurrentUser ? "justify-content-end" : ""
                }">
                    <strong class="me-2">${messageData.userName}</strong>
                    <small class="text-muted">${formatTime(
                      messageData.timestamp
                    )}</small>
                </div>
                <div class="message-content">
                    <div class="p-2 rounded ${bgClass} d-inline-block">
                        <p class="mb-0">${messageData.content}</p>
                    </div>
                </div>
                <div class="message-actions mt-1">
                    <button class="btn btn-sm btn-link p-0 me-2" onclick="reactToMessage(${messageElement.getAttribute(
                      "data-message-id"
                    )}, 'üëç')">üëç</button>
                    <button class="btn btn-sm btn-link p-0 me-2" onclick="reactToMessage(${messageElement.getAttribute(
                      "data-message-id"
                    )}, '‚ù§Ô∏è')">‚ù§Ô∏è</button>
                    <button class="btn btn-sm btn-link p-0 me-2" onclick="replyToMessage(${messageElement.getAttribute(
                      "data-message-id"
                    )})">Reply</button>
                </div>
            </div>
            ${
              isCurrentUser
                ? `<img src="https://via.placeholder.com/40x40" class="rounded-circle ms-2" alt="User Avatar">`
                : ""
            }
        </div>
    `;

              chatMessages.appendChild(messageElement);
              scrollToBottom();
            }

            function addSystemMessage(content) {
              const chatMessages = document.getElementById("chatMessages");
              const messageElement = document.createElement("div");
              messageElement.className = "text-center text-muted my-2";
              messageElement.innerHTML = `<small><i class="fas fa-info-circle me-1"></i>${content}</small>`;

              chatMessages.appendChild(messageElement);
              scrollToBottom();
            }

            function handleTyping() {
              if (typeof io !== "undefined") {
                const socket = io();
                socket.emit("typing", {
                  teamId: currentTeamId,
                  user: "Current User",
                });

                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                  socket.emit("stop typing", {
                    teamId: currentTeamId,
                    user: "Current User",
                  });
                }, 1000);
              }
            }

            function showTypingIndicator(user, teamId) {
              if (teamId === currentTeamId) {
                document.getElementById("typingUsers").textContent = user;
                document.getElementById("typingIndicator").style.display =
                  "block";
              }
            }

            function hideTypingIndicator() {
              document.getElementById("typingIndicator").style.display = "none";
            }

            function clearMessages() {
              document.getElementById("chatMessages").innerHTML = `
        <div class="text-center text-muted my-4">
            <i class="fas fa-comments fa-2x mb-2"></i>
            <p>Loading team messages...</p>
        </div>
    `;
            }

            function loadTeamMessages(teamId) {
              // This would typically make an API call to load messages
              // For now, we'll just show a loading message
              setTimeout(() => {
                document.getElementById("chatMessages").innerHTML = `
            <div class="text-center text-muted my-4">
                <i class="fas fa-comments fa-2x mb-2"></i>
                <p>Welcome to the team chat!</p>
                <small>Start a conversation with your team members.</small>
            </div>
        `;
              }, 500);
            }

            function scrollToBottom() {
              const chatMessages = document.getElementById("chatMessages");
              chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function formatTime(timestamp) {
              const now = new Date();
              const messageTime = new Date(timestamp);
              const diffInMinutes = Math.floor(
                (now - messageTime) / (1000 * 60)
              );

              if (diffInMinutes < 1) return "Just now";
              if (diffInMinutes < 60) return `${diffInMinutes} min ago`;
              if (diffInMinutes < 1440)
                return `${Math.floor(diffInMinutes / 60)} hour${
                  Math.floor(diffInMinutes / 60) > 1 ? "s" : ""
                } ago`;
              return messageTime.toLocaleDateString();
            }

            function reactToMessage(messageId, reaction) {
              console.log(`Reacting to message ${messageId} with ${reaction}`);
              // Implementation for adding reactions
            }

            function replyToMessage(messageId) {
              console.log(`Replying to message ${messageId}`);
              // Implementation for replying to messages
            }

            function toggleEmojiPicker() {
              console.log("Toggle emoji picker");
              // Implementation for emoji picker
            }

            function attachFile() {
              console.log("Attach file");
              // Implementation for file attachment
            }
          </script>
        </div>
      </div>
    </main>

    <!-- Footer -->
    <%- include('partials/footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- Custom JS -->
    <script src="/public/js/main.js"></script>

    <%- include('partials/scripts') %>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Member Dashboard - CollabSpace</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />

    <style>
      :root {
        /* CollabSpace Brand Colors - Consistent with other pages */
        --color-primary: #1e40af;
        --color-primary-hover: #1e3a8a;
        --color-primary-light: #dbeafe;
        --color-primary-dark: #1e3a8a;
        --color-success: #10b981;
        --color-success-light: #d1fae5;
        --color-warning: #f59e0b;
        --color-warning-light: #fef3c7;
        --color-danger: #ef4444;
        --color-danger-light: #fee2e2;
        --color-info: #06b6d4;
        --color-info-light: #cffafe;

        /* Neutral Colors */
        --color-white: #ffffff;
        --color-gray-50: #f9fafb;
        --color-gray-100: #f3f4f6;
        --color-gray-200: #e5e7eb;
        --color-gray-300: #d1d5db;
        --color-gray-400: #9ca3af;
        --color-gray-500: #6b7280;
        --color-gray-600: #4b5563;
        --color-gray-700: #374151;
        --color-gray-800: #1f2937;
        --color-gray-900: #111827;

        /* Typography */
        --font-family-primary: "Inter", -apple-system, BlinkMacSystemFont,
          "Segoe UI", Roboto, sans-serif;
        --font-size-xs: 0.75rem;
        --font-size-sm: 0.875rem;
        --font-size-base: 1rem;
        --font-size-lg: 1.125rem;
        --font-size-xl: 1.25rem;
        --font-size-2xl: 1.5rem;
        --font-size-3xl: 1.875rem;
        --font-weight-normal: 400;
        --font-weight-medium: 500;
        --font-weight-semibold: 600;
        --font-weight-bold: 700;
        --line-height-normal: 1.5;
        --line-height-relaxed: 1.625;

        /* Spacing */
        --space-1: 0.25rem;
        --space-2: 0.5rem;
        --space-3: 0.75rem;
        --space-4: 1rem;
        --space-5: 1.25rem;
        --space-6: 1.5rem;
        --space-8: 2rem;
        --space-10: 2.5rem;
        --space-12: 3rem;
        --space-16: 4rem;

        /* Borders & Shadows */
        --radius-sm: 0.25rem;
        --radius-base: 0.375rem;
        --radius-lg: 0.5rem;
        --radius-xl: 0.75rem;
        --radius-2xl: 1rem;
        --radius-full: 9999px;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-base: 0 1px 3px 0 rgb(0 0 0 / 0.1),
          0 1px 2px 0 rgb(0 0 0 / 0.06);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1),
          0 2px 4px -1px rgb(0 0 0 / 0.06);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1),
          0 4px 6px -2px rgb(0 0 0 / 0.05);
        --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1),
          0 10px 10px -5px rgb(0 0 0 / 0.04);

        /* Transitions */
        --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
        --transition-base: 200ms cubic-bezier(0.4, 0, 0.2, 1);
        --transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);

        /* Gradients */
        --primary-gradient: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
        --success-gradient: linear-gradient(135deg, #10b981 0%, #34d399 100%);
        --danger-gradient: linear-gradient(135deg, #ef4444 0%, #f87171 100%);
        --warning-gradient: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: var(--font-family-primary);
        font-size: var(--font-size-base);
        line-height: var(--line-height-normal);
        color: var(--color-gray-900);
        background: var(--color-gray-50);
        min-height: 100vh;
        overflow-x: hidden;
      }

      .dashboard-container {
        display: flex;
        min-height: 100vh;
        position: relative;
      }

      /* Sidebar Styles */
      .sidebar {
        width: 280px;
        background: var(--color-white);
        border-right: 1px solid var(--color-gray-200);
        padding: 0;
        position: fixed;
        left: 0;
        top: 0;
        height: 100vh;
        z-index: 1000;
        box-shadow: var(--shadow-sm);
      }

      .sidebar-header {
        padding: var(--space-8) var(--space-6);
        border-bottom: 1px solid var(--color-gray-200);
        background: var(--color-white);
      }

      .brand-section {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: var(--space-6);
        gap: var(--space-3);
      }

      .brand-icon {
        width: 40px;
        height: 40px;
        background: var(--color-primary);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-white);
        font-size: 18px;
        box-shadow: var(--shadow-base);
      }

      .brand-name {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--color-primary);
        margin: 0;
      }

      .user-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--space-2);
      }

      .user-avatar {
        width: 64px;
        height: 64px;
        border-radius: var(--radius-full);
        background: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        margin-bottom: var(--space-4);
        border: 3px solid var(--color-primary-light);
        color: var(--color-white);
      }

      .user-info h3 {
        font-size: var(--font-size-xl);
        font-weight: var(--font-weight-semibold);
        margin-bottom: var(--space-1);
        color: var(--color-gray-900);
      }

      .user-role {
        background: var(--color-primary-light);
        color: var(--color-primary);
        padding: var(--space-1) var(--space-3);
        border-radius: var(--radius-full);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        display: inline-block;
      }

      .nav-menu {
        list-style: none;
        padding: var(--space-4) 0;
      }

      .nav-item {
        margin-bottom: var(--space-1);
      }

      .nav-link {
        display: flex;
        align-items: center;
        padding: var(--space-3) var(--space-6);
        color: var(--color-gray-600);
        text-decoration: none;
        font-weight: var(--font-weight-medium);
        font-size: var(--font-size-base);
        position: relative;
        transition: all var(--transition-fast);
        cursor: pointer;
        border-radius: 0 var(--radius-2xl) var(--radius-2xl) 0;
        margin-right: var(--space-4);
      }

      .nav-link::before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--color-primary);
        transform: scaleY(0);
        transition: transform var(--transition-fast);
        border-radius: 0 var(--radius-sm) var(--radius-sm) 0;
      }

      .nav-link:hover::before,
      .nav-link.active::before {
        transform: scaleY(1);
      }

      .nav-link:hover,
      .nav-link.active {
        color: var(--color-primary);
        background: var(--color-primary-light);
      }

      .nav-link:hover {
        transform: translateX(var(--space-1));
      }

      .nav-link.active {
        color: var(--color-primary);
        background: var(--color-primary-light);
        font-weight: var(--font-weight-semibold);
        transform: translateX(var(--space-2));
      }

      .nav-link.active i {
        color: var(--color-primary);
      }

      .nav-link i {
        margin-right: var(--space-4);
        font-size: 18px;
        width: 20px;
        transition: all var(--transition-fast);
      }

      .nav-link:hover i {
        transform: scale(1.1);
      }

      /* Main Content */
      .main-content {
        flex: 1;
        margin-left: 280px;
        padding: var(--space-8);
        background: var(--color-gray-50);
        min-height: 100vh;
        position: relative;
      }

      /* Dashboard Header */
      .dashboard-header {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-5);
        margin-bottom: var(--space-6);
        border: 1px solid var(--color-gray-200);
        box-shadow: var(--shadow-sm);
      }

      .header-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: var(--space-4);
      }

      .dashboard-title {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-1);
      }

      .dashboard-subtitle {
        font-size: var(--font-size-md);
        color: var(--color-gray-600);
        margin: 0;
      }

      .header-actions {
        display: flex;
        gap: var(--space-4);
      }

      /* Content Sections */
      .content-section {
        display: none;
      }

      .content-section.active {
        display: block;
      }

      /* Stats Grid */
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--space-6);
        margin-bottom: var(--space-8);
      }

      .stat-card {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        border: 1px solid var(--color-gray-200);
        transition: all var(--transition-base);
        box-shadow: var(--shadow-sm);
      }

      .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
      }

      .stat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-5);
      }

      .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        color: var(--color-white);
      }

      .stat-icon.tasks {
        background: var(--color-primary);
      }

      .stat-icon.completed {
        background: var(--color-success);
      }

      .stat-icon.teams {
        background: var(--color-info);
      }

      .stat-icon.messages {
        background: var(--color-warning);
      }

      .stat-value {
        font-size: var(--font-size-3xl);
        font-weight: var(--font-weight-bold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-2);
      }

      .stat-label {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        font-weight: var(--font-weight-medium);
      }

      /* Buttons */
      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-3) var(--space-6);
        border: none;
        border-radius: var(--radius-lg);
        font-weight: var(--font-weight-medium);
        font-size: var(--font-size-base);
        text-decoration: none;
        cursor: pointer;
        transition: all var(--transition-fast);
        gap: var(--space-2);
        line-height: 1;
      }

      .btn-primary {
        background: var(--color-primary);
        color: var(--color-white);
      }

      .btn-primary:hover {
        background: var(--color-primary-hover);
        transform: translateY(-1px);
        box-shadow: var(--shadow-md);
      }

      .btn-secondary {
        background: var(--color-gray-100);
        color: var(--color-gray-700);
        border: 1px solid var(--color-gray-200);
      }

      .btn-secondary:hover {
        background: var(--color-gray-200);
        color: var(--color-gray-800);
      }

      .btn-accent {
        background: var(--color-info);
        color: var(--color-white);
      }

      .btn-accent:hover {
        background: var(--color-info);
        transform: translateY(-1px);
        box-shadow: var(--shadow-md);
      }

      .btn i {
        margin-right: 8px;
      }

      /* Loading States */
      .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 2px solid var(--color-gray-200);
        border-radius: 50%;
        border-top-color: var(--color-primary);
        animation: spin 1s ease-in-out infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Quick Actions */
      .quick-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--space-5);
        margin-top: var(--space-8);
      }

      .quick-action {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-6);
        border: 1px solid var(--color-gray-200);
        text-align: center;
        cursor: pointer;
        transition: all var(--transition-base);
        box-shadow: var(--shadow-sm);
      }

      .quick-action:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
      }

      .quick-action i {
        font-size: 32px;
        color: var(--color-primary);
        margin-bottom: var(--space-4);
      }

      .quick-action h3 {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-2);
      }

      .quick-action p {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        margin: 0;
      }

      /* Invitations and Teams */
      .section-subtitle {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-6);
      }

      .teams-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: var(--space-4);
        margin-top: var(--space-4);
      }

      .team-card {
        background: var(--color-white);
        border: 1px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
        transition: all 0.2s ease;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      .team-card:hover {
        border-color: var(--color-primary);
        box-shadow: 0 4px 12px rgba(30, 64, 175, 0.1);
      }

      .team-header {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        margin-bottom: var(--space-3);
      }

      .team-icon {
        width: 40px;
        height: 40px;
        background: var(--color-primary-light);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-primary);
        font-size: 1.2rem;
      }

      .team-info {
        flex: 1;
      }

      .team-info h4 {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0 0 var(--space-1) 0;
      }

      .team-meta {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
      }

      .team-description {
        color: var(--color-gray-700);
        font-size: var(--font-size-sm);
        margin-bottom: var(--space-4);
        flex: 1;
      }

      .team-card .btn {
        margin-top: auto;
        width: 100%;
        justify-self: flex-end;
      }

      .team-no-admin {
        opacity: 0.6;
        cursor: not-allowed !important;
      }

      .team-no-admin:hover {
        border-color: var(--color-gray-200) !important;
        box-shadow: none !important;
      }

      /* Universal Modal System */
      .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(4px);
      }

      .modal.show {
        display: flex;
      }

      .modal-content {
        background: white;
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        max-width: 480px;
        width: 90%;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
          0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: scale(0.95);
        transition: transform 0.2s ease;
      }

      .modal.show .modal-content {
        transform: scale(1);
      }

      .modal-header {
        margin-bottom: var(--space-6);
        text-align: center;
      }

      .modal-header .modal-icon {
        width: 64px;
        height: 64px;
        margin: 0 auto var(--space-4) auto;
        border-radius: var(--radius-full);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
      }

      .modal-header .modal-icon.warning {
        background: var(--color-warning-light);
        color: var(--color-warning);
      }

      .modal-header .modal-icon.info {
        background: var(--color-primary-light);
        color: var(--color-primary);
      }

      .modal-header .modal-icon.danger {
        background: var(--color-danger-light);
        color: var(--color-danger);
      }

      .modal-header h3 {
        font-size: var(--font-size-xl);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0 0 var(--space-2) 0;
      }

      .modal-header p {
        color: var(--color-gray-600);
        margin: 0;
      }

      .modal-input {
        width: 100%;
        min-height: 120px;
        padding: var(--space-4);
        border: 2px solid var(--color-gray-200);
        border-radius: var(--radius-xl);
        font-family: inherit;
        font-size: var(--font-size-base);
        line-height: 1.6;
        resize: vertical;
        transition: all 0.3s ease;
        margin-bottom: var(--space-6);
        background: var(--color-gray-50);
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
      }

      .modal-input:focus {
        outline: none;
        border-color: var(--color-primary);
        background: var(--color-white);
        box-shadow: 0 0 0 4px rgba(30, 64, 175, 0.1),
          inset 0 1px 3px rgba(0, 0, 0, 0.05);
        transform: translateY(-1px);
      }

      .modal-input::placeholder {
        color: var(--color-gray-400);
        font-style: italic;
      }

      .modal-input:hover:not(:focus) {
        border-color: var(--color-gray-300);
        background: var(--color-white);
      }

      .modal-actions {
        display: flex;
        gap: var(--space-3);
        justify-content: flex-end;
      }

      .modal-actions.center {
        justify-content: center;
      }

      .btn-danger {
        background: var(--danger-gradient);
        color: white;
        border: none;
      }

      .btn-danger:hover {
        background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
        transform: translateY(-1px);
      }

      .modal-actions .btn {
        min-width: 100px;
      }

      /* Legacy modal classes for backward compatibility */
      .message-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(4px);
      }

      .message-modal.show {
        display: flex;
      }

      .message-modal-content {
        background: white;
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        max-width: 480px;
        width: 90%;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
          0 10px 10px -5px rgba(0, 0, 0, 0.04);
        transform: scale(0.95);
        transition: transform 0.2s ease;
      }

      .message-modal.show .message-modal-content {
        transform: scale(1);
      }

      .message-modal-header {
        margin-bottom: var(--space-6);
      }

      .message-modal-header h3 {
        font-size: var(--font-size-xl);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0 0 var(--space-2) 0;
      }

      .message-modal-header p {
        color: var(--color-gray-600);
        margin: 0;
      }

      .message-modal-actions {
        display: flex;
        gap: var(--space-3);
        justify-content: flex-end;
      }

      .message-modal-actions .btn {
        min-width: 100px;
      }

      /* Enhanced Message Input */
      .message-input {
        width: 100%;
        min-height: 120px;
        padding: var(--space-4);
        border: 2px solid var(--color-gray-200);
        border-radius: var(--radius-xl);
        font-family: inherit;
        font-size: var(--font-size-base);
        line-height: 1.6;
        resize: vertical;
        transition: all 0.3s ease;
        margin-bottom: var(--space-6);
        background: var(--color-gray-50);
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
      }

      .message-input:focus {
        outline: none;
        border-color: var(--color-primary);
        background: var(--color-white);
        box-shadow: 0 0 0 4px rgba(30, 64, 175, 0.1),
          inset 0 1px 3px rgba(0, 0, 0, 0.05);
        transform: translateY(-1px);
      }

      .message-input::placeholder {
        color: var(--color-gray-400);
        font-style: italic;
      }

      .message-input:hover:not(:focus) {
        border-color: var(--color-gray-300);
        background: var(--color-white);
      }

      /* Profile Section Styling */
      .profile-section {
        max-width: 800px;
        margin: 0 auto;
      }

      .profile-header {
        display: flex;
        align-items: center;
        gap: var(--space-6);
        margin-bottom: var(--space-8);
        padding: var(--space-6);
        background: var(--color-white);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--color-gray-200);
      }

      .profile-avatar {
        width: 96px;
        height: 96px;
        border-radius: var(--radius-full);
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.25rem;
        font-weight: var(--font-weight-bold);
        color: var(--color-white);
        box-shadow: var(--shadow-lg);
        cursor: pointer;
        transition: transform 0.2s ease;
      }

      .profile-avatar:hover {
        transform: scale(1.05);
      }

      .profile-info {
        flex: 1;
      }

      .profile-info h3 {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-2);
      }

      .profile-email {
        color: var(--color-gray-600);
        font-size: var(--font-size-base);
        margin-bottom: var(--space-1);
      }

      .profile-username {
        color: var(--color-primary);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
      }

      .profile-form {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--color-gray-200);
      }

      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-4);
      }

      .form-group {
        margin-bottom: var(--space-5);
      }

      .form-group label {
        display: block;
        color: var(--color-gray-700);
        font-weight: var(--font-weight-semibold);
        margin-bottom: var(--space-2);
        font-size: var(--font-size-sm);
      }

      .form-group input,
      .form-group textarea {
        width: 100%;
        padding: var(--space-3) var(--space-4);
        border: 2px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        background: var(--color-gray-50);
        color: var(--color-gray-900);
        font-size: var(--font-size-base);
        transition: all 0.3s ease;
        font-family: inherit;
      }

      .form-group input:focus,
      .form-group textarea:focus {
        outline: none;
        border-color: var(--color-primary);
        background: var(--color-white);
        box-shadow: 0 0 0 4px rgba(30, 64, 175, 0.1);
        transform: translateY(-1px);
      }

      .form-group input:hover:not(:focus),
      .form-group textarea:hover:not(:focus) {
        border-color: var(--color-gray-300);
        background: var(--color-white);
      }

      .form-group input::placeholder,
      .form-group textarea::placeholder {
        color: var(--color-gray-400);
        font-style: italic;
      }

      .form-group textarea {
        resize: vertical;
        min-height: 100px;
        line-height: 1.6;
      }

      .form-actions {
        text-align: right;
        margin-top: var(--space-6);
        padding-top: var(--space-6);
        border-top: 1px solid var(--color-gray-200);
      }

      /* Settings Section Styling */
      .settings-section {
        max-width: 800px;
        margin: 0 auto;
      }

      .settings-group {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-6);
        margin-bottom: var(--space-6);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--color-gray-200);
      }

      .settings-group h4 {
        color: var(--color-gray-900);
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        margin-bottom: var(--space-4);
        padding-bottom: var(--space-3);
        border-bottom: 1px solid var(--color-gray-200);
        display: flex;
        align-items: center;
        gap: var(--space-2);
      }

      .settings-group h4 i {
        color: var(--color-primary);
      }

      .setting-item {
        margin-bottom: var(--space-4);
        padding: var(--space-3);
        border-radius: var(--radius-lg);
        transition: background-color 0.2s ease;
      }

      .setting-item:hover {
        background: var(--color-gray-50);
      }

      .setting-label {
        display: flex;
        align-items: center;
        color: var(--color-gray-700);
        font-size: var(--font-size-base);
        cursor: pointer;
        transition: color 0.3s ease;
        user-select: none;
      }

      .setting-label:hover {
        color: var(--color-gray-900);
      }

      .setting-description {
        font-size: var(--font-size-sm);
        color: var(--color-gray-500);
        margin-top: var(--space-1);
        margin-left: 44px;
      }

      .setting-label input[type="checkbox"] {
        position: absolute;
        opacity: 0;
        cursor: pointer;
      }

      .toggle-switch {
        position: relative;
        width: 44px;
        height: 24px;
        background: var(--color-gray-300);
        border-radius: 24px;
        margin-right: var(--space-3);
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .toggle-switch::after {
        content: "";
        position: absolute;
        top: 2px;
        left: 2px;
        width: 20px;
        height: 20px;
        background: var(--color-white);
        border-radius: 50%;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .setting-label input[type="checkbox"]:checked + .toggle-switch {
        background: var(--color-primary);
      }

      .setting-label input[type="checkbox"]:checked + .toggle-switch::after {
        transform: translateX(20px);
      }

      .setting-actions {
        display: flex;
        gap: var(--space-3);
        flex-wrap: wrap;
      }

      .setting-actions .btn {
        display: flex;
        align-items: center;
        gap: var(--space-2);
      }

      /* Responsive design for profile and settings */
      @media (max-width: 768px) {
        .form-row {
          grid-template-columns: 1fr;
        }

        .profile-header {
          flex-direction: column;
          text-align: center;
        }

        .setting-actions {
          flex-direction: column;
        }

        .setting-actions .btn {
          justify-content: center;
        }
      }

      /* Tabs Styling */
      .requests-tabs {
        display: flex;
        border-bottom: 1px solid var(--color-gray-200);
        margin-bottom: var(--space-6);
      }

      .tab-btn {
        background: none;
        border: none;
        padding: var(--space-3) var(--space-4);
        display: flex;
        align-items: center;
        gap: var(--space-2);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        color: var(--color-gray-600);
        cursor: pointer;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
      }

      .tab-btn:hover {
        color: var(--color-primary);
        background: var(--color-gray-50);
      }

      .tab-btn.active {
        color: var(--color-primary);
        border-bottom-color: var(--color-primary);
      }

      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }

      .requests-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--space-4);
      }

      .header-content {
        flex: 1;
      }

      .requests-header h3 {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0;
      }

      .requests-header p {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        margin: var(--space-1) 0 0 0;
      }

      .pending-request-card {
        background: var(--color-white);
        border: 1px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        margin-bottom: var(--space-3);
        transition: all 0.2s ease;
      }

      .pending-request-card:hover {
        border-color: var(--color-primary-light);
        box-shadow: 0 2px 8px rgba(30, 64, 175, 0.1);
      }

      .request-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-2);
      }

      .request-team-name {
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
      }

      .request-status {
        padding: var(--space-1) var(--space-2);
        border-radius: var(--radius-full);
        font-size: var(--font-size-xs);
        font-weight: var(--font-weight-medium);
        background: var(--color-warning-light);
        color: var(--color-warning-dark);
      }

      .request-details {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
      }

      .teams-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--space-4);
        margin-top: var(--space-4);
      }

      .team-header {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        margin-bottom: var(--space-4);
      }

      .team-icon {
        width: 40px;
        height: 40px;
        background: var(--color-primary-light);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-primary);
      }

      .team-info h4 {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0;
      }

      .team-meta {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        margin: var(--space-1) 0 0 0;
      }

      .team-description {
        color: var(--color-gray-700);
        font-size: var(--font-size-sm);
        line-height: 1.5;
        margin-bottom: var(--space-4);
      }

      .invitation-card {
        background: var(--color-primary-light);
        border: 1px solid var(--color-primary);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        margin-bottom: var(--space-3);
      }

      .invitation-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: var(--space-3);
      }

      .invitation-info h4 {
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0;
      }

      .invitation-from {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        margin: var(--space-1) 0 0 0;
      }

      .invitation-actions {
        display: flex;
        gap: var(--space-2);
      }

      .btn-accept {
        background: var(--color-success);
        color: white;
        border: none;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-md);
        font-size: var(--font-size-sm);
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .btn-accept:hover {
        background: #059669;
      }

      .btn-reject {
        background: var(--color-danger);
        color: white;
        border: none;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-md);
        font-size: var(--font-size-sm);
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .btn-reject:hover {
        background: #dc2626;
      }

      /* Section Content */
      .section-content {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        border: 1px solid var(--color-gray-200);
        box-shadow: var(--shadow-sm);
      }

      .section-title {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--color-gray-900);
        margin-bottom: var(--space-6);
        display: flex;
        align-items: center;
      }

      .section-title i {
        margin-right: var(--space-3);
        color: var(--color-primary);
      }

      /* Empty State */
      .empty-state {
        text-align: center;
        padding: var(--space-12) var(--space-8);
        color: var(--color-gray-500);
      }

      .empty-state i {
        font-size: 48px;
        color: var(--color-gray-300);
        margin-bottom: var(--space-6);
        display: block;
      }

      .empty-state h3 {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-700);
        margin-bottom: var(--space-2);
      }

      .empty-state p {
        font-size: var(--font-size-base);
        margin: 0;
      }

      /* Responsive Design */
      @media (max-width: 1024px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .sidebar.open {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
          padding: var(--space-6);
        }

        .stats-grid {
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: var(--space-4);
        }
      }

      @media (max-width: 768px) {
        .main-content {
          padding: var(--space-4);
        }

        .dashboard-header {
          padding: var(--space-6);
        }

        .dashboard-title {
          font-size: var(--font-size-2xl);
        }

        .stats-grid {
          grid-template-columns: 1fr;
          gap: var(--space-4);
        }

        .quick-actions {
          grid-template-columns: 1fr;
          gap: var(--space-4);
        }

        .header-top {
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-4);
        }
      }

      /* Animation Classes */
      .fade-in {
        animation: fadeIn 0.3s ease-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .slide-in-left {
        animation: slideInLeft 0.3s ease-out;
      }

      @keyframes slideInLeft {
        from {
          opacity: 0;
          transform: translateX(-20px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      /* Notification Badge */
      .notification-badge {
        position: absolute;
        top: -4px;
        right: -4px;
        background: var(--color-danger);
        color: var(--color-white);
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 11px;
        font-weight: var(--font-weight-semibold);
        display: flex;
        align-items: center;
        justify-content: center;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      /* Additional Content Styles */
      .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: var(--space-6);
        margin-bottom: var(--space-8);
      }

      .content-card {
        background: var(--color-white);
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        border: 1px solid var(--color-gray-200);
        transition: all var(--transition-base);
        box-shadow: var(--shadow-sm);
      }

      .content-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-6);
        padding-bottom: var(--space-4);
        border-bottom: 1px solid var(--color-gray-200);
      }

      .card-title {
        font-size: var(--font-size-xl);
        font-weight: var(--font-weight-semibold);
        color: var(--color-gray-900);
        margin: 0;
      }

      .card-action {
        background: var(--color-primary);
        color: var(--color-white);
        border: none;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-lg);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        cursor: pointer;
        transition: all var(--transition-fast);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: var(--space-2);
      }

      .card-action:hover {
        background: var(--color-primary-hover);
        transform: translateY(-1px);
      }

      /* List Styles */
      .list-container {
        max-height: 320px;
        overflow-y: auto;
        margin: 0;
      }

      .list-container::-webkit-scrollbar {
        width: 6px;
      }

      .list-container::-webkit-scrollbar-track {
        background: var(--color-gray-100);
        border-radius: var(--radius-sm);
      }

      .list-container::-webkit-scrollbar-thumb {
        background: var(--color-gray-300);
        border-radius: var(--radius-sm);
      }

      .list-container::-webkit-scrollbar-thumb:hover {
        background: var(--color-gray-400);
      }

      .list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-4);
        border-bottom: 1px solid var(--color-gray-100);
        transition: all var(--transition-fast);
      }

      .list-item:last-child {
        border-bottom: none;
      }

      .list-item:hover {
        background: var(--color-gray-50);
      }

      .item-info {
        flex: 1;
      }

      .item-title {
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-medium);
        color: var(--color-gray-900);
        margin-bottom: var(--space-1);
      }

      .item-meta {
        font-size: var(--font-size-sm);
        color: var(--color-gray-600);
        display: flex;
        align-items: center;
        gap: var(--space-3);
      }

      .item-meta i {
        opacity: 0.7;
      }

      .item-status {
        padding: var(--space-1) var(--space-3);
        border-radius: var(--radius-full);
        font-size: var(--font-size-xs);
        font-weight: var(--font-weight-medium);
        text-transform: uppercase;
        letter-spacing: 0.025em;
      }

      .status-pending {
        background: var(--color-warning-light);
        color: var(--color-warning);
      }

      .status-completed {
        background: var(--color-success-light);
        color: var(--color-success);
      }

      .status-in-progress {
        background: var(--color-info-light);
        color: var(--color-info);
      }

      .status-high {
        background: var(--color-danger-light);
        color: var(--color-danger);
      }

      .status-medium {
        background: var(--color-warning-light);
        color: var(--color-warning);
      }

      .status-low {
        background: var(--color-success-light);
        color: var(--color-success);
      }

      /* Progress Bars */
      .progress-container {
        margin-top: var(--space-4);
      }

      .progress-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: var(--space-2);
      }

      .progress-label {
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        color: var(--color-gray-700);
      }

      .progress-value {
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-semibold);
        color: var(--color-primary);
      }

      .progress-bar {
        width: 100%;
        height: 8px;
        background: var(--color-gray-200);
        border-radius: var(--radius-full);
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        background: var(--color-primary);
        border-radius: var(--radius-full);
        transition: width var(--transition-base);
      }

      /* Mobile Menu Toggle */
      .mobile-menu-toggle {
        display: none;
        background: var(--color-white);
        border: 1px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        padding: var(--space-3);
        cursor: pointer;
        color: var(--color-gray-700);
        box-shadow: var(--shadow-sm);
      }

      @media (max-width: 1024px) {
        .mobile-menu-toggle {
          display: block;
          position: fixed;
          top: var(--space-4);
          left: var(--space-4);
          z-index: 1001;
        }
      }

      /* Focus States */
      .btn:focus,
      .nav-link:focus,
      .card-action:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
      }

      /* Alert Styling */
      .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 16px;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .alert-warning {
        background-color: #fef3c7;
        border: 1px solid #f59e0b;
        color: #92400e;
      }

      .alert i {
        font-size: 16px;
      }

      /* Checkbox Label Styling */
      .checkbox-label {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
        cursor: pointer;
        padding: 8px 0;
      }

      .checkbox-label input[type="checkbox"] {
        margin: 0;
        width: 16px;
        height: 16px;
      }

      /* Button Danger Styling */
      .btn-danger {
        background-color: #dc2626;
        color: white;
        border: 1px solid #dc2626;
      }

      .btn-danger:hover {
        background-color: #b91c1c;
        border-color: #b91c1c;
      }

      /* Chat Section Styles */
      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 1px solid var(--color-gray-200);
      }

      .chat-controls {
        display: flex;
        align-items: center;
      }

      .online-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: var(--color-gray-600);
        background: var(--color-gray-100);
        padding: 6px 12px;
        border-radius: 20px;
        border: 1px solid var(--color-gray-200);
      }

      .online-indicator::before {
        content: "";
        width: 8px;
        height: 8px;
        background: var(--color-success);
        border-radius: 50%;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }

      .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: var(--shadow-lg);
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 24px;
        display: flex;
        flex-direction: column;
        gap: 16px;
        background: #fafafa;
        scroll-behavior: smooth;
      }

      .chat-messages::-webkit-scrollbar {
        width: 6px;
      }

      .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }

      .chat-messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
      }

      .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
      }

      .chat-welcome {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: var(--color-gray-500);
      }

      .welcome-icon {
        width: 80px;
        height: 80px;
        background: var(--primary-gradient);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 24px;
        box-shadow: var(--shadow-lg);
      }

      .welcome-icon i {
        font-size: 32px;
        color: white;
      }

      .chat-welcome h3 {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 8px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .chat-welcome p {
        margin: 0;
        font-size: 16px;
        color: var(--color-gray-600);
      }

      .chat-message {
        margin-bottom: 16px;
        padding: 12px 16px;
        border-radius: 18px;
        max-width: 70%;
        word-wrap: break-word;
        position: relative;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .chat-message:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      }

      .chat-message.own-message {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin-left: auto;
        text-align: right;
        border-bottom-right-radius: 4px;
      }

      .chat-message.own-message::before {
        content: "";
        position: absolute;
        bottom: 0;
        right: -8px;
        width: 0;
        height: 0;
        border: 8px solid transparent;
        border-left-color: #764ba2;
        border-bottom: none;
        border-right: none;
      }

      .chat-message.other-message {
        background: #f1f3f4;
        color: #202124;
        margin-right: auto;
        border-bottom-left-radius: 4px;
        border: 1px solid #e8eaed;
      }

      .chat-message.other-message::before {
        content: "";
        position: absolute;
        bottom: 0;
        left: -8px;
        width: 0;
        height: 0;
        border: 8px solid transparent;
        border-right-color: #f1f3f4;
        border-bottom: none;
        border-left: none;
      }

      .message-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 4px;
        font-size: 12px;
        opacity: 0.9;
      }

      .chat-message.own-message .message-header {
        color: rgba(255, 255, 255, 0.9);
      }

      .chat-message.other-message .message-header {
        color: rgba(32, 33, 36, 0.7);
      }

      .sender-name {
        font-weight: 600;
      }

      .message-content {
        line-height: 1.4;
        font-size: 14px;
      }

      .chat-message.own-message .message-content {
        color: white;
      }

      .chat-message.other-message .message-content {
        color: #202124;
      }

      .system-message {
        text-align: center;
        padding: 8px;
        color: var(--text-secondary);
        font-size: 12px;
        font-style: italic;
      }

      .chat-input-container {
        border-top: 1px solid var(--color-gray-200);
        padding: 20px 24px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
      }

      .chat-input-wrapper {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 12px;
      }

      .chat-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid var(--color-gray-200);
        border-radius: 25px;
        font-size: 14px;
        background: white;
        transition: all 0.2s ease;
        outline: none;
      }

      .chat-input:focus {
        border-color: var(--color-primary);
        box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
      }

      .chat-input:disabled {
        background: var(--color-gray-100);
        color: var(--color-gray-400);
        cursor: not-allowed;
      }

      .send-button {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: var(--primary-gradient);
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-md);
      }

      .send-button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      .send-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
      }

      .chat-actions {
        display: flex;
        gap: 8px;
        justify-content: center;
        position: relative;
      }

      .chat-action-btn {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: var(--color-gray-100);
        border: none;
        color: var(--color-gray-600);
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .chat-action-btn:hover {
        background: var(--color-gray-200);
        color: var(--color-primary);
      }

      /* Typing Indicator */
      .typing-indicator {
        padding: 16px 24px;
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(var(--color-primary-rgb), 0.05);
        border-top: 1px solid var(--color-gray-200);
        font-size: 14px;
        color: var(--color-gray-600);
        font-style: italic;
      }

      .typing-dots {
        display: flex;
        gap: 4px;
      }

      .typing-dots span {
        width: 8px;
        height: 8px;
        background: var(--color-primary);
        border-radius: 50%;
        animation: typing 1.4s infinite ease-in-out;
      }

      .typing-dots span:nth-child(1) {
        animation-delay: 0s;
      }

      .typing-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }

      .typing-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }

      @keyframes typing {
        0%,
        80%,
        100% {
          transform: scale(0.8);
          opacity: 0.5;
        }
        40% {
          transform: scale(1);
          opacity: 1;
        }
      }

      /* Emoji Picker Styles */
      .emoji-picker {
        position: absolute;
        bottom: 70px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        border: 1px solid var(--color-gray-200);
        border-radius: 12px;
        box-shadow: var(--shadow-lg);
        z-index: 1000;
        width: 320px;
        max-height: 200px;
        overflow-y: auto;
      }

      .emoji-grid {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        gap: 4px;
        padding: 12px;
      }

      .emoji-item {
        font-size: 20px;
        padding: 8px;
        text-align: center;
        cursor: pointer;
        border-radius: 6px;
        transition: background-color 0.2s ease;
      }

      .emoji-item:hover {
        background: var(--color-gray-100);
      }

      /* File Preview Styles */
      .file-preview-container {
        background: white;
        border: 1px solid var(--color-gray-200);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 12px;
        box-shadow: var(--shadow-sm);
      }

      .file-preview-content {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .file-preview {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--color-gray-50);
        border-radius: 8px;
      }

      .file-preview i {
        font-size: 24px;
        color: var(--color-primary);
      }

      .file-size {
        font-size: 12px;
        color: var(--color-gray-500);
        margin-left: 8px;
      }

      .file-caption-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--color-gray-200);
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.2s ease;
      }

      .file-caption-input:focus {
        border-color: var(--color-primary);
      }

      .file-preview-buttons {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
      }

      .btn-cancel,
      .btn-send {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .btn-cancel {
        background: var(--color-gray-200);
        color: var(--color-gray-700);
      }

      .btn-cancel:hover {
        background: var(--color-gray-300);
      }

      .btn-send {
        background: var(--color-primary);
        color: white;
      }

      .btn-send:hover {
        background: var(--color-primary-hover);
      }

      /* File Attachment Styles */
      .file-attachment {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--color-gray-50);
        border: 1px solid var(--color-gray-200);
        border-radius: 8px;
        margin: 8px 0;
        max-width: 300px;
      }

      .file-attachment.image-attachment {
        flex-direction: column;
        align-items: flex-start;
        background: transparent;
        border: none;
        padding: 0;
        max-width: 300px;
      }

      .file-attachment.image-attachment img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease;
      }

      .file-attachment.image-attachment img:hover {
        transform: scale(1.02);
      }

      .file-attachment.image-attachment .file-info {
        margin-top: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
      }

      .file-icon {
        font-size: 24px;
        color: var(--color-primary);
        flex-shrink: 0;
      }

      .file-details {
        flex: 1;
        min-width: 0;
      }

      .file-name {
        font-weight: 500;
        color: var(--color-gray-900);
        word-break: break-all;
        cursor: pointer;
        transition: color 0.2s ease;
      }

      .file-name:hover {
        color: var(--color-primary);
      }

      .file-size {
        font-size: 12px;
        color: var(--color-gray-500);
        margin-top: 4px;
      }

      .file-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 8px;
        padding: 4px 0;
      }

      .file-caption {
        margin-top: 8px;
        font-style: italic;
        color: var(--color-gray-700);
      }

      .download-btn {
        background: var(--color-primary);
        color: white;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 12px;
      }

      .download-btn:hover {
        background: var(--color-primary-hover);
        transform: scale(1.1);
      }

      /* Chat responsive design */
      @media (max-width: 768px) {
        .chat-container {
          height: 400px;
        }

        .chat-controls {
          padding: 16px;
        }

        .chat-messages {
          padding: 16px;
        }

        .chat-input-wrapper {
          flex-direction: column;
          align-items: stretch;
        }

        .chat-input {
          margin-bottom: 12px;
        }

        .chat-actions {
          justify-content: center;
        }
      }
    </style>
  </head>
  <body>
    <div class="dashboard-container">
      <!-- Sidebar -->
      <aside class="sidebar">
        <div class="sidebar-header">
          <div class="brand-section">
            <div class="brand-icon">
              <svg
                width="32"
                height="32"
                viewBox="0 0 100 100"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <linearGradient
                    id="logoGradient1"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="100%"
                  >
                    <stop offset="0%" style="stop-color: #43e97b" />
                    <stop offset="50%" style="stop-color: #00f2fe" />
                    <stop offset="100%" style="stop-color: #4facfe" />
                  </linearGradient>
                  <linearGradient
                    id="logoGradient2"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="100%"
                  >
                    <stop offset="0%" style="stop-color: #00f2fe" />
                    <stop offset="100%" style="stop-color: #667eea" />
                  </linearGradient>
                  <linearGradient
                    id="logoGradient3"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="100%"
                  >
                    <stop offset="0%" style="stop-color: #667eea" />
                    <stop offset="100%" style="stop-color: #764ba2" />
                  </linearGradient>
                </defs>
                <!-- Outer hexagon -->
                <path
                  d="M25 20 L75 20 L90 50 L75 80 L25 80 L10 50 Z"
                  fill="url(#logoGradient1)"
                  opacity="0.9"
                />
                <!-- Inner C shape - top part -->
                <path
                  d="M35 30 L65 30 L70 35 L70 45 L50 45 L45 40 L45 35 L35 35 Z"
                  fill="white"
                />
                <!-- Inner C shape - bottom part -->
                <path
                  d="M35 55 L45 55 L45 60 L50 65 L70 65 L70 55 L65 50 L35 50 Z"
                  fill="white"
                />
                <!-- 3D effect - right side -->
                <path
                  d="M75 20 L80 15 L80 45 L90 50 L80 55 L80 85 L75 80 L90 50 Z"
                  fill="url(#logoGradient2)"
                  opacity="0.8"
                />
                <!-- 3D effect - bottom -->
                <path
                  d="M25 80 L75 80 L80 85 L30 85 L25 80 Z"
                  fill="url(#logoGradient3)"
                  opacity="0.7"
                />
              </svg>
            </div>
            <h2 class="brand-name">CollabSpace</h2>
          </div>
          <div class="user-section">
            <div class="user-avatar" id="userAvatar">
              <%= user && user.name ? user.name.charAt(0).toUpperCase() : 'M' %>
            </div>
            <div class="user-info">
              <h3 id="userName"><%= user ? user.name : 'Member' %></h3>
              <span class="user-role">Team Member</span>
            </div>
          </div>
        </div>

        <nav>
          <ul class="nav-menu">
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link active"
                data-section="overview"
              >
                <i class="fas fa-chart-pie"></i>
                Overview
              </a>
            </li>
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link"
                data-section="tasks"
              >
                <i class="fas fa-tasks"></i>
                My Tasks
              </a>
            </li>
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link"
                data-section="teams"
              >
                <i class="fas fa-users"></i>
                My Teams
              </a>
            </li>
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link"
                data-section="team-requests"
              >
                <i class="fas fa-user-plus"></i>
                Team Requests
              </a>
            </li>
            <li class="nav-item">
              <a href="javascript:void(0)" class="nav-link" data-section="chat">
                <i class="fas fa-comments"></i>
                Team Chat
              </a>
            </li>
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link"
                data-section="profile"
              >
                <i class="fas fa-user"></i>
                Profile
              </a>
            </li>
            <li class="nav-item">
              <a
                href="javascript:void(0)"
                class="nav-link"
                data-section="settings"
              >
                <i class="fas fa-cog"></i>
                Settings
              </a>
            </li>
            <li class="nav-item">
              <a href="javascript:void(0)" class="nav-link" onclick="logout()">
                <i class="fas fa-sign-out-alt"></i>
                Logout
              </a>
            </li>
          </ul>
        </nav>
      </aside>

      <!-- Main Content -->
      <main class="main-content">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
          <div class="header-top">
            <div>
              <h1 class="dashboard-title" id="sectionTitle">
                Dashboard Overview
              </h1>
              <p class="dashboard-subtitle" id="sectionSubtitle">
                Track your tasks and team activities
              </p>
            </div>
            <div class="header-actions">
              <button class="btn btn-secondary" onclick="refreshData()">
                <i class="fas fa-sync-alt"></i>
                Refresh
              </button>
            </div>
          </div>
        </div>

        <!-- Content Sections -->
        <div id="overview-section" class="content-section active">
          <!-- Stats Grid -->
          <div class="stats-grid">
            <div class="stat-card tasks">
              <div class="stat-header">
                <div class="stat-icon tasks">
                  <i class="fas fa-tasks"></i>
                </div>
              </div>
              <div class="stat-value" id="myTasks">0</div>
              <div class="stat-label">My Tasks</div>
            </div>

            <div class="stat-card completed">
              <div class="stat-header">
                <div class="stat-icon completed">
                  <i class="fas fa-check-circle"></i>
                </div>
              </div>
              <div class="stat-value" id="completedTasks">0</div>
              <div class="stat-label">Completed</div>
            </div>

            <div class="stat-card teams">
              <div class="stat-header">
                <div class="stat-icon teams">
                  <i class="fas fa-users"></i>
                </div>
              </div>
              <div class="stat-value" id="myTeams">0</div>
              <div class="stat-label">My Teams</div>
            </div>

            <div class="stat-card messages">
              <div class="stat-header">
                <div class="stat-icon messages">
                  <i class="fas fa-comments"></i>
                </div>
              </div>
              <div class="stat-value" id="unreadMessages">0</div>
              <div class="stat-label">Messages</div>
            </div>
          </div>

          <!-- Quick Actions -->
          <div class="quick-actions">
            <div class="quick-action" onclick="showSection('tasks')">
              <i class="fas fa-plus"></i>
              <h3>View Tasks</h3>
              <p>Manage your assigned tasks</p>
            </div>
            <div class="quick-action" onclick="showSection('teams')">
              <i class="fas fa-users"></i>
              <h3>Team Activity</h3>
              <p>Check team updates and progress</p>
            </div>
            <div class="quick-action" onclick="showSection('chat')">
              <i class="fas fa-comments"></i>
              <h3>Team Chat</h3>
              <p>Communicate with team members</p>
            </div>
            <div class="quick-action" onclick="showSection('profile')">
              <i class="fas fa-user"></i>
              <h3>My Profile</h3>
              <p>Update your profile information</p>
            </div>
          </div>

          <!-- Invitations and Notifications -->
          <div id="invitations-container" style="display: none">
            <div class="section-content">
              <h3 class="section-subtitle">
                <i class="fas fa-envelope"></i>
                Team Invitations
              </h3>
              <div id="invitations-list"></div>
            </div>
          </div>
        </div>

        <!-- Tasks Section -->
        <div id="tasks-section" class="content-section">
          <div class="section-content">
            <h2 class="section-title">
              <i class="fas fa-tasks"></i>
              My Tasks
            </h2>
            <div id="tasksContent">
              <div class="empty-state">
                <i class="fas fa-tasks"></i>
                <h3>Loading Tasks...</h3>
                <p>Please wait while we fetch your tasks</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Teams Section -->
        <div id="teams-section" class="content-section">
          <div class="section-content">
            <h2 class="section-title">
              <i class="fas fa-users"></i>
              My Teams
            </h2>
            <div id="teamsContent">
              <div class="empty-state">
                <i class="fas fa-users"></i>
                <h3>Loading Teams...</h3>
                <p>Please wait while we fetch your teams</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Team Requests Section -->
        <div id="team-requests-section" class="content-section">
          <div class="section-content">
            <h2 class="section-title">
              <i class="fas fa-user-plus"></i>
              Team Requests
            </h2>

            <!-- Pending Requests Tab -->
            <div class="requests-tabs">
              <button
                class="tab-btn active"
                onclick="switchRequestTab('pending')"
              >
                <i class="fas fa-clock"></i>
                Pending Requests
              </button>
              <button class="tab-btn" onclick="switchRequestTab('available')">
                <i class="fas fa-search"></i>
                Available Teams
              </button>
            </div>

            <!-- Pending Requests Content -->
            <div id="pending-requests-tab" class="tab-content active">
              <div class="requests-header">
                <div class="header-content">
                  <h3>Your Pending Join Requests</h3>
                  <p>
                    Teams you've requested to join that are awaiting approval
                  </p>
                </div>
              </div>
              <div id="pending-requests-list">
                <div class="empty-state">
                  <i class="fas fa-clock"></i>
                  <h3>Loading Pending Requests...</h3>
                  <p>Please wait while we fetch your requests</p>
                </div>
              </div>
            </div>

            <!-- Available Teams Content -->
            <div id="available-teams-tab" class="tab-content">
              <div class="requests-header">
                <div class="header-content">
                  <h3>Available Teams</h3>
                  <p>Teams you can request to join</p>
                </div>
                <button
                  class="btn btn-outline btn-sm"
                  onclick="loadAvailableTeams()"
                >
                  <i class="fas fa-sync"></i> Refresh
                </button>
              </div>
              <div id="available-teams-grid" class="teams-grid">
                <div class="empty-state">
                  <i class="fas fa-search"></i>
                  <h3>Loading Available Teams...</h3>
                  <p>Please wait while we find teams you can join</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Chat Section -->
        <div id="chat-section" class="content-section" style="display: block">
          <div
            class="section-content"
            style="
              height: calc(100vh - 120px);
              display: flex;
              flex-direction: column;
            "
          >
            <div class="section-header">
              <h2 class="section-title">
                <i class="fas fa-comments"></i>
                Team Chat
              </h2>
              <div class="chat-controls">
                <select
                  id="chatTeamSelect"
                  class="form-select"
                  style="width: 200px; margin-right: 16px"
                >
                  <option value="">Select a team</option>
                </select>
                <div class="online-indicator">
                  <span id="onlineCount">0</span> online
                </div>
              </div>
            </div>

            <div
              class="chat-container"
              style="
                flex: 1;
                display: flex;
                flex-direction: column;
                min-height: 0;
              "
            >
              <div
                class="chat-messages"
                id="chatMessages"
                style="flex: 1; overflow-y: auto"
              >
                <div class="chat-welcome">
                  <div class="welcome-icon">
                    <i class="fas fa-comments"></i>
                  </div>
                  <h3>Welcome to Team Chat</h3>
                  <p>
                    Select a team above to start chatting with your team members
                  </p>
                </div>
              </div>

              <div
                class="typing-indicator"
                id="typingIndicator"
                style="display: none"
              >
                <div class="typing-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <span class="typing-text">Someone is typing...</span>
              </div>

              <div class="chat-input-container" style="padding-bottom: 8px">
                <div class="chat-input-wrapper">
                  <input
                    type="text"
                    id="messageInput"
                    class="chat-input"
                    placeholder="Type your message..."
                    disabled
                  />
                  <button id="sendButton" class="send-button" disabled>
                    <i class="fas fa-paper-plane"></i>
                  </button>
                </div>
                <div class="chat-actions">
                  <button
                    id="attachFileBtn"
                    class="chat-action-btn"
                    title="Attach file"
                  >
                    <i class="fas fa-paperclip"></i>
                  </button>
                  <button id="emojiBtn" class="chat-action-btn" title="Emoji">
                    <i class="fas fa-smile"></i>
                  </button>
                  <input
                    type="file"
                    id="fileInput"
                    style="display: none"
                    accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Profile Section -->
        <div id="profile-section" class="content-section">
          <div class="section-content">
            <h2 class="section-title">
              <i class="fas fa-user"></i>
              My Profile
            </h2>
            <div id="profileContent">
              <div class="empty-state">
                <i class="fas fa-user"></i>
                <h3>Loading Profile...</h3>
                <p>Please wait while we fetch your profile</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Settings Section -->
        <div id="settings-section" class="content-section">
          <div class="section-content">
            <h2 class="section-title">
              <i class="fas fa-cog"></i>
              Settings
            </h2>
            <div id="settingsContent">
              <div class="empty-state">
                <i class="fas fa-cog"></i>
                <h3>Loading Settings...</h3>
                <p>Please wait while we fetch your settings</p>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Include Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>

    <script>
      // Test if JavaScript is working
      console.log("JavaScript is loaded");

      // Global variables
      let memberSocket;
      let currentUser;
      let currentSection = "overview";
      let teams = [];
    </script>

    <!-- User data injection -->
    <script type="application/json" id="userData">
      <%- JSON.stringify(user || null) %>
    </script>

    <script>
      // Parse user data from JSON script tag
      try {
        const userDataElement = document.getElementById("userData");
        currentUser = userDataElement
          ? JSON.parse(userDataElement.textContent)
          : null;
        console.log("Current user:", currentUser);
      } catch (error) {
        console.error("Error parsing user data:", error);
        currentUser = null;
      }

      document.addEventListener("DOMContentLoaded", function () {
        console.log("DOM loaded");

        // Try to setup navigation first
        try {
          setupNavigation();
          console.log("Navigation setup completed");
        } catch (error) {
          console.error("Error setting up navigation:", error);
        }

        // Then initialize socket
        try {
          initializeSocket();
          console.log("Socket initialization completed");
        } catch (error) {
          console.error("Error initializing socket:", error);
        }

        loadSectionData("overview");
      });

      // Socket.IO initialization
      function initializeSocket() {
        memberSocket = io();

        memberSocket.on("connect", () => {
          console.log("Member socket connected");
          if (currentUser) {
            memberSocket.emit("registerMember", currentUser._id);
            memberSocket.emit("join user", { userId: currentUser._id });
          }

          // Rejoin current chat team if any
          if (currentChatTeam) {
            console.log(
              "Rejoining team on reconnect:",
              currentChatTeam,
              "with userId:",
              currentUser._id
            );
            memberSocket.emit("join team", {
              teamId: currentChatTeam,
              userId: currentUser._id,
            });
          }
        });

        // Setup invitation socket events
        setupInvitationSocketEvents();

        memberSocket.on("task update", (data) => {
          handleTaskUpdate(data);
        });

        memberSocket.on("task updated", (data) => {
          console.log("Task updated event received:", data);
          handleTaskUpdate(data);
          // Refresh overview stats and task lists
          loadSectionData("overview");
          if (currentSection === "tasks") {
            loadSectionData("tasks");
          }
        });

        memberSocket.on("dashboard refresh", (data) => {
          console.log("Dashboard refresh event received:", data);
          // Refresh current section data
          loadSectionData(currentSection || "overview");
        });

        memberSocket.on("team update", (data) => {
          handleTeamUpdate(data);
        });

        // Remove generic socket listener to avoid duplicate events

        // Chat message handler for team chat
        memberSocket.on("new message", (message) => {
          if (currentChatTeam === message.teamId) {
            if (!renderedMessageIds.has(message._id)) {
              chatMessages.push(message);
              addMessageToChat(message);
            }
          }
        });

        // Chat-specific event listeners
        memberSocket.on("user typing", (data) => {
          console.log("Received user typing event:", data); // Debug log
          if (
            currentChatTeam === data.teamId &&
            data.userId !== currentUser._id
          ) {
            showTypingIndicator(data.userName);
          }
        });

        memberSocket.on("user stopped typing", (data) => {
          console.log("Received user stopped typing event:", data); // Debug log
          if (
            currentChatTeam === data.teamId &&
            data.userId !== currentUser._id
          ) {
            hideTypingIndicator();
          }
        });

        memberSocket.on("onlineCountUpdate", (data) => {
          console.log("Received online count update:", data); // Debug log
          if (currentChatTeam === data.teamId) {
            updateOnlineCountDisplay(data.count);
          }
        });
      }

      // Navigation setup
      function setupNavigation() {
        console.log("Setting up navigation...");
        const navLinks = document.querySelectorAll(".nav-link");
        console.log("Found nav links:", navLinks.length);

        navLinks.forEach((link) => {
          link.addEventListener("click", function (e) {
            e.preventDefault();
            console.log("Nav link clicked:", this.dataset.section);

            if (this.getAttribute("onclick")) {
              console.log("Skipping link with onclick attribute");
              return; // Skip logout link
            }

            const section = this.dataset.section;
            if (section) {
              console.log("Calling showSection with:", section);
              showSection(section);
            } else {
              console.error("No section data found for link:", this);
            }
          });
        });
      }

      // Show specific section
      function showSection(sectionName) {
        console.log("Switching to section:", sectionName);
        currentSection = sectionName; // Track current section

        // Update navigation active state
        document.querySelectorAll(".nav-link").forEach((link) => {
          link.classList.remove("active");
          if (link.dataset.section === sectionName) {
            link.classList.add("active");
            console.log("Set active nav:", sectionName);
          }
        });

        // Update content sections using direct style (more reliable)
        document.querySelectorAll(".content-section").forEach((section) => {
          section.style.display = "none";
        });

        const activeSection = document.getElementById(sectionName + "-section");
        if (activeSection) {
          activeSection.style.display = "block";
          console.log("Set active content:", sectionName);
        } else {
          console.error("Content section not found:", sectionName);
        }

        // Update header titles
        updateSectionHeader(sectionName);

        // Load section-specific data
        loadSectionData(sectionName);
      }

      // Update section header based on current section
      function updateSectionHeader(sectionName) {
        const titleElement = document.getElementById("sectionTitle");
        const subtitleElement = document.getElementById("sectionSubtitle");

        const sectionTitles = {
          overview: {
            title: "Dashboard Overview",
            subtitle: "Track your tasks and team activities",
          },
          tasks: {
            title: "My Tasks",
            subtitle: "Manage your assigned tasks and deadlines",
          },
          teams: {
            title: "My Teams",
            subtitle: "View your team memberships and activities",
          },
          "team-requests": {
            title: "Team Requests",
            subtitle: "Manage join requests and discover new teams",
          },
          chat: {
            title: "Team Chat",
            subtitle: "Communicate with your team members",
          },
          profile: {
            title: "My Profile",
            subtitle: "Manage your personal information",
          },
          settings: {
            title: "Settings",
            subtitle: "Customize your preferences",
          },
        };

        const sectionInfo =
          sectionTitles[sectionName] || sectionTitles.overview;
        titleElement.textContent = sectionInfo.title;
        subtitleElement.textContent = sectionInfo.subtitle;
      }

      // Load section-specific data
      async function loadSectionData(sectionName) {
        console.log("Loading data for section:", sectionName);

        try {
          switch (sectionName) {
            case "overview":
              await loadOverviewData();
              break;
            case "tasks":
              await loadTasksData();
              break;
            case "teams":
              await loadTeamsData();
              break;
            case "team-requests":
              await loadTeamRequestsData();
              break;
            case "chat":
              loadChat();
              break;
            case "profile":
              await loadProfileData();
              break;
            case "settings":
              await loadSettingsData();
              break;
            default:
              console.warn("Unknown section:", sectionName);
          }
        } catch (error) {
          console.error("Error loading section data:", error);
        }
      }

      // Load overview data
      async function loadOverviewData() {
        try {
          // Load member stats
          await loadMemberStats();

          // Load invitations
          await loadInvitations();
        } catch (error) {
          console.error("Error loading overview data:", error);
        }
      }

      async function loadMemberStats() {
        try {
          const response = await fetch("/api/member/stats");
          if (response.ok) {
            const stats = await response.json();
            document.getElementById("myTasks").textContent = stats.myTasks || 0;
            document.getElementById("completedTasks").textContent =
              stats.completedTasks || 0;
            document.getElementById("myTeams").textContent = stats.myTeams || 0;
            document.getElementById("unreadMessages").textContent =
              stats.unreadMessages || 0;
          } else {
            console.error("Failed to load overview stats");
            // Show default values
            document.getElementById("myTasks").textContent = "0";
            document.getElementById("completedTasks").textContent = "0";
            document.getElementById("myTeams").textContent = "0";
            document.getElementById("unreadMessages").textContent = "0";
          }
        } catch (error) {
          console.error("Error loading member stats:", error);
          // Show default values
          document.getElementById("myTasks").textContent = "0";
          document.getElementById("completedTasks").textContent = "0";
          document.getElementById("myTeams").textContent = "0";
          document.getElementById("unreadMessages").textContent = "0";
        }
      }

      // Load tasks data
      async function loadTasksData() {
        const tasksContent = document.getElementById("tasksContent");
        showLoadingState("tasksContent");

        try {
          const response = await fetch("/api/member/tasks");
          if (response.ok) {
            const tasks = await response.json();
            displayTasks(tasks);
          } else {
            throw new Error("Failed to fetch tasks");
          }
        } catch (error) {
          console.error("Error loading tasks:", error);
          tasksContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Tasks</h3>
                        <p>Unable to load your tasks. Please try again.</p>
                        <button class="btn btn-primary" onclick="loadTasksData()">
                            <i class="fas fa-retry"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      // Display tasks
      function displayTasks(tasks) {
        const tasksContent = document.getElementById("tasksContent");

        if (!tasks || tasks.length === 0) {
          tasksContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-tasks"></i>
                        <h3>No Tasks Yet</h3>
                        <p>You don't have any tasks assigned. Check back later!</p>
                    </div>
                `;
          return;
        }

        const tasksHTML = `
                <div class="tasks-grid">
                    ${tasks
                      .map(
                        (task) => `
                        <div class="task-card ${task.status}" data-task-id="${
                          task._id
                        }">
                            <div class="task-header">
                                <h4 class="task-title">${escapeHtml(
                                  task.title
                                )}</h4>
                                <span class="task-status status-${
                                  task.status
                                }">${task.status}</span>
                            </div>
                            ${
                              task.description
                                ? `<p class="task-description">${escapeHtml(
                                    task.description
                                  )}</p>`
                                : ""
                            }
                            <div class="task-meta">
                                ${
                                  task.team
                                    ? `<span class="task-team"><i class="fas fa-users"></i> ${escapeHtml(
                                        task.team.name
                                      )}</span>`
                                    : ""
                                }
                                <span class="task-priority priority-${
                                  task.priority || "medium"
                                }">
                                    <i class="fas fa-flag"></i> ${
                                      task.priority || "medium"
                                    }
                                </span>
                            </div>
                            <div class="task-actions">
                                ${
                                  task.status !== "completed"
                                    ? `
                                    <button class="btn btn-sm btn-accent" onclick="updateTaskStatus('${task._id}', 'completed')">
                                        <i class="fas fa-check"></i>
                                        Complete
                                    </button>
                                `
                                    : ""
                                }
                                <button class="btn btn-sm btn-secondary" onclick="viewTaskDetails('${
                                  task._id
                                }')">
                                    <i class="fas fa-eye"></i>
                                    View
                                </button>
                            </div>
                        </div>
                    `
                      )
                      .join("")}
                </div>
                
                <style>
                    .tasks-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                        gap: 20px;
                        margin-top: 20px;
                    }
                    
                    .task-card {
                        background: rgba(255, 255, 255, 0.1);
                        backdrop-filter: blur(20px);
                        border-radius: 16px;
                        padding: 24px;
                        border: 1px solid rgba(255, 255, 255, 0.2);
                        transition: all 0.3s ease;
                        position: relative;
                        overflow: hidden;
                    }
                    
                    .task-card:hover {
                        transform: translateY(-4px);
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                    }
                    
                    .task-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: flex-start;
                        margin-bottom: 12px;
                    }
                    
                    .task-title {
                        font-size: 18px;
                        font-weight: 600;
                        color: var(--white);
                        margin: 0;
                        flex: 1;
                        margin-right: 12px;
                    }
                    
                    .task-status {
                        padding: 4px 12px;
                        border-radius: 20px;
                        font-size: 12px;
                        font-weight: 600;
                        text-transform: uppercase;
                    }
                    
                    .status-todo {
                        background: var(--warning-gradient);
                        color: var(--white);
                    }
                    
                    .status-progress {
                        background: var(--primary-gradient);
                        color: var(--white);
                    }
                    
                    .status-review {
                        background: var(--accent-gradient);
                        color: var(--white);
                    }
                    
                    .status-completed {
                        background: var(--success-gradient);
                        color: var(--white);
                    }
                    
                    .task-description {
                        color: rgba(255, 255, 255, 0.8);
                        font-size: 14px;
                        line-height: 1.5;
                        margin-bottom: 16px;
                    }
                    
                    .task-meta {
                        display: flex;
                        gap: 12px;
                        margin-bottom: 16px;
                        flex-wrap: wrap;
                    }
                    
                    .task-team, .task-priority {
                        display: flex;
                        align-items: center;
                        gap: 6px;
                        font-size: 12px;
                        color: rgba(255, 255, 255, 0.7);
                        padding: 4px 8px;
                        background: rgba(255, 255, 255, 0.1);
                        border-radius: 8px;
                    }
                    
                    .priority-high {
                        color: var(--danger-light) !important;
                    }
                    
                    .priority-medium {
                        color: var(--warning-light) !important;
                    }
                    
                    .priority-low {
                        color: var(--success-light) !important;
                    }
                    
                    .task-actions {
                        display: flex;
                        gap: 8px;
                        justify-content: flex-end;
                    }
                    
                    .btn-sm {
                        padding: 6px 12px;
                        font-size: 12px;
                    }
                </style>
            `;

        tasksContent.innerHTML = tasksHTML;
      }

      // Load teams data
      async function loadTeamsData() {
        const teamsContent = document.getElementById("teamsContent");
        showLoadingState("teamsContent");

        try {
          const response = await fetch("/api/member/teams");
          if (response.ok) {
            teams = await response.json();
            displayTeams(teams);
          } else {
            throw new Error("Failed to fetch teams");
          }
        } catch (error) {
          console.error("Error loading teams:", error);
          teamsContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Teams</h3>
                        <p>Unable to load your teams. Please try again.</p>
                        <button class="btn btn-primary" onclick="loadTeamsData()">
                            <i class="fas fa-retry"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      // Display teams
      function displayTeams(teams) {
        const teamsContent = document.getElementById("teamsContent");

        if (!teams || teams.length === 0) {
          teamsContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <h3>No Teams Yet</h3>
                        <p>You're not a member of any teams yet. Ask your admin to add you to a team!</p>
                    </div>
                `;
          return;
        }

        const teamsHTML = `
                <div class="teams-grid">
                    ${teams
                      .map(
                        (team) => `
                        <div class="team-card" data-team-id="${team._id}">
                            <div class="team-header">
                                <h4 class="team-name">${escapeHtml(
                                  team.name
                                )}</h4>
                                <div class="team-members-count">
                                    <i class="fas fa-users"></i>
                                    ${team.members?.length || 0}
                                </div>
                            </div>
                            ${
                              team.description
                                ? `<p class="team-description">${escapeHtml(
                                    team.description
                                  )}</p>`
                                : ""
                            }
                            <div class="team-admin">
                                <strong>Admin:</strong> ${
                                  team.admin
                                    ? `${team.admin.firstName} ${team.admin.lastName}`
                                    : "Unknown"
                                }
                            </div>
                            <div class="team-actions">
                                <button class="btn btn-primary" onclick="viewTeamChat('${
                                  team._id
                                }')">
                                    <i class="fas fa-comments"></i>
                                    Team Chat
                                </button>
                            </div>
                        </div>
                    `
                      )
                      .join("")}
                </div>
                
                <style>
                    .teams-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                        gap: 20px;
                        margin-top: 20px;
                    }
                    
                    .team-card {
                        background: rgba(255, 255, 255, 0.1);
                        backdrop-filter: blur(20px);
                        border-radius: 16px;
                        padding: 24px;
                        border: 1px solid rgba(255, 255, 255, 0.2);
                        transition: all 0.3s ease;
                    }
                    
                    .team-card:hover {
                        transform: translateY(-4px);
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                    }
                    
                    .team-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 12px;
                    }
                    
                    .team-name {
                        font-size: 18px;
                        font-weight: 600;
                        color: var(--white);
                        margin: 0;
                    }
                    
                    .team-members-count {
                        display: flex;
                        align-items: center;
                        gap: 6px;
                        color: var(--accent);
                        font-weight: 600;
                    }
                    
                    .team-description {
                        color: rgba(255, 255, 255, 0.8);
                        font-size: 14px;
                        line-height: 1.5;
                        margin-bottom: 16px;
                    }
                    
                    .team-admin {
                        color: rgba(255, 255, 255, 0.7);
                        font-size: 14px;
                        margin-bottom: 16px;
                    }
                    
                    .team-actions {
                        display: flex;
                        justify-content: flex-end;
                    }
                </style>
            `;

        teamsContent.innerHTML = teamsHTML;
      }

      // Load team requests data
      async function loadTeamRequestsData() {
        console.log("Loading team requests data...");
        // Load pending requests by default
        await loadPendingRequests();
      }

      // Load messages data
      async function loadMessagesData() {
        const messagesContent = document.getElementById("messagesContent");
        showLoadingState("messagesContent");

        try {
          const response = await fetch("/api/member/teams");
          if (response.ok) {
            const teams = await response.json();
            displayTeamsForMessages(teams);
          } else {
            throw new Error("Failed to fetch teams");
          }
        } catch (error) {
          console.error("Error loading teams for messages:", error);
          messagesContent.innerHTML = `
                <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Teams</h3>
                        <p>Unable to load your teams. Please try again.</p>
                        <button class="btn btn-primary" onclick="loadMessagesData()">
                            <i class="fas fa-retry"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      // Display teams for messages selection
      function displayTeamsForMessages(teams) {
        const messagesContent = document.getElementById("messagesContent");

        if (!teams || teams.length === 0) {
          messagesContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <h3>No Teams Yet</h3>
                        <p>You're not a member of any teams yet. Ask your admin to add you to a team!</p>
                    </div>
                `;
          return;
        }

        const teamsHTML = `
                <div class="teams-messages-container">
                    <div class="section-header">
                        <h3><i class="fas fa-comments"></i> Team Messages</h3>
                        <p>Select a team to view and send messages</p>
                    </div>
                    <div class="teams-grid">
                        ${teams
                          .map(
                            (team) => `
                            <div class="team-card" onclick="selectTeamForMessages('${
                              team._id
                            }', '${team.name}')">
                                <div class="team-info">
                                    <h4>${escapeHtml(team.name)}</h4>
                                    <p class="team-description">${escapeHtml(
                                      team.description ||
                                        "No description available"
                                    )}</p>
                                    <div class="team-meta">
                                        <span class="member-count">
                                            <i class="fas fa-users"></i>
                                            ${
                                              team.members
                                                ? team.members.length
                                                : 0
                                            } members
                                        </span>
                                        <span class="team-admin">
                                            <i class="fas fa-crown"></i>
                                            ${
                                              team.admin
                                                ? escapeHtml(
                                                    team.admin.firstName +
                                                      " " +
                                                      team.admin.lastName
                                                  )
                                                : "Unknown"
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="team-actions">
                                    <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); selectTeamForMessages('${
                                      team._id
                                    }', '${team.name}')">
                                        <i class="fas fa-comments"></i>
                                        View Messages
                    </button>
                </div>
                            </div>
                        `
                          )
                          .join("")}
                    </div>
                </div>
                <style>
                    .teams-messages-container {
                        padding: 20px;
                    }
                    
                    .section-header {
                        margin-bottom: 24px;
                        text-align: center;
                    }
                    
                    .section-header h3 {
                        color: var(--primary-color);
                        margin-bottom: 8px;
                    }
                    
                    .section-header p {
                        color: var(--text-secondary);
                        margin: 0;
                    }
                    
                    .teams-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                        gap: 20px;
                    }
                    
                    .team-card {
                        background: var(--card-bg);
                        border: 1px solid var(--border-color);
                        border-radius: 12px;
                        padding: 20px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    
                    .team-card:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        border-color: var(--primary-color);
                    }
                    
                    .team-info h4 {
                        color: var(--text-primary);
                        margin: 0 0 8px 0;
                        font-size: 18px;
                    }
                    
                    .team-description {
                        color: var(--text-secondary);
                        margin: 0 0 16px 0;
                        font-size: 14px;
                        line-height: 1.4;
                    }
                    
                    .team-meta {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 16px;
                        font-size: 12px;
                        color: var(--text-secondary);
                    }
                    
                    .member-count, .team-admin {
                        display: flex;
                        align-items: center;
                        gap: 4px;
                    }
                    
                    .team-actions {
                        display: flex;
                        justify-content: flex-end;
                    }
                    
                    @media (max-width: 768px) {
                        .teams-grid {
                            grid-template-columns: 1fr;
                        }
                        
                        .team-meta {
                            flex-direction: column;
                            align-items: flex-start;
                            gap: 8px;
                        }
                    }
                </style>
            `;

        messagesContent.innerHTML = teamsHTML;
      }

      // Select team for messages
      function selectTeamForMessages(teamId, teamName) {
        console.log("Selected team for messages:", teamId, teamName);
        // This will be implemented to show the actual messages for the selected team
        // For now, we'll show a placeholder
        const messagesContent = document.getElementById("messagesContent");
        messagesContent.innerHTML = `
                <div class="selected-team-messages">
                    <div class="messages-header">
                        <button class="btn btn-secondary btn-sm" onclick="loadMessagesData()">
                            <i class="fas fa-arrow-left"></i>
                            Back to Teams
                        </button>
                        <h3><i class="fas fa-comments"></i> ${escapeHtml(
                          teamName
                        )} Messages</h3>
                    </div>
                    <div class="messages-placeholder">
                        <i class="fas fa-comments"></i>
                        <h4>Messages for ${escapeHtml(teamName)}</h4>
                        <p>Message functionality will be implemented here</p>
                    </div>
                </div>
                <style>
                    .selected-team-messages {
                        padding: 20px;
                    }
                    
                    .messages-header {
                        display: flex;
                        align-items: center;
                        gap: 16px;
                        margin-bottom: 24px;
                        padding-bottom: 16px;
                        border-bottom: 1px solid var(--border-color);
                    }
                    
                    .messages-header h3 {
                        margin: 0;
                        color: var(--primary-color);
                    }
                    
                    .messages-placeholder {
                        text-align: center;
                        padding: 60px 20px;
                        color: var(--text-secondary);
                    }
                    
                    .messages-placeholder i {
                        font-size: 48px;
                        margin-bottom: 16px;
                        opacity: 0.5;
                    }
                    
                    .messages-placeholder h4 {
                        margin: 0 0 8px 0;
                        color: var(--text-primary);
                    }
                </style>
            `;
      }

      // Load profile data
      async function loadProfileData() {
        const profileContent = document.getElementById("profileContent");
        showLoadingState("profileContent");

        try {
          const response = await fetch("/api/member/profile");
          if (response.ok) {
            const profile = await response.json();
            displayProfile(profile);
          } else {
            throw new Error("Failed to fetch profile");
          }
        } catch (error) {
          console.error("Error loading profile:", error);
          profileContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Profile</h3>
                        <p>Unable to load your profile. Please try again.</p>
                        <button class="btn btn-primary" onclick="loadProfileData()">
                            <i class="fas fa-retry"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      // Display profile
      function displayProfile(profile) {
        const profileContent = document.getElementById("profileContent");

        profileContent.innerHTML = `
                <div class="profile-section">
                    <div class="profile-header">
                        <div class="profile-avatar" onclick="showModal({title: 'Avatar Update', message: 'Avatar upload functionality coming soon!', type: 'info', hideCancel: true})">
                            ${
                              profile.firstName
                                ? profile.firstName.charAt(0).toUpperCase()
                                : "M"
                            }
                        </div>
                        <div class="profile-info">
                            <h3>${profile.firstName || "Member"} ${
          profile.lastName || ""
        }</h3>
                            <p class="profile-email">${profile.email}</p>
                            <p class="profile-username">@${profile.username}</p>
                        </div>
                    </div>
                    
                    <div class="profile-form">
                        <form id="profileForm" onsubmit="updateProfile(event)">
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="firstName">First Name</label>
                                    <input type="text" id="firstName" name="firstName" value="${
                                      profile.firstName || ""
                                    }" placeholder="Enter your first name" required>
                                </div>
                                <div class="form-group">
                                    <label for="lastName">Last Name</label>
                                    <input type="text" id="lastName" name="lastName" value="${
                                      profile.lastName || ""
                                    }" placeholder="Enter your last name" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="phone">Phone Number</label>
                                <input type="tel" id="phone" name="phone" value="${
                                  profile.phone || ""
                                }" placeholder="Enter your phone number">
                            </div>
                            
                            <div class="form-group">
                                <label for="bio">Bio</label>
                                <textarea id="bio" name="bio" placeholder="Tell us about yourself, your skills, interests, and experience...">${
                                  profile.bio || ""
                                }</textarea>
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i>
                                    Update Profile
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
      }

      // Load settings data
      async function loadSettingsData() {
        const settingsContent = document.getElementById("settingsContent");
        settingsContent.innerHTML = `
                <div class="settings-section">
                    <div class="settings-group">
                        <h4><i class="fas fa-bell"></i> Notifications</h4>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" checked>
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Email notifications</div>
                                    <div class="setting-description">Receive email notifications for important updates</div>
                                </div>
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" checked>
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Task deadline reminders</div>
                                    <div class="setting-description">Get notified when task deadlines are approaching</div>
                                </div>
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox">
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Team invitation alerts</div>
                                    <div class="setting-description">Receive notifications for team invitations</div>
                                </div>
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-group">
                        <h4><i class="fas fa-shield-alt"></i> Privacy</h4>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" checked>
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Show online status</div>
                                    <div class="setting-description">Let team members see when you're online</div>
                                </div>
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox">
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Allow direct messages</div>
                                    <div class="setting-description">Allow any team member to send you direct messages</div>
                                </div>
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" checked>
                                <div class="toggle-switch"></div>
                                <div>
                                    <div>Profile visibility</div>
                                    <div class="setting-description">Make your profile visible to other team members</div>
                                </div>
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-group">
                        <h4><i class="fas fa-user-cog"></i> Account</h4>
                        <div class="setting-actions">
                            <button class="btn btn-outline" onclick="showChangePasswordModal()">
                                <i class="fas fa-key"></i>
                                Change Password
                            </button>
                            <button class="btn btn-outline" onclick="showExportDataModal()">
                                <i class="fas fa-download"></i>
                                Export Data
                            </button>
                            <button class="btn btn-outline" onclick="showDeactivateAccountModal()">
                                <i class="fas fa-user-times"></i>
                                Deactivate Account
                            </button>
                        </div>
                    </div>
                </div>
            `;
      }

      // Settings modal functions
      function showChangePasswordModal() {
        const modalHtml = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Change Password</h3>
                        <button class="modal-close" onclick="closeModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form onsubmit="changePassword(event)">
                            <div class="form-group">
                                <label>Current Password</label>
                                <input type="password" class="modal-input" id="currentPassword" required>
                            </div>
                            <div class="form-group">
                                <label>New Password</label>
                                <input type="password" class="modal-input" id="newPassword" required>
                            </div>
                            <div class="form-group">
                                <label>Confirm New Password</label>
                                <input type="password" class="modal-input" id="confirmPassword" required>
                            </div>
                            <div class="modal-actions">
                                <button type="button" class="btn btn-outline" onclick="closeModal()">Cancel</button>
                                <button type="submit" class="btn btn-primary">Change Password</button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
        showModal(modalHtml);
      }

      function showExportDataModal() {
        const modalHtml = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Export Data</h3>
                        <button class="modal-close" onclick="closeModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Select the data you want to export:</p>
                        <div class="form-group">
                            <label class="checkbox-label">
                                <input type="checkbox" checked> Profile Information
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" checked> Tasks
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" checked> Teams
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" checked> Messages
                            </label>
                        </div>
                        <div class="modal-actions">
                            <button type="button" class="btn btn-outline" onclick="closeModal()">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="exportUserData()">Export Data</button>
                        </div>
                    </div>
                </div>
            `;
        showModal(modalHtml);
      }

      function showDeactivateAccountModal() {
        const modalHtml = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Deactivate Account</h3>
                        <button class="modal-close" onclick="closeModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Warning:</strong> This action cannot be undone. Your account and all associated data will be permanently deleted.
                        </div>
                        <form onsubmit="deactivateAccount(event)">
                            <div class="form-group">
                                <label>Type "DELETE" to confirm:</label>
                                <input type="text" class="modal-input" id="confirmDelete" required>
                            </div>
                            <div class="modal-actions">
                                <button type="button" class="btn btn-outline" onclick="closeModal()">Cancel</button>
                                <button type="submit" class="btn btn-danger">Deactivate Account</button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
        showModal(modalHtml);
      }

      // Settings action functions
      function changePassword(event) {
        event.preventDefault();
        const currentPassword =
          document.getElementById("currentPassword").value;
        const newPassword = document.getElementById("newPassword").value;
        const confirmPassword =
          document.getElementById("confirmPassword").value;

        if (newPassword !== confirmPassword) {
          alert("New passwords do not match");
          return;
        }

        fetch("/api/auth/change-password", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({
            currentPassword,
            newPassword,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              alert("Password changed successfully");
              closeModal();
            } else {
              alert(data.message || "Failed to change password");
            }
          })
          .catch((error) => {
            console.error("Error changing password:", error);
            alert("An error occurred while changing password");
          });
      }

      function exportUserData() {
        fetch("/api/users/export", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        })
          .then((response) => response.blob())
          .then((blob) => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.style.display = "none";
            a.href = url;
            a.download = "user-data.json";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            closeModal();
            alert("Data exported successfully");
          })
          .catch((error) => {
            console.error("Error exporting data:", error);
            alert("Failed to export data");
          });
      }

      function deactivateAccount(event) {
        event.preventDefault();
        const confirmText = document.getElementById("confirmDelete").value;

        if (confirmText !== "DELETE") {
          alert('Please type "DELETE" to confirm');
          return;
        }

        fetch("/api/users/deactivate", {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              alert("Account deactivated successfully");
              localStorage.removeItem("token");
              window.location.href = "/";
            } else {
              alert(data.message || "Failed to deactivate account");
            }
          })
          .catch((error) => {
            console.error("Error deactivating account:", error);
            alert("An error occurred while deactivating account");
          });
      }

      // Socket event handlers
      function handleTaskUpdate(data) {
        console.log("Task update received:", data);
        // Reload overview data to refresh stats
        if (currentSection === "overview") {
          loadOverviewData();
        }
      }

      function handleTeamUpdate(data) {
        console.log("Team update received:", data);
        // Reload teams data if in teams section
        if (currentSection === "teams") {
          loadTeamsData();
        }
      }

      function handleNewMessage(data) {
        console.log("New message received:", data);
        // Update unread message count
        const unreadElement = document.getElementById("unreadMessages");
        if (unreadElement) {
          const current = parseInt(unreadElement.textContent) || 0;
          unreadElement.textContent = current + 1;
        }
      }

      // Utility functions
      function refreshData() {
        loadSectionData(currentSection);
      }

      function logout() {
        showModal({
          title: "Confirm Logout",
          message:
            "Are you sure you want to logout? Any unsaved changes may be lost.",
          type: "warning",
          confirmText: "Logout",
          confirmClass: "btn-danger",
          onConfirm: () => {
            window.location.href = "/logout";
          },
        });
      }

      // Show loading state
      function showLoadingState(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
          element.innerHTML = `
                    <div class="empty-state">
                        <div class="loading-spinner"></div>
                        <h3>Loading...</h3>
                        <p>Please wait while we fetch your data</p>
                    </div>
                `;
        }
      }

      // Add animation classes when showing sections
      function addAnimationClass(element, className) {
        element.classList.add(className);
        setTimeout(() => {
          element.classList.remove(className);
        }, 500);
      }

      // Escape HTML to prevent XSS
      function escapeHtml(text) {
        if (typeof text !== "string") return text;
        const map = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#039;",
        };
        return text.replace(/[&<>"']/g, function (m) {
          return map[m];
        });
      }

      // Task interaction functions
      async function updateTaskStatus(taskId, status) {
        try {
          const response = await fetch(`/api/tasks/${taskId}/status`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ status }),
          });

          if (response.ok) {
            // Refresh the tasks and overview data
            loadSectionData("tasks");
            loadOverviewData();

            // Show success message
            showNotification("Task status updated successfully!", "success");
          } else {
            throw new Error("Failed to update task status");
          }
        } catch (error) {
          console.error("Error updating task status:", error);
          showNotification("Failed to update task status", "error");
        }
      }

      function viewTaskDetails(taskId) {
        // For now, just show an alert. In a full implementation, this would open a modal
        showNotification("Task details view coming soon!", "info");
      }

      function viewTeamChat(teamId) {
        // Switch to chat section and load team chat
        showSection("chat");
        loadChat();
        // Set the team in the chat dropdown
        setTimeout(() => {
          const chatTeamSelect = document.getElementById("chatTeamSelect");
          if (chatTeamSelect) {
            chatTeamSelect.value = teamId;
            switchChatTeam(teamId);
          }
        }, 100);
      }

      async function loadTeamMessages(teamId) {
        const messagesContent = document.getElementById("messagesContent");
        showLoadingState("messagesContent");

        try {
          const response = await fetch(`/api/member/messages/${teamId}`);
          if (response.ok) {
            const messages = await response.json();
            displayTeamMessages(messages, teamId);
          } else {
            throw new Error("Failed to fetch team messages");
          }
        } catch (error) {
          console.error("Error loading team messages:", error);
          messagesContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Messages</h3>
                        <p>Unable to load team messages. Please try again.</p>
                        <button class="btn btn-primary" onclick="loadTeamMessages('${teamId}')">
                            <i class="fas fa-retry"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      function displayTeamMessages(messages, teamId) {
        const messagesContent = document.getElementById("messagesContent");

        if (!messages || messages.length === 0) {
          messagesContent.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-comments"></i>
                        <h3>No Messages Yet</h3>
                        <p>Be the first to start a conversation in this team!</p>
                        <button class="btn btn-primary" onclick="openChatWindow('${teamId}')">
                            <i class="fas fa-comments"></i>
                            Open Team Chat
                        </button>
                    </div>
                `;
          return;
        }

        const messagesHTML = `
                <div class="messages-container">
                    <div class="messages-header">
                        <h4>Team Messages</h4>
                        <button class="btn btn-primary" onclick="openChatWindow('${teamId}')">
                            <i class="fas fa-comments"></i>
                            Open Chat
                        </button>
                    </div>
                    <div class="messages-list">
                        ${messages
                          .slice(0, 10)
                          .map(
                            (message) => `
                            <div class="message-item">
                                <div class="message-sender">
                                    ${
                                      message.sender
                                        ? `${message.sender.firstName} ${message.sender.lastName}`
                                        : "Unknown"
                                    }
                                </div>
                                <div class="message-content">${escapeHtml(
                                  message.content
                                )}</div>
                                <div class="message-time">
                                    ${new Date(
                                      message.createdAt
                                    ).toLocaleDateString()} ${new Date(
                              message.createdAt
                            ).toLocaleTimeString()}
                                </div>
                            </div>
                        `
                          )
                          .join("")}
                    </div>
                </div>
                
                <style>
                    .messages-container {
                        max-width: 800px;
                    }
                    
                    .messages-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 24px;
                        padding-bottom: 16px;
                        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                    }
                    
                    .messages-header h4 {
                        color: var(--white);
                        font-size: 20px;
                        font-weight: 600;
                        margin: 0;
                    }
                    
                    .messages-list {
                        display: flex;
                        flex-direction: column;
                        gap: 16px;
                    }
                    
                    .message-item {
                        background: rgba(255, 255, 255, 0.05);
                        backdrop-filter: blur(10px);
                        border-radius: 12px;
                        padding: 16px;
                        border: 1px solid rgba(255, 255, 255, 0.1);
                    }
                    
                    .message-sender {
                        font-weight: 600;
                        color: var(--accent);
                        margin-bottom: 8px;
                        font-size: 14px;
                    }
                    
                    .message-content {
                        color: var(--white);
                        line-height: 1.5;
                        margin-bottom: 8px;
                    }
                    
                    .message-time {
                        font-size: 12px;
                        color: rgba(255, 255, 255, 0.5);
                    }
                </style>
            `;

        messagesContent.innerHTML = messagesHTML;
      }

      function openChatWindow(teamId) {
        // Open the team chat in a new window
        window.open(`/chat/${teamId}`, "_blank", "width=800,height=600");
      }

      // Chat functionality
      let currentChatTeam = null;
      let chatMessages = [];

      // Ensure chat listeners are initialized only once
      if (typeof chatListenersInitialized === "undefined") {
        var chatListenersInitialized = false;
      }

      function loadChat() {
        loadChatTeamSelects();
        setupChatEventListeners();
      }

      function loadChatTeamSelects() {
        const chatTeamSelect = document.getElementById("chatTeamSelect");
        if (chatTeamSelect && teams.length > 0) {
          chatTeamSelect.innerHTML =
            '<option value="">Choose a team to chat...</option>' +
            teams
              .map(
                (team) =>
                  `<option value="${team._id}">${escapeHtml(
                    team.name
                  )}</option>`
              )
              .join("");
        }
      }

      function setupChatEventListeners() {
        if (chatListenersInitialized) {
          return;
        }
        const chatTeamSelect = document.getElementById("chatTeamSelect");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const emojiBtn = document.getElementById("emojiBtn");
        const attachFileBtn = document.getElementById("attachFileBtn");
        const fileInput = document.getElementById("fileInput");

        if (chatTeamSelect) {
          chatTeamSelect.addEventListener("change", function () {
            switchChatTeam(this.value);
          });
        }

        if (messageInput) {
          messageInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              sendMessage();
            } else {
              handleTyping();
            }
          });

          messageInput.addEventListener("input", handleTyping);
          messageInput.addEventListener("blur", stopTyping);
        }

        if (sendButton) {
          sendButton.addEventListener("click", sendMessage);
        }

        // Emoji picker functionality
        if (emojiBtn) {
          emojiBtn.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();
            toggleEmojiPicker();
          });
        }

        // File upload functionality
        if (attachFileBtn) {
          attachFileBtn.addEventListener("click", function () {
            fileInput.click();
          });
        }

        if (fileInput) {
          fileInput.addEventListener("change", function (e) {
            const file = e.target.files[0];
            if (file) {
              handleFileSelection(file);
            }
          });
        }

        chatListenersInitialized = true;
      }

      function switchChatTeam(teamId) {
        if (!teamId) {
          // Stop typing when clearing team selection
          stopTyping();
          currentChatTeam = null;
          document.getElementById("messageInput").disabled = true;
          document.getElementById("sendButton").disabled = true;
          clearChatMessages();
          showChatWelcome();
          return;
        }

        // Stop typing when switching teams
        stopTyping();

        // Leave current team room
        if (currentChatTeam && memberSocket) {
          memberSocket.emit("leave team", { teamId: currentChatTeam });
        }

        currentChatTeam = teamId;

        // Join new team room
        if (memberSocket) {
          console.log(
            "Member joining team:",
            teamId,
            "with userId:",
            currentUser._id
          ); // Debug log
          memberSocket.emit("join team", {
            teamId: teamId,
            userId: currentUser._id,
          });
        }

        // Enable chat input
        document.getElementById("messageInput").disabled = false;
        document.getElementById("sendButton").disabled = false;

        // Load chat messages for this team
        loadChatMessages(teamId);
      }

      function loadChatMessages(teamId) {
        clearChatMessages();
        showLoadingState("chatMessages");

        fetch(`/api/chat/messages/${teamId}`)
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              chatMessages = data.messages;
              displayChatMessages();
            } else {
              console.error("Error loading chat messages:", data.message);
              showSystemMessage("Failed to load chat messages");
            }
          })
          .catch((error) => {
            console.error("Error loading chat messages:", error);
            showSystemMessage("Failed to load chat messages");
          });
      }

      function clearChatMessages() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (chatMessagesContainer) {
          chatMessagesContainer.innerHTML = "";
        }
        chatMessages = [];
        if (typeof renderedMessageIds !== "undefined" && renderedMessageIds) {
          renderedMessageIds.clear();
        }
      }

      function showChatWelcome() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (chatMessagesContainer) {
          chatMessagesContainer.innerHTML = `
            <div class="chat-welcome">
              <i class="fas fa-comments"></i>
              <h3>Welcome to Team Chat</h3>
              <p>Select a team above to start chatting with your team members</p>
            </div>
          `;
        }
      }

      function displayChatMessages() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        chatMessagesContainer.innerHTML = "";

        chatMessages.forEach((message) => {
          addMessageToChat(message);
        });

        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      // Track rendered messages to avoid duplicates
      if (typeof renderedMessageIds === "undefined") {
        var renderedMessageIds = new Set();
      }

      function addMessageToChat(message) {
        if (message && message._id && renderedMessageIds.has(message._id)) {
          return; // already rendered
        }
        console.log("Adding message to chat:", message); // Debug log
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        if (message && message._id) {
          renderedMessageIds.add(message._id);
        }

        const messageElement = document.createElement("div");
        messageElement.className = `chat-message ${
          message.sender._id === currentUser._id
            ? "own-message"
            : "other-message"
        }`;

        const isOwnMessage = message.sender._id === currentUser._id;
        const senderName = isOwnMessage
          ? "You"
          : `${message.sender.firstName} ${message.sender.lastName}`;

        let contentHtml = "";

        // Handle file attachments
        if (
          message.messageType === "file" &&
          (message.fileUrl || message.uploadedFile)
        ) {
          // Handle both file attachment formats
          const file = message.uploadedFile || {
            url: message.fileUrl,
            originalName: message.fileName,
            mimetype: message.fileType,
            size: message.fileSize,
          };

          const fileIcon = getFileIcon(file.mimetype);
          const fileSize = formatFileSize(file.size);

          if (file.mimetype && file.mimetype.startsWith("image/")) {
            // Display image attachment
            contentHtml = `
              <div class="file-attachment image-attachment">
                <img src="${file.url}" alt="${
              file.originalName
            }" onclick="openFileInNewTab('${
              file.url
            }')" style="max-width: 300px; max-height: 200px; border-radius: 8px; cursor: pointer;">
                <div class="file-info">
                  <span class="file-name">${escapeHtml(
                    file.originalName
                  )}</span>
                  <span class="file-size">${fileSize}</span>
                </div>
                ${
                  message.content
                    ? `<div class="file-caption">${escapeHtml(
                        message.content
                      )}</div>`
                    : ""
                }
              </div>
            `;
          } else {
            // Display other file types
            contentHtml = `
              <div class="file-attachment">
                <i class="${fileIcon}"></i>
                <div class="file-details">
                  <div class="file-name" onclick="openFileInNewTab('${
                    file.url
                  }')" style="cursor: pointer; color: var(--color-primary);">${escapeHtml(
              file.originalName
            )}</div>
                  <div class="file-size">${fileSize}</div>
                  ${
                    message.content
                      ? `<div class="file-caption">${escapeHtml(
                          message.content
                        )}</div>`
                      : ""
                  }
                </div>
                <button class="download-btn" onclick="downloadFile('${
                  file.url
                }', '${file.originalName}')" title="Download">
                  <i class="fas fa-download"></i>
                </button>
              </div>
            `;
          }
        } else {
          // Regular text message
          contentHtml = `<div class="message-content">${escapeHtml(
            message.content
          )}</div>`;
        }

        messageElement.innerHTML = `
          <div class="message-header">
            <span class="sender-name">${escapeHtml(senderName)}</span>
            <span class="message-time">${new Date(
              message.createdAt
            ).toLocaleTimeString("en-US", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
            })}</span>
          </div>
          ${contentHtml}
        `;

        chatMessagesContainer.appendChild(messageElement);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const content = messageInput.value.trim();

        if (!content || !currentChatTeam || !currentUser) return;

        // Stop typing indicator when sending message
        stopTyping();

        const messageData = {
          content: content,
          teamId: currentChatTeam,
          messageType: "text",
        };

        fetch("/api/chat/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(messageData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              messageInput.value = "";
              // Optimistically add the message so the sender sees it immediately
              if (
                data.message &&
                data.message.teamId === currentChatTeam &&
                !renderedMessageIds.has(data.message._id)
              ) {
                chatMessages.push(data.message);
                addMessageToChat(data.message);
              }
            } else {
              console.error("Error sending message:", data.message);
              showSystemMessage("Failed to send message");
            }
          })
          .catch((error) => {
            console.error("Error sending message:", error);
            showSystemMessage("Failed to send message");
          });
      }

      let typingTimer = null;
      let isTyping = false;

      function handleTyping() {
        if (!currentChatTeam || !currentUser || !memberSocket) return;

        if (!isTyping) {
          isTyping = true;
          console.log("Member started typing in team:", currentChatTeam); // Debug log
          memberSocket.emit("typing", {
            teamId: currentChatTeam,
            userId: currentUser._id,
            userName: `${currentUser.firstName} ${currentUser.lastName}`,
          });
        }

        // Clear existing timer
        if (typingTimer) {
          clearTimeout(typingTimer);
        }

        // Set new timer to stop typing after 1 second of inactivity
        typingTimer = setTimeout(() => {
          if (isTyping) {
            isTyping = false;
            console.log("Member stopped typing in team:", currentChatTeam); // Debug log
            memberSocket.emit("stop typing", {
              teamId: currentChatTeam,
              userId: currentUser._id,
            });
          }
        }, 1000);
      }

      function showTypingIndicator(userName) {
        console.log("Showing typing indicator for:", userName); // Debug log
        const typingIndicator = document.getElementById("typingIndicator");
        if (typingIndicator) {
          typingIndicator.querySelector(
            ".typing-text"
          ).textContent = `${userName} is typing...`;
          typingIndicator.style.display = "flex";
        }
      }

      function hideTypingIndicator() {
        console.log("Hiding typing indicator"); // Debug log
        const typingIndicator = document.getElementById("typingIndicator");
        if (typingIndicator) {
          typingIndicator.style.display = "none";
        }
      }

      function stopTyping() {
        if (isTyping && currentChatTeam && memberSocket) {
          isTyping = false;
          memberSocket.emit("stop typing", {
            teamId: currentChatTeam,
            userId: currentUser._id,
          });
        }
        if (typingTimer) {
          clearTimeout(typingTimer);
        }
      }

      // Emoji picker functionality
      function toggleEmojiPicker() {
        const existingPicker = document.getElementById("emojiPicker");
        if (existingPicker) {
          existingPicker.remove();
          return;
        }

        const emojis = [
          "😀",
          "😂",
          "😍",
          "🥰",
          "😘",
          "😊",
          "😉",
          "😎",
          "🤔",
          "😮",
          "😯",
          "😲",
          "😳",
          "😴",
          "😵",
          "😶",
          "😷",
          "🤒",
          "🤕",
          "🤢",
          "🤮",
          "🤧",
          "🥵",
          "🥶",
          "🥴",
          "😵‍💫",
          "🤯",
          "🤠",
          "🥳",
          "😎",
          "🤓",
          "🧐",
          "👍",
          "👎",
          "👌",
          "✌️",
          "🤞",
          "🤟",
          "🤘",
          "🤙",
          "👈",
          "👉",
          "👆",
          "🖕",
          "👇",
          "☝️",
          "👋",
          "🤚",
          "🖐️",
          "✋",
          "🖖",
          "👏",
          "🙌",
          "👐",
          "🤲",
          "🤝",
          "🙏",
          "✍️",
          "💅",
          "🤳",
          "💪",
          "🦾",
          "🦿",
          "🦵",
          "🦶",
          "👂",
          "🦻",
          "👃",
          "🧠",
          "🦷",
          "🦴",
          "👀",
          "👁️",
          "👅",
          "👄",
          "💋",
          "🩸",
          "❤️",
          "🧡",
          "💛",
          "💚",
          "💙",
          "💜",
          "🖤",
          "🤍",
          "🤎",
          "💔",
          "❣️",
          "💕",
          "💞",
          "💓",
          "💗",
          "💖",
          "💘",
          "💝",
          "💟",
          "☮️",
          "✝️",
          "☪️",
          "🕉️",
          "☸️",
          "✡️",
          "🔯",
          "🕎",
          "☯️",
          "☦️",
          "🛐",
          "⛎",
          "♈",
          "♉",
          "♊",
          "♋",
          "♌",
          "♍",
          "♎",
          "♏",
          "♐",
          "♑",
          "♒",
          "♓",
          "🆔",
          "⚛️",
          "🉑",
          "☢️",
          "☣️",
          "📴",
          "📳",
          "🈶",
          "🈚",
          "🈸",
          "🈺",
          "🈷️",
          "✴️",
          "🆚",
          "💮",
          "🉐",
          "㊙️",
          "㊗️",
          "🈴",
          "🈵",
          "🈹",
          "🈲",
          "🅰️",
          "🅱️",
          "🆎",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
          "🅾️",
          "🆑",
        ];

        const pickerHtml = `
          <div id="emojiPicker" class="emoji-picker">
            <div class="emoji-grid">
              ${emojis
                .map(
                  (emoji) =>
                    `<span class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</span>`
                )
                .join("")}
            </div>
          </div>
        `;

        const emojiBtn = document.getElementById("emojiBtn");
        emojiBtn.insertAdjacentHTML("afterend", pickerHtml);

        // Close picker when clicking outside
        setTimeout(() => {
          document.addEventListener("click", function closeEmojiPicker(e) {
            if (
              !e.target.closest("#emojiPicker") &&
              !e.target.closest("#emojiBtn")
            ) {
              const picker = document.getElementById("emojiPicker");
              if (picker) picker.remove();
              document.removeEventListener("click", closeEmojiPicker);
            }
          });
        }, 100);
      }

      function insertEmoji(emoji) {
        const messageInput = document.getElementById("messageInput");
        const currentValue = messageInput.value;
        const cursorPosition = messageInput.selectionStart;

        const newValue =
          currentValue.slice(0, cursorPosition) +
          emoji +
          currentValue.slice(cursorPosition);
        messageInput.value = newValue;

        // Set cursor position after the emoji
        messageInput.focus();
        messageInput.setSelectionRange(
          cursorPosition + emoji.length,
          cursorPosition + emoji.length
        );

        // Close emoji picker
        const picker = document.getElementById("emojiPicker");
        if (picker) picker.remove();
      }

      // File upload functionality
      function handleFileSelection(file) {
        // Validate file size (max 10MB)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
          showSystemMessage("File size must be less than 10MB");
          return;
        }

        // Show file preview
        showFilePreview(file);
      }

      function showFilePreview(file) {
        const fileIcon = getFileIcon(file.type);
        const fileSize = formatFileSize(file.size);

        const previewHtml = `
          <div id="filePreview" class="file-preview-container">
            <div class="file-preview-content">
              <div class="file-preview">
                <i class="${fileIcon}"></i>
                <div>
                  <div class="file-name">${escapeHtml(file.name)}</div>
                  <div class="file-size">${fileSize}</div>
                </div>
              </div>
              <input
                type="text"
                class="file-caption-input"
                placeholder="Add a caption (optional)..."
                id="fileCaption"
              />
              <div class="file-preview-buttons">
                <button class="btn-cancel" onclick="cancelFileUpload()">Cancel</button>
                <button class="btn-send" onclick="uploadFile()">Send</button>
              </div>
            </div>
          </div>
        `;

        // Insert preview above the input
        const chatContainer = document.querySelector(".chat-input-container");
        chatContainer.insertAdjacentHTML("beforebegin", previewHtml);

        // Store file for later upload
        window.pendingFile = file;
      }

      function cancelFileUpload() {
        const preview = document.getElementById("filePreview");
        if (preview) {
          preview.remove();
        }
        window.pendingFile = null;
      }

      function uploadFile() {
        if (!window.pendingFile || !currentChatTeam) return;

        const caption = document.getElementById("fileCaption").value.trim();
        const sendButton = document.querySelector("#filePreview .btn-send");

        sendButton.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> Uploading...';
        sendButton.disabled = true;

        // Create FormData for file upload
        const formData = new FormData();
        formData.append("file", window.pendingFile);

        // Upload file first
        fetch("/api/upload", {
          method: "POST",
          credentials: "include",
          body: formData,
        })
          .then((response) => response.json())
          .then((uploadData) => {
            if (uploadData.success) {
              // File uploaded successfully, now send message with file info
              const messageData = {
                content: caption || "",
                teamId: currentChatTeam,
                messageType: "file",
                fileName: uploadData.file.originalName,
                fileType: uploadData.file.mimetype,
                fileSize: uploadData.file.size,
                fileUrl: uploadData.file.url,
                uploadedFile: uploadData.file,
              };

              return fetch("/api/chat/messages", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify(messageData),
              });
            } else {
              throw new Error(uploadData.message || "File upload failed");
            }
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.success && data.message) {
              // Add the returned message to chat immediately
              if (!renderedMessageIds.has(data.message._id)) {
                chatMessages.push(data.message);
                addMessageToChat(data.message);
              }
              document.getElementById("messageInput").value = "";
              cancelFileUpload();
              showSystemMessage("File sent successfully");
            } else if (data.success && data.data && data.data.message) {
              // Fallback for alternative response shape
              const msg = data.data.message;
              if (!renderedMessageIds.has(msg._id)) {
                chatMessages.push(msg);
                addMessageToChat(msg);
              }
              document.getElementById("messageInput").value = "";
              cancelFileUpload();
              showSystemMessage("File sent successfully");
            } else {
              throw new Error(data.message || "Failed to send file");
            }
          })
          .catch((error) => {
            console.error("Error uploading file:", error);
            showSystemMessage("Failed to upload file");
            sendButton.innerHTML = "Send";
            sendButton.disabled = false;
          });
      }

      function getFileIcon(mimeType) {
        if (!mimeType) return "fas fa-file";

        if (mimeType.startsWith("image/")) return "fas fa-image";
        if (mimeType.startsWith("video/")) return "fas fa-video";
        if (mimeType.startsWith("audio/")) return "fas fa-music";
        if (mimeType.includes("pdf")) return "fas fa-file-pdf";
        if (mimeType.includes("word") || mimeType.includes("document"))
          return "fas fa-file-word";
        if (mimeType.includes("excel") || mimeType.includes("spreadsheet"))
          return "fas fa-file-excel";
        if (
          mimeType.includes("powerpoint") ||
          mimeType.includes("presentation")
        )
          return "fas fa-file-powerpoint";
        if (mimeType.includes("text")) return "fas fa-file-alt";
        if (mimeType.includes("zip") || mimeType.includes("archive"))
          return "fas fa-file-archive";

        return "fas fa-file";
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      function downloadFile(url, filename) {
        const link = document.createElement("a");
        link.href = url;
        link.download = filename;
        link.target = "_blank";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }

      function openFileInNewTab(url) {
        window.open(url, "_blank");
      }

      function updateOnlineCountDisplay(count) {
        const onlineCountEl = document.getElementById("onlineCount");
        if (onlineCountEl) {
          onlineCountEl.textContent = count;
          console.log(
            `Updated online count display: ${count} for team: ${currentChatTeam}`
          );
        } else {
          console.error("Online count element not found!");
        }
      }

      function showSystemMessage(message) {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        const systemElement = document.createElement("div");
        systemElement.className = "system-message";
        systemElement.innerHTML = `<span>${escapeHtml(message)}</span>`;

        chatMessagesContainer.appendChild(systemElement);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      async function updateProfile(event) {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);
        const profileData = {
          firstName: formData.get("firstName"),
          lastName: formData.get("lastName"),
          phone: formData.get("phone"),
          bio: formData.get("bio"),
        };

        try {
          const response = await fetch("/api/member/profile", {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(profileData),
          });

          if (response.ok) {
            const updatedProfile = await response.json();
            showNotification("Profile updated successfully!", "success");

            // Update the user display in the sidebar
            const userName = document.getElementById("userName");
            if (userName) {
              userName.textContent = `${updatedProfile.firstName} ${updatedProfile.lastName}`;
            }

            const userAvatar = document.getElementById("userAvatar");
            if (userAvatar && updatedProfile.firstName) {
              userAvatar.textContent = updatedProfile.firstName
                .charAt(0)
                .toUpperCase();
            }
          } else {
            throw new Error("Failed to update profile");
          }
        } catch (error) {
          console.error("Error updating profile:", error);
          showNotification("Failed to update profile", "error");
        }
      }

      // Notification system
      function showNotification(message, type = "info") {
        const notification = document.createElement("div");
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-${
                      type === "success"
                        ? "check-circle"
                        : type === "error"
                        ? "exclamation-circle"
                        : "info-circle"
                    }"></i>
                    <span>${message}</span>
                </div>
                <button class="notification-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;

        // Add notification styles if not already present
        if (!document.getElementById("notification-styles")) {
          const styles = document.createElement("style");
          styles.id = "notification-styles";
          styles.textContent = `
                    .notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        min-width: 300px;
                        max-width: 500px;
                        padding: 16px;
                        border-radius: 12px;
                        color: white;
                        z-index: 10000;
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
                        animation: slideInRight 0.3s ease-out;
                        font-weight: 500;
                        border: 1px solid rgba(255, 255, 255, 0.2);
                    }
                    
                    .notification-success {
                        background: var(--success-gradient);
                        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
                    }
                    
                    .notification-error {
                        background: var(--danger-gradient);
                        box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
                    }
                    
                    .notification-info {
                        background: var(--primary-gradient);
                        box-shadow: 0 8px 25px rgba(30, 64, 175, 0.3);
                    }
                    
                    .notification-content {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        flex: 1;
                    }
                    
                    .notification-content i {
                        font-size: 1.2rem;
                        min-width: 20px;
                    }
                    
                    .notification-content span {
                        font-size: 0.95rem;
                        line-height: 1.4;
                    }
                    
                    .notification-close {
                        background: none;
                        border: none;
                        color: white;
                        cursor: pointer;
                        padding: 4px;
                        border-radius: 4px;
                        transition: background-color 0.2s;
                    }
                    
                    .notification-close:hover {
                        background: rgba(255, 255, 255, 0.2);
                    }
                    
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                `;
          document.head.appendChild(styles);
        }

        document.body.appendChild(notification);

        // Auto-remove after 5 seconds
        setTimeout(() => {
          if (notification.parentElement) {
            notification.remove();
          }
        }, 5000);
      }

      // Team Invitation Functions
      async function loadInvitations() {
        try {
          const response = await fetch(
            `/api/invitations/my-invitations?t=${Date.now()}`,
            {
              credentials: "include",
              cache: "no-cache",
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            }
          );

          if (response.ok) {
            const data = await response.json();
            console.log("My invitations loaded:", data);
            displayInvitations(data.invitations);
          } else {
            console.error("Failed to load invitations");
          }
        } catch (error) {
          console.error("Error loading invitations:", error);
        }
      }

      function displayInvitations(invitations) {
        const container = document.getElementById("invitations-container");
        const listElement = document.getElementById("invitations-list");

        if (!invitations || invitations.length === 0) {
          container.style.display = "none";
          return;
        }

        container.style.display = "block";
        listElement.innerHTML = invitations
          .map(
            (invitation) => `
                <div class="invitation-card">
                    <div class="invitation-header">
                        <div class="invitation-info">
                            <h4>${escapeHtml(invitation.team.name)}</h4>
                            <div class="invitation-from">
                                Invited by ${escapeHtml(
                                  invitation.invitedBy.name
                                )}
                            </div>
                        </div>
                        <div class="invitation-actions">
                            <button class="btn-accept" onclick="respondToInvitation('${
                              invitation._id
                            }', 'accept')">
                                Accept
                            </button>
                            <button class="btn-reject" onclick="respondToInvitation('${
                              invitation._id
                            }', 'reject')">
                                Reject
                            </button>
                        </div>
                    </div>
                    ${
                      invitation.message
                        ? `<p>${escapeHtml(invitation.message)}</p>`
                        : ""
                    }
                </div>
            `
          )
          .join("");
      }

      async function respondToInvitation(invitationId, response) {
        try {
          const res = await fetch("/api/invitations/respond", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ invitationId, response }),
          });

          const data = await res.json();

          if (res.ok) {
            showNotification(data.message, "success");
            loadInvitations(); // Refresh invitations
            loadMemberStats(); // Refresh stats
            loadTeams(); // Refresh teams if accepted
          } else {
            showNotification(
              data.message || "Failed to respond to invitation",
              "error"
            );
          }
        } catch (error) {
          console.error("Error responding to invitation:", error);
          showNotification("Failed to respond to invitation", "error");
        }
      }

      // Tab switching function
      function switchRequestTab(tabName) {
        // Update tab buttons
        document
          .querySelectorAll(".tab-btn")
          .forEach((btn) => btn.classList.remove("active"));
        document
          .querySelectorAll(".tab-content")
          .forEach((content) => content.classList.remove("active"));

        // Activate selected tab
        event.target.classList.add("active");
        document
          .getElementById(
            `${tabName}-${tabName === "pending" ? "requests" : "teams"}-tab`
          )
          .classList.add("active");

        // Load content based on tab
        if (tabName === "pending") {
          loadPendingRequests();
        } else if (tabName === "available") {
          loadAvailableTeams();
        }
      }

      // Load pending requests function
      async function loadPendingRequests() {
        try {
          const response = await fetch(
            `/api/invitations/my-sent-requests?t=${Date.now()}`,
            {
              credentials: "include",
              cache: "no-cache",
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            }
          );

          if (response.ok) {
            const data = await response.json();
            console.log("Pending requests loaded:", data);
            displayPendingRequests(data.requests || []);
          } else {
            console.error("Failed to load pending requests");
            document.getElementById("pending-requests-list").innerHTML =
              '<p class="text-red-600">Error loading pending requests</p>';
          }
        } catch (error) {
          console.error("Error loading pending requests:", error);
          document.getElementById("pending-requests-list").innerHTML =
            '<p class="text-red-600">Error loading pending requests</p>';
        }
      }

      // Display pending requests function
      function displayPendingRequests(requests) {
        const container = document.getElementById("pending-requests-list");

        if (!requests || requests.length === 0) {
          container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-clock"></i>
                        <h3>No Pending Requests</h3>
                        <p>You haven't sent any team join requests yet</p>
                    </div>
                `;
          return;
        }

        container.innerHTML = requests
          .map(
            (request) => `
                <div class="pending-request-card">
                    <div class="request-header">
                        <div class="request-team-name">${escapeHtml(
                          request.team.name
                        )}</div>
                        <div class="request-status">Pending</div>
                    </div>
                    <div class="request-details">
                        <p><strong>Team Admin:</strong> ${
                          request.invitedUser
                            ? escapeHtml(request.invitedUser.username)
                            : "Unknown"
                        }</p>
                        <p><strong>Requested:</strong> ${new Date(
                          request.createdAt
                        ).toLocaleDateString()}</p>
                        ${
                          request.message
                            ? `<p><strong>Message:</strong> ${escapeHtml(
                                request.message
                              )}</p>`
                            : ""
                        }
                    </div>
                    <div style="margin-top: var(--space-3);">
                        <button class="btn btn-outline btn-sm" onclick="cancelJoinRequest('${
                          request._id
                        }')">
                            <i class="fas fa-times"></i> Cancel Request
                        </button>
                    </div>
                </div>
            `
          )
          .join("");
      }

      // Cancel join request function
      async function cancelJoinRequest(requestId) {
        showModal({
          title: "Cancel Join Request",
          message:
            "Are you sure you want to cancel this join request? This action cannot be undone.",
          type: "warning",
          confirmText: "Cancel Request",
          confirmClass: "btn-danger",
          onConfirm: async () => {
            try {
              const response = await fetch(
                `/api/invitations/${requestId}/cancel`,
                {
                  method: "POST",
                  credentials: "include",
                  headers: {
                    "Content-Type": "application/json",
                  },
                }
              );

              if (response.ok) {
                showNotification("Request cancelled successfully", "success");
                loadPendingRequests(); // Refresh the list
                loadAvailableTeams(); // Refresh available teams
              } else {
                const error = await response.json();
                showNotification(
                  error.message || "Failed to cancel request",
                  "error"
                );
              }
            } catch (error) {
              console.error("Error cancelling request:", error);
              showNotification("Failed to cancel request", "error");
            }
          },
        });
      }

      async function loadAvailableTeams() {
        try {
          const response = await fetch(
            `/api/invitations/available-teams?t=${Date.now()}`,
            {
              credentials: "include",
              cache: "no-cache",
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            }
          );

          if (response.ok) {
            const data = await response.json();
            console.log("Available teams loaded:", data);
            console.log("Teams array:", data.teams);
            if (data.teams && data.teams.length > 0) {
              console.log("First team structure:", data.teams[0]);
            }
            displayAvailableTeams(data.teams);
          } else {
            console.error("Failed to load available teams");
          }
        } catch (error) {
          console.error("Error loading available teams:", error);
        }
      }

      function displayAvailableTeams(teams) {
        const grid = document.getElementById("available-teams-grid");

        if (!teams || teams.length === 0) {
          grid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <h3>No available teams</h3>
                        <p>There are no teams you can join at the moment</p>
                    </div>
                `;
          return;
        }

        grid.innerHTML = teams
          .map(
            (team) => `
                <div class="team-card ${!team.admin ? "team-no-admin" : ""}" ${
              team.admin ? `onclick="requestToJoinTeam('${team._id}')"` : ""
            }>
                    <div class="team-header">
                        <div class="team-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="team-info">
                            <h4>${escapeHtml(team.name)}</h4>
                            <div class="team-meta">
                                ${team.memberCount} members • ${
              team.admin ? escapeHtml(team.admin.username) : "No admin"
            }
                            </div>
                        </div>
                    </div>
                    ${
                      team.description
                        ? `<div class="team-description">${escapeHtml(
                            team.description
                          )}</div>`
                        : ""
                    }
                    ${
                      team.admin
                        ? `<button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); requestToJoinTeam('${team._id}')">
                            <i class="fas fa-plus"></i> Request to Join
                        </button>`
                        : `<button class="btn btn-secondary btn-sm" disabled>
                            <i class="fas fa-exclamation-triangle"></i> No Admin Available
                        </button>`
                    }
                </div>
            `
          )
          .join("");
      }

      let currentTeamId = null;
      let currentModalCallback = null;

      // Universal Modal System
      function showModal(options) {
        const modal = document.getElementById("universalModal");
        const icon = document.getElementById("modalIcon");
        const title = document.getElementById("modalTitle");
        const message = document.getElementById("modalMessage");
        const inputContainer = document.getElementById("modalInput");
        const textInput = document.getElementById("modalTextInput");
        const actions = document.getElementById("modalActions");
        const confirmBtn = document.getElementById("modalConfirmBtn");

        // Set modal content
        title.textContent = options.title || "Confirm Action";
        message.textContent =
          options.message || "Are you sure you want to perform this action?";

        // Set icon and type
        const iconType = options.type || "warning";
        icon.className = `modal-icon ${iconType}`;

        const iconMap = {
          warning: "fas fa-exclamation-triangle",
          danger: "fas fa-exclamation-circle",
          info: "fas fa-info-circle",
          question: "fas fa-question-circle",
        };

        icon.innerHTML = `<i class="${
          iconMap[iconType] || iconMap.warning
        }"></i>`;

        // Handle input field
        if (options.input) {
          inputContainer.style.display = "block";
          textInput.placeholder =
            options.inputPlaceholder || "Enter your message...";
          textInput.value = options.inputValue || "";
        } else {
          inputContainer.style.display = "none";
        }

        // Set button text and style
        confirmBtn.textContent = options.confirmText || "Confirm";
        confirmBtn.className = `btn ${options.confirmClass || "btn-primary"}`;

        // Center actions if only confirm button
        if (options.hideCancel) {
          actions.classList.add("center");
          actions.querySelector(".btn-secondary").style.display = "none";
        } else {
          actions.classList.remove("center");
          actions.querySelector(".btn-secondary").style.display = "block";
        }

        // Store callback
        currentModalCallback = options.onConfirm;

        // Show modal
        modal.classList.add("show");

        // Focus appropriate element
        if (options.input) {
          setTimeout(() => textInput.focus(), 100);
        } else {
          setTimeout(() => confirmBtn.focus(), 100);
        }

        // Close modal when clicking outside
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            closeUniversalModal();
          }
        });

        // Close modal with Escape key
        document.addEventListener("keydown", handleUniversalModalKeydown);
      }

      function closeUniversalModal() {
        const modal = document.getElementById("universalModal");
        const textInput = document.getElementById("modalTextInput");
        modal.classList.remove("show");
        textInput.value = "";
        currentModalCallback = null;
        document.removeEventListener("keydown", handleUniversalModalKeydown);
      }

      function handleUniversalModalKeydown(e) {
        if (e.key === "Escape") {
          closeUniversalModal();
        } else if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
          confirmModalAction();
        }
      }

      function confirmModalAction() {
        if (currentModalCallback) {
          const textInput = document.getElementById("modalTextInput");
          const inputValue =
            textInput.style.display !== "none" ? textInput.value : null;
          currentModalCallback(inputValue);
        }
        closeUniversalModal();
      }

      // Enhanced confirm dialog
      function customConfirm(options) {
        return new Promise((resolve) => {
          showModal({
            title: options.title || "Confirm Action",
            message: options.message || "Are you sure?",
            type: options.type || "warning",
            confirmText: options.confirmText || "Confirm",
            confirmClass: options.confirmClass || "btn-primary",
            onConfirm: () => resolve(true),
          });

          // Handle cancel
          const modal = document.getElementById("universalModal");
          const cancelHandler = () => {
            resolve(false);
            modal.removeEventListener("click", cancelHandler);
          };

          setTimeout(() => {
            modal.addEventListener("click", (e) => {
              if (e.target === modal) {
                resolve(false);
              }
            });
          }, 100);
        });
      }

      // Convenience functions for common dialogs
      function showAlert(title, message, type = "info") {
        showModal({
          title: title,
          message: message,
          type: type,
          hideCancel: true,
          confirmText: "OK",
          confirmClass: type === "danger" ? "btn-danger" : "btn-primary",
          onConfirm: () => {},
        });
      }

      function showConfirm(title, message, callback, options = {}) {
        showModal({
          title: title,
          message: message,
          type: options.type || "warning",
          confirmText: options.confirmText || "Confirm",
          confirmClass: options.confirmClass || "btn-primary",
          onConfirm: callback,
        });
      }

      function showPrompt(title, message, callback, options = {}) {
        showModal({
          title: title,
          message: message,
          type: options.type || "info",
          input: true,
          inputPlaceholder: options.placeholder || "Enter your response...",
          inputValue: options.defaultValue || "",
          confirmText: options.confirmText || "Submit",
          confirmClass: options.confirmClass || "btn-primary",
          onConfirm: callback,
        });
      }

      async function requestToJoinTeam(teamId) {
        currentTeamId = teamId;
        showMessageModal();
      }

      function showMessageModal() {
        const modal = document.getElementById("messageModal");
        const input = document.getElementById("messageInput");
        modal.classList.add("show");
        input.focus();

        // Close modal when clicking outside
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            closeMessageModal();
          }
        });

        // Close modal with Escape key
        document.addEventListener("keydown", handleModalKeydown);
      }

      function closeMessageModal() {
        const modal = document.getElementById("messageModal");
        const input = document.getElementById("messageInput");
        modal.classList.remove("show");
        input.value = "";
        currentTeamId = null;
        document.removeEventListener("keydown", handleModalKeydown);
      }

      function handleModalKeydown(e) {
        if (e.key === "Escape") {
          closeMessageModal();
        }
      }

      async function submitJoinRequest() {
        if (!currentTeamId) return;

        try {
          const messageInput = document.getElementById("messageInput");
          const message = messageInput.value.trim();

          const res = await fetch("/api/invitations/send-request", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ teamId: currentTeamId, message }),
          });

          const data = await res.json();

          closeMessageModal();

          if (res.ok) {
            showNotification(data.message, "success");
            loadAvailableTeams(); // Refresh available teams
          } else {
            showNotification(
              data.message || "Failed to send join request",
              "error"
            );
          }
        } catch (error) {
          console.error("Error sending join request:", error);
          closeMessageModal();
          showNotification("Failed to send join request", "error");
        }
      }

      // Socket event handlers for real-time invitations
      function setupInvitationSocketEvents() {
        if (!memberSocket) return;

        memberSocket.on("team_invitation_received", (data) => {
          showNotification(
            `You received an invitation to join "${data.teamName}" from ${data.inviterName}`,
            "info"
          );
          loadInvitations(); // Refresh invitations
        });

        memberSocket.on("invitation_response", (data) => {
          const status = data.response === "accept" ? "accepted" : "rejected";
          showNotification(
            `Your join request for "${data.teamName}" was ${status}`,
            data.response === "accept" ? "success" : "warning"
          );
          loadAvailableTeams(); // Refresh available teams
        });
      }
    </script>

    <!-- Message Modal -->
    <div id="messageModal" class="message-modal">
      <div class="message-modal-content">
        <div class="message-modal-header">
          <h3>Join Team Request</h3>
          <p>
            Send an optional message to the team admin with your join request.
          </p>
        </div>
        <textarea
          id="messageInput"
          class="message-input"
          placeholder="Hi! I'd like to join your team. I have experience in..."
        ></textarea>
        <div class="message-modal-actions">
          <button
            type="button"
            class="btn btn-secondary"
            onclick="closeMessageModal()"
          >
            Cancel
          </button>
          <button
            type="button"
            class="btn btn-primary"
            onclick="submitJoinRequest()"
          >
            <i class="fas fa-paper-plane"></i>
            Send Request
          </button>
        </div>
      </div>
    </div>

    <!-- Universal Modal -->
    <div id="universalModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <div id="modalIcon" class="modal-icon warning">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <h3 id="modalTitle">Confirm Action</h3>
          <p id="modalMessage">Are you sure you want to perform this action?</p>
        </div>
        <div
          id="modalInput"
          class="modal-input-container"
          style="display: none"
        >
          <textarea
            id="modalTextInput"
            class="modal-input"
            placeholder="Enter your message..."
          ></textarea>
        </div>
        <div id="modalActions" class="modal-actions">
          <button
            type="button"
            class="btn btn-secondary"
            onclick="closeUniversalModal()"
          >
            Cancel
          </button>
          <button
            type="button"
            id="modalConfirmBtn"
            class="btn btn-primary"
            onclick="confirmModalAction()"
          >
            Confirm
          </button>
        </div>
      </div>
    </div>
  </body>
</html>

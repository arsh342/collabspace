<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Organiser Dashboard - CollabSpace</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />

    <style>
      :root {
        /* CollabSpace Brand Colors */
        --primary: #1e40af;
        --primary-light: #3b82f6;
        --primary-dark: #1d4ed8;
        --primary-50: #eff6ff;
        --primary-100: #dbeafe;
        --primary-500: #3b82f6;
        --primary-600: #2563eb;
        --primary-700: #1d4ed8;
        --primary-800: #1e40af;
        --primary-900: #1e3a8a;

        /* Accent Colors */
        --accent: #06b6d4;
        --accent-light: #22d3ee;
        --accent-dark: #0891b2;

        /* Status Colors */
        --success: #10b981;
        --success-light: #34d399;
        --success-dark: #059669;
        --warning: #f59e0b;
        --warning-light: #fbbf24;
        --warning-dark: #d97706;
        --danger: #ef4444;
        --danger-light: #f87171;
        --danger-dark: #dc2626;

        /* Gradients */
        --primary-gradient: linear-gradient(
          135deg,
          #1e40af 0%,
          #3b82f6 50%,
          #06b6d4 100%
        );
        --secondary-gradient: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        --success-gradient: linear-gradient(135deg, #10b981 0%, #34d399 100%);
        --warning-gradient: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);
        --danger-gradient: linear-gradient(135deg, #ef4444 0%, #f87171 100%);
        --accent-gradient: linear-gradient(135deg, #06b6d4 0%, #22d3ee 100%);

        /* Neutral Colors */
        --white: #ffffff;
        --gray-50: #f8fafc;
        --gray-100: #f1f5f9;
        --gray-200: #e2e8f0;
        --gray-300: #cbd5e1;
        --gray-400: #94a3b8;
        --gray-500: #64748b;
        --gray-600: #475569;
        --gray-700: #334155;
        --gray-800: #1e293b;
        --gray-900: #0f172a;

        /* Shadows */
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
          0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
          0 10px 10px -5px rgba(0, 0, 0, 0.04);
        --shadow-2xl: 0 25px 50px -12px rgba(30, 64, 175, 0.15);
        --shadow-colored: 0 25px 50px -12px rgba(30, 64, 175, 0.25);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI",
          sans-serif;
        background: var(--primary-gradient);
        background-attachment: fixed;
        background-size: 400% 400%;
        animation: gradientShift 15s ease infinite;
        color: var(--gray-900);
        line-height: 1.6;
        min-height: 100vh;
      }

      @keyframes gradientShift {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      /* Sidebar */
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 320px;
        height: 100vh;
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(20px);
        border-right: 1px solid var(--primary-200);
        padding: 32px 24px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: var(--shadow-colored);
      }

      .logo {
        display: flex;
        align-items: center;
        margin-bottom: 40px;
        padding-bottom: 24px;
        border-bottom: 2px solid var(--primary-100);
      }

      .logo svg {
        margin-right: 12px;
        filter: drop-shadow(0 2px 4px rgba(30, 64, 175, 0.2));
        transition: all 0.3s ease;
      }

      .logo:hover svg {
        transform: scale(1.05);
        filter: drop-shadow(0 4px 8px rgba(30, 64, 175, 0.3));
      }

      .logo h1 {
        font-size: 24px;
        font-weight: 900;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .user-profile {
        background: var(--primary-gradient);
        border-radius: 24px;
        padding: 24px;
        margin-bottom: 32px;
        color: white;
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
      }

      .user-profile::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="50" height="50" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        opacity: 0.3;
        pointer-events: none;
      }

      .user-avatar {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 16px;
        border: 3px solid rgba(255, 255, 255, 0.3);
      }

      .user-info h3 {
        font-size: 20px;
        font-weight: 700;
        margin-bottom: 4px;
      }

      .user-role {
        background: rgba(255, 255, 255, 0.2);
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        display: inline-block;
      }

      .nav-menu {
        list-style: none;
      }

      .nav-item {
        margin-bottom: 8px;
      }

      .nav-link {
        display: flex;
        align-items: center;
        padding: 16px 20px;
        color: var(--gray-700);
        text-decoration: none;
        border-radius: 16px;
        font-weight: 500;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }

      .nav-link::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--primary-gradient);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: -1;
      }

      .nav-link:hover::before,
      .nav-link.active::before {
        opacity: 1;
      }

      .nav-link:hover,
      .nav-link.active {
        color: white;
        transform: translateX(8px);
        box-shadow: var(--shadow-lg);
      }

      .nav-link i {
        margin-right: 16px;
        width: 24px;
        font-size: 18px;
        text-align: center;
      }

      /* Main Content */
      .main-content {
        margin-left: 320px;
        padding: 32px;
        min-height: 100vh;
      }

      .dashboard-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 20px;
        margin-bottom: 24px;
        box-shadow: var(--shadow-xl);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .header-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
      }

      .dashboard-title {
        font-size: 28px;
        font-weight: 800;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 4px;
      }

      .dashboard-subtitle {
        font-size: 14px;
        color: var(--gray-600);
        font-weight: 500;
      }

      .header-actions {
        display: flex;
        gap: 16px;
      }

      .btn {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
      }

      .btn-primary {
        background: var(--primary-gradient);
        color: white;
        box-shadow: var(--shadow-lg);
      }

      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-xl);
      }

      .btn-secondary {
        background: white;
        color: var(--gray-700);
        border: 2px solid var(--gray-200);
      }

      .btn-secondary:hover {
        border-color: var(--primary);
        color: var(--primary);
        transform: translateY(-1px);
      }

      .btn-danger {
        background: linear-gradient(135deg, #dc2626, #ef4444);
        color: white;
        border: 2px solid #dc2626;
        box-shadow: 0 4px 6px rgba(220, 38, 38, 0.2);
      }

      .btn-danger:hover {
        background: linear-gradient(135deg, #b91c1c, #dc2626);
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(220, 38, 38, 0.3);
      }

      .btn-success {
        background: var(--success-gradient);
        color: white;
        border: none;
        box-shadow: var(--shadow-md);
      }

      .btn-success:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        filter: brightness(1.1);
      }

      .btn-warning {
        background: var(--warning-gradient);
        color: white;
        border: none;
        box-shadow: var(--shadow-md);
      }

      .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        filter: brightness(1.1);
      }

      .btn-danger {
        background: var(--danger-gradient);
        color: white;
        border: none;
        box-shadow: var(--shadow-md);
      }

      .btn-danger:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        filter: brightness(1.1);
      }

      .btn-accent {
        background: var(--accent-gradient);
        color: white;
        border: none;
        box-shadow: var(--shadow-md);
      }

      .btn-accent:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        filter: brightness(1.1);
      }

      /* Stats Grid */
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 24px;
        margin-bottom: 40px;
      }

      .stat-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 32px;
        box-shadow: var(--shadow-xl);
        border: 1px solid rgba(255, 255, 255, 0.2);
        position: relative;
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .stat-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
      }

      .stat-card.teams::before {
        background: var(--primary-gradient);
      }
      .stat-card.members::before {
        background: var(--success-gradient);
      }
      .stat-card.tasks::before {
        background: var(--warning-gradient);
      }
      .stat-card.completion::before {
        background: var(--secondary-gradient);
      }

      .stat-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-2xl);
      }

      .stat-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 20px;
      }

      .stat-icon {
        width: 64px;
        height: 64px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 28px;
        color: white;
        box-shadow: var(--shadow-lg);
      }

      .stat-icon.teams {
        background: var(--primary-gradient);
      }
      .stat-icon.members {
        background: var(--success-gradient);
      }
      .stat-icon.tasks {
        background: var(--warning-gradient);
      }
      .stat-icon.completion {
        background: var(--secondary-gradient);
      }

      .stat-value {
        font-size: 48px;
        font-weight: 900;
        line-height: 1;
        margin-bottom: 8px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        color: var(
          --primary
        ); /* Fallback color for browsers that don't support gradient text */
        transition: all 0.3s ease;
      }

      /* Ensure text is visible in all browsers */
      @supports not (-webkit-background-clip: text) {
        .stat-value {
          -webkit-text-fill-color: initial;
          background: none;
          color: var(--primary);
        }
      }

      .stat-value.stat-updating {
        transform: scale(0.95);
        opacity: 0.7;
      }

      .stat-value.stat-updated {
        transform: scale(1.05);
        filter: brightness(1.2);
      }

      .stat-label {
        font-size: 16px;
        font-weight: 600;
        color: var(--gray-600);
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      /* Content Sections */
      .content-section {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 32px;
        margin-bottom: 32px;
        box-shadow: var(--shadow-xl);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        padding-bottom: 16px;
        border-bottom: 2px solid var(--gray-100);
      }

      .section-title {
        font-size: 24px;
        font-weight: 800;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      /* Quick Actions */
      .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
      }

      .action-card {
        background: rgba(255, 255, 255, 0.8);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 20px;
        padding: 32px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        text-decoration: none;
        color: inherit;
        position: relative;
        overflow: hidden;
      }

      .action-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--primary-gradient);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: -1;
      }

      .action-card:hover::before {
        opacity: 0.1;
      }

      .action-card:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: var(--shadow-2xl);
        border-color: transparent;
      }

      .action-icon {
        width: 80px;
        height: 80px;
        border-radius: 24px;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 24px;
        font-size: 32px;
        color: white;
        box-shadow: var(--shadow-lg);
      }

      .action-title {
        font-size: 20px;
        font-weight: 700;
        margin-bottom: 12px;
        color: var(--gray-900);
      }

      .action-description {
        font-size: 16px;
        color: var(--gray-600);
        line-height: 1.6;
      }

      /* Teams Grid */
      .teams-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 24px;
      }

      .team-card {
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 20px;
        padding: 24px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }

      .team-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--primary-gradient);
      }

      .team-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-2xl);
        border-color: transparent;
      }

      .team-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 16px;
      }

      .team-name {
        font-size: 20px;
        font-weight: 700;
        color: var(--gray-900);
        margin-bottom: 0; /* Remove bottom margin since we have gap in flex */
        flex: 1; /* Allow team name to take available space */
        min-width: 0; /* Allow text to truncate if needed */
      }

      .team-description {
        color: var(--gray-600);
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 16px;
      }

      .team-stats {
        display: flex;
        gap: 16px;
        margin-bottom: 20px;
      }

      .team-stat {
        text-align: center;
      }

      .team-stat-value {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary);
        display: block;
      }

      .team-stat-label {
        font-size: 12px;
        color: var(--gray-500);
        text-transform: uppercase;
        font-weight: 500;
      }

      .team-actions {
        display: flex;
        gap: 8px;
      }

      .btn-sm {
        padding: 8px 16px;
        font-size: 12px;
        border-radius: 8px;
      }

      /* Modals */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        z-index: 9999;
        align-items: center;
        justify-content: center;
      }

      .modal.active {
        display: flex;
      }

      .modal-content {
        background: white;
        border-radius: 24px;
        padding: 32px;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: var(--shadow-2xl);
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 2px solid var(--gray-100);
      }

      .modal-title {
        font-size: 24px;
        font-weight: 700;
        color: var(--gray-900);
      }

      .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: var(--gray-400);
        padding: 8px;
        border-radius: 8px;
        transition: all 0.2s ease;
      }

      .close-modal:hover {
        background: var(--gray-100);
        color: var(--gray-600);
      }

      /* Forms */
      .form-group {
        margin-bottom: 24px;
      }

      .form-label {
        display: block;
        font-weight: 600;
        color: var(--gray-700);
        margin-bottom: 8px;
      }

      .form-input,
      .form-select,
      .form-textarea {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--gray-200);
        border-radius: 12px;
        font-size: 16px;
        transition: all 0.2s ease;
        background: white;
      }

      .form-input:focus,
      .form-select:focus,
      .form-textarea:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
      }

      .form-input[readonly],
      .form-select[readonly] {
        background: #f8fafc;
        color: #64748b;
        border-color: #e2e8f0;
        cursor: not-allowed;
      }

      .form-input[readonly]:focus,
      .form-select[readonly]:focus {
        border-color: #e2e8f0;
        box-shadow: none;
      }

      .form-textarea {
        resize: vertical;
        min-height: 100px;
      }

      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
      }

      /* Loading States */
      .loading {
        display: inline-flex;
        align-items: center;
        gap: 8px;
      }

      .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      /* Wide Modals */
      .modal-wide {
        max-width: 900px;
        width: 95%;
      }

      /* Team Details Modal */
      .team-details-card {
        padding: 0;
      }

      .team-basic-info {
        margin-bottom: 32px;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 24px;
        border-radius: 16px;
        border: 1px solid #e2e8f0;
      }

      .team-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 16px;
        gap: 16px;
      }

      .team-header h4 {
        font-size: 32px;
        font-weight: 700;
        color: #1a202c;
        margin: 0;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        flex: 1;
      }

      .team-index-badge {
        background: linear-gradient(135deg, #f8fafc, #e2e8f0);
        color: #000000 !important;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        white-space: nowrap;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid #cbd5e0;
      }

      .team-description {
        color: #4a5568;
        font-size: 16px;
        line-height: 1.7;
        margin: 16px 0;
        padding: 16px;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 12px;
        border-left: 4px solid var(--primary);
        font-weight: 500;
      }

      .team-meta {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        align-items: center;
      }
      .visibility-badge,
      .category-badge {
        padding: 8px 16px;
        border-radius: 12px;
        font-size: 13px;
        font-weight: 600;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .visibility-badge.private {
        background: linear-gradient(135deg, #fed7d7, #feb2b2);
        color: #c53030;
        border: 1px solid #fc8181;
      }

      .visibility-badge.public {
        background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
        color: #2f855a;
        border: 1px solid #68d391;
      }

      .category-badge {
        background: linear-gradient(135deg, #bee3f8, #90cdf4);
        color: #2c5282;
        border: 1px solid #63b3ed;
      }

      /* Join Requests */
      .badge {
        background: var(--warning-gradient);
        color: white;
        font-size: 12px;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 12px;
        margin-left: 8px;
      }

      .join-request-card {
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        padding: 16px;
        margin-bottom: 12px;
        border-left: 4px solid var(--secondary-gradient);
      }

      .request-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
      }

      .request-info h4 {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
        color: var(--text-primary);
      }

      .request-meta {
        font-size: 14px;
        color: var(--text-secondary);
        margin: 4px 0 0 0;
      }

      .request-actions {
        display: flex;
        gap: 8px;
      }

      .request-message {
        background: rgba(59, 130, 246, 0.1);
        border-radius: 8px;
        padding: 12px;
        margin-top: 12px;
        font-style: italic;
        color: var(--text-secondary);
      }

      .created-date {
        color: #718096;
        font-size: 13px;
        font-weight: 500;
        padding: 6px 12px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 8px;
        border: 1px solid #e2e8f0;
      }

      /* Team Stats Grid */
      .team-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 20px;
        margin-bottom: 32px;
      }

      .stat-card {
        background: linear-gradient(135deg, #ffffff 0%, #f7fafc 100%);
        padding: 24px;
        border-radius: 16px;
        text-align: center;
        border: 2px solid #e2e8f0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
      }

      .stat-value {
        display: block;
        font-size: 28px;
        font-weight: 700;
        color: var(--primary);
        margin-bottom: 8px;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }

      .stat-label {
        color: #4a5568;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      /* Task Management Styles */
      .task-management-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        padding: 24px;
        background: linear-gradient(135deg, #3182ce 0%, #2b77cb 100%);
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(49, 130, 206, 0.3);
      }

      .task-management-header h2 {
        margin: 0;
        color: white;
        font-size: 28px;
        font-weight: 700;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .task-management-header .btn {
        background: rgba(255, 255, 255, 0.2);
        border: 2px solid rgba(255, 255, 255, 0.3);
        color: white;
        backdrop-filter: blur(10px);
        font-weight: 600;
        padding: 12px 24px;
        border-radius: 12px;
        transition: all 0.3s ease;
      }

      .task-management-header .btn:hover {
        background: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.5);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      }

      .task-board {
        display: flex;
        gap: 16px;
        max-height: calc(100vh - 250px);
        overflow-x: auto;
        overflow-y: hidden;
        width: 100%;
        padding-bottom: 8px; /* Space for scrollbar */
      }

      /* Custom scrollbar for task board */
      .task-board::-webkit-scrollbar {
        height: 8px;
      }

      .task-board::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
      }

      .task-board::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
      }

      .task-board::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }

      @media (max-width: 1200px) {
        .task-column {
          min-width: 260px; /* Slightly smaller on medium screens */
        }
      }

      @media (max-width: 768px) {
        .task-column {
          min-width: 240px; /* Even smaller on mobile */
        }

        .task-board {
          gap: 12px;
        }
      }

      .task-column {
        background: linear-gradient(145deg, #f8fafc, #ffffff);
        border-radius: 16px;
        padding: 16px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        display: flex;
        flex-direction: column;
        min-height: 400px;
        max-height: calc(100vh - 300px);
        min-width: 280px; /* Fixed minimum width for each column */
        flex-shrink: 0; /* Prevent columns from shrinking */
      }

      .task-column-header {
        margin-bottom: 16px;
        padding: 12px 16px;
        background: linear-gradient(135deg, #3182ce, #2b77cb);
        border-radius: 12px;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(49, 130, 206, 0.3);
      }

      .task-column-header h3 {
        margin: 0;
        color: white;
        font-size: 14px;
        font-weight: 700;
        text-align: center;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
      }

      .task-list {
        flex: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding-right: 4px;
      }

      .task-list::-webkit-scrollbar {
        width: 6px;
      }

      .task-list::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 3px;
      }

      .task-list::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
      }

      .task-list::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }

      .task-card {
        background: white;
        border-radius: 12px;
        padding: 16px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        transition: all 0.2s ease;
        cursor: pointer;
        position: relative;
      }

      .task-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        border-color: #3182ce;
      }

      .task-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 16px;
        gap: 12px;
      }

      .task-title {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
        color: #2d3748;
        line-height: 1.4;
        flex: 1;
      }

      .task-priority {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: 700;
        color: white;
        text-align: center;
        min-width: 70px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .task-description {
        margin: 0 0 16px 0;
        font-size: 14px;
        color: #4a5568;
        line-height: 1.5;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        background: #f8fafc;
        padding: 12px;
        border-radius: 8px;
        border-left: 3px solid #e2e8f0;
      }

      .task-meta {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 16px;
        font-size: 13px;
      }

      .task-meta > div {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 0;
      }

      .task-meta i {
        width: 16px;
        height: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #718096;
        font-size: 12px;
      }

      .task-team {
        color: #3182ce;
        font-weight: 600;
      }

      .task-assignee {
        color: #38a169;
        font-weight: 500;
      }

      .task-due-date {
        color: #d69e2e;
        font-weight: 500;
      }

      .task-actions {
        display: flex;
        gap: 10px;
        padding-top: 16px;
        border-top: 1px solid #f1f5f9;
      }

      .task-actions .btn {
        flex: 1;
        font-size: 13px;
        padding: 10px 16px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.2s ease;
      }

      .task-actions .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .btn-outline {
        background: white;
        border: 2px solid #e2e8f0;
        color: #4a5568;
      }

      .btn-outline:hover {
        border-color: #3182ce;
        color: #3182ce;
        background: #ebf8ff;
      }

      .btn-edit {
        background: #f0fff4;
        border: 2px solid #68d391;
        color: #2f855a;
      }

      .btn-edit:hover {
        background: #68d391;
        color: white;
        border-color: #48bb78;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(72, 187, 120, 0.3);
      }

      .btn-delete {
        background: #fff5f5;
        border: 2px solid #fc8181;
        color: #c53030;
      }

      .btn-delete:hover {
        background: #fc8181;
        color: white;
        border-color: #e53e3e;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(229, 62, 62, 0.3);
      }

      .error-state,
      .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #718096;
      }

      .error-state i,
      .empty-state i {
        font-size: 48px;
        color: #cbd5e0;
        margin-bottom: 16px;
      }

      .error-state h3,
      .empty-state h3 {
        margin: 0 0 8px 0;
        color: #4a5568;
      }

      .error-state p,
      .empty-state p {
        margin: 0 0 24px 0;
      }

      .empty-state .btn {
        padding: 12px 24px;
        font-size: 14px;
        font-weight: 600;
        max-width: 200px;
        margin: 0 auto;
      }

      .loading-state {
        text-align: center;
        padding: 60px 20px;
        color: #718096;
      }

      .loading-state .spinner {
        margin: 0 auto 16px auto;
      }

      /* Team Sections */
      .team-sections {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 32px;
        margin-bottom: 32px;
      }

      .section {
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        border: 2px solid #e2e8f0;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }

      .section-title {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 18px;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 16px;
        text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
      }

      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
      }

      /* Members List */
      .members-list,
      .current-members-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .member-item,
      .manageable-member-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--gray-50);
        border-radius: 12px;
        border: 1px solid var(--gray-200);
      }

      .member-avatar {
        width: 40px;
        height: 40px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
      }

      .member-info {
        flex: 1;
      }

      .member-name {
        font-weight: 600;
        color: var(--gray-900);
        margin-bottom: 2px;
      }

      .member-email {
        font-size: 12px;
        color: var(--gray-500);
      }

      .member-role {
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
      }

      .member-role.admin {
        background: var(--yellow-100);
        color: var(--yellow-700);
      }

      .member-role.member {
        background: var(--blue-100);
        color: var(--blue-700);
      }

      .member-actions {
        display: flex;
        gap: 8px;
      }

      .admin-badge {
        color: var(--yellow-600);
        font-size: 11px;
        font-weight: 600;
      }

      /* Tasks List */
      .tasks-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .task-item {
        padding: 12px;
        background: var(--gray-50);
        border-radius: 12px;
        border: 1px solid var(--gray-200);
      }

      .task-title {
        font-weight: 600;
        color: var(--gray-900);
        margin-bottom: 8px;
      }

      .task-meta {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
      }

      .task-status,
      .task-priority,
      .task-due {
        padding: 2px 6px;
        border-radius: 6px;
        font-size: 10px;
        font-weight: 600;
        text-transform: uppercase;
      }

      .task-status.completed {
        background: var(--green-100);
        color: var(--green-700);
        display: inline-flex;
        align-items: center;
        gap: 4px;
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
      }

      .task-status.pending {
        background: var(--yellow-100);
        color: var(--yellow-700);
      }

      .task-priority.high {
        background: var(--red-100);
        color: var(--red-700);
      }

      .task-priority.medium {
        background: var(--blue-100);
        color: var(--blue-700);
      }

      .task-priority.low {
        background: var(--gray-100);
        color: var(--gray-700);
      }

      .task-due {
        background: var(--purple-100);
        color: var(--purple-700);
      }

      /* Empty States */
      .empty-state {
        text-align: center;
        color: var(--gray-500);
        padding: 24px;
        font-style: italic;
      }

      /* Team Actions Footer */
      .team-actions-footer {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        padding-top: 24px;
        border-top: 2px solid var(--gray-100);
      }

      /* Modal Footer */
      .modal-footer {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        padding-top: 24px;
        border-top: 2px solid var(--gray-100);
      }

      /* Warning Message Styles */
      .warning-message {
        display: flex;
        gap: 16px;
        padding: 24px;
        background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        border: 2px solid #fecaca;
        border-radius: 12px;
        margin-bottom: 16px;
      }

      .warning-icon {
        flex-shrink: 0;
      }

      .warning-icon .fas {
        font-size: 24px;
        color: #dc2626;
      }

      .warning-content h4 {
        color: #991b1b;
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 8px 0;
      }

      .warning-content p {
        color: #7f1d1d;
        margin: 0 0 12px 0;
        font-weight: 500;
      }

      .warning-content #deleteTeamName {
        color: #dc2626;
        font-weight: 700;
      }

      .warning-details {
        background: rgba(255, 255, 255, 0.7);
        padding: 16px;
        border-radius: 8px;
        border-left: 4px solid #dc2626;
      }

      .warning-details p {
        margin: 0 0 8px 0;
        font-weight: 600;
        color: #991b1b;
      }

      .warning-details ul {
        margin: 0;
        padding-left: 20px;
        color: #7f1d1d;
      }

      .warning-details li {
        margin-bottom: 4px;
        font-size: 14px;
      }

      /* Add Member Section */
      .add-member-section {
        border-top: 2px solid var(--gray-200);
        margin-top: 24px;
        padding-top: 24px;
      }

      .form-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 16px;
      }

      /* Team Card Numbering */
      .team-title-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        gap: 16px; /* Fixed gap between team name and team index */
      }

      .team-number {
        background: linear-gradient(135deg, #1e40af, #3b82f6);
        color: white;
        padding: 6px 12px;
        border-radius: 16px;
        font-size: 12px;
        font-weight: 600;
        white-space: nowrap;
        border: 2px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 2px 8px rgba(30, 64, 175, 0.3);
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        flex-shrink: 0; /* Prevent the badge from shrinking */
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .modal-wide {
          width: 98%;
          margin: 16px;
        }

        .team-sections {
          grid-template-columns: 1fr;
          gap: 24px;
        }

        .team-stats-grid {
          grid-template-columns: repeat(2, 1fr);
        }

        .team-title-row {
          flex-direction: column;
          align-items: flex-start;
          gap: 8px;
        }

        .form-row {
          grid-template-columns: 1fr;
        }

        .team-actions-footer,
        .modal-footer {
          flex-direction: column;
        }
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
          transition: transform 0.3s ease;
        }

        .sidebar.mobile-open {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
          padding: 16px;
        }

        .stats-grid {
          grid-template-columns: 1fr;
        }

        .actions-grid {
          grid-template-columns: 1fr;
        }

        .teams-grid {
          grid-template-columns: 1fr;
        }

        .form-row {
          grid-template-columns: 1fr;
        }

        .dashboard-title {
          font-size: 28px;
        }

        .header-actions {
          flex-direction: column;
          gap: 8px;
        }
      }

      /* Notification Toast */
      .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .notification {
        background: white;
        border-radius: 12px;
        padding: 16px 20px;
        box-shadow: var(--shadow-xl);
        border-left: 4px solid var(--primary);
        transform: translateX(100%);
        opacity: 0;
        transition: all 0.3s ease;
        max-width: 400px;
      }

      .notification.show {
        transform: translateX(0);
        opacity: 1;
      }

      .notification-success {
        border-left-color: var(--success);
      }
      .notification-warning {
        border-left-color: var(--warning);
      }
      .notification-error {
        border-left-color: var(--danger);
      }

      /* Empty State */
      .empty-state {
        text-align: center;
        padding: 48px 24px;
        color: var(--gray-500);
      }

      .empty-state i {
        font-size: 64px;
        margin-bottom: 16px;
        color: var(--gray-300);
      }

      .empty-state h3 {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 8px;
      }

      .empty-state p {
        font-size: 16px;
        line-height: 1.5;
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <aside class="sidebar">
      <div class="logo">
        <svg
          width="32"
          height="32"
          viewBox="0 0 100 100"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <defs>
            <linearGradient
              id="dashboardLogoGradient1"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" style="stop-color: #1e40af" />
              <stop offset="50%" style="stop-color: #3b82f6" />
              <stop offset="100%" style="stop-color: #06b6d4" />
            </linearGradient>
            <linearGradient
              id="dashboardLogoGradient2"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" style="stop-color: #06b6d4" />
              <stop offset="100%" style="stop-color: #1e40af" />
            </linearGradient>
            <linearGradient
              id="dashboardLogoGradient3"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" style="stop-color: #1e40af" />
              <stop offset="100%" style="stop-color: #1d4ed8" />
            </linearGradient>
          </defs>
          <!-- Outer hexagon -->
          <path
            d="M25 20 L75 20 L90 50 L75 80 L25 80 L10 50 Z"
            fill="url(#dashboardLogoGradient1)"
            opacity="0.9"
          />
          <!-- Inner C shape - top part -->
          <path
            d="M35 30 L65 30 L70 35 L70 45 L50 45 L45 40 L45 35 L35 35 Z"
            fill="white"
          />
          <!-- Inner C shape - bottom part -->
          <path
            d="M35 55 L45 55 L45 60 L50 65 L70 65 L70 55 L65 50 L35 50 Z"
            fill="white"
          />
          <!-- 3D effect - right side -->
          <path
            d="M75 20 L80 15 L80 45 L90 50 L80 55 L80 85 L75 80 L90 50 Z"
            fill="url(#dashboardLogoGradient2)"
            opacity="0.8"
          />
          <!-- 3D effect - bottom -->
          <path
            d="M25 80 L75 80 L80 85 L30 85 L25 80 Z"
            fill="url(#dashboardLogoGradient3)"
            opacity="0.7"
          />
        </svg>
        <h1>CollabSpace</h1>
      </div>

      <div class="user-profile">
        <div class="user-avatar" id="userAvatar">
          <!-- User initials will be inserted here -->
        </div>
        <div class="user-info">
          <h3 id="userName">Loading...</h3>
          <span class="user-role">Team Organiser</span>
        </div>
      </div>

      <nav>
        <ul class="nav-menu">
          <li class="nav-item">
            <a href="#" class="nav-link active" data-section="overview">
              <i class="fas fa-chart-pie"></i>
              Overview
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" data-section="teams">
              <i class="fas fa-users"></i>
              My Teams
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" data-section="tasks">
              <i class="fas fa-tasks"></i>
              Task Management
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" data-section="members">
              <i class="fas fa-user-friends"></i>
              Members
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" data-section="settings">
              <i class="fas fa-cog"></i>
              Settings
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" data-section="chat">
              <i class="fas fa-comments"></i>
              Team Chat
            </a>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link" onclick="logout()">
              <i class="fas fa-sign-out-alt"></i>
              Logout
            </a>
          </li>
        </ul>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
      <!-- Dashboard Header -->
      <div class="dashboard-header">
        <div class="header-top">
          <div>
            <h1 class="dashboard-title">Dashboard Overview</h1>
            <p class="dashboard-subtitle">
              Manage your teams and track performance
            </p>
          </div>
          <div class="header-actions">
            <button class="btn btn-secondary" onclick="refreshDashboard()">
              <i class="fas fa-sync-alt"></i>
              Refresh
            </button>
            <button class="btn btn-accent" onclick="exportDashboardData()">
              <i class="fas fa-download"></i>
              Export Data
            </button>
          </div>
        </div>
      </div>

      <!-- Content Sections -->
      <div id="overview-section" class="content-section">
        <!-- Stats Grid -->
        <div class="stats-grid">
          <div class="stat-card teams">
            <div class="stat-header">
              <div class="stat-icon teams">
                <i class="fas fa-users"></i>
              </div>
            </div>
            <div class="stat-value" id="totalTeams">0</div>
            <div class="stat-label">Active Teams</div>
          </div>

          <div class="stat-card members">
            <div class="stat-header">
              <div class="stat-icon members">
                <i class="fas fa-user-friends"></i>
              </div>
            </div>
            <div class="stat-value" id="totalMembers">0</div>
            <div class="stat-label">Team Members</div>
          </div>

          <div class="stat-card tasks">
            <div class="stat-header">
              <div class="stat-icon tasks">
                <i class="fas fa-tasks"></i>
              </div>
            </div>
            <div class="stat-value" id="totalTasks">0</div>
            <div class="stat-label">Active Tasks</div>
          </div>

          <div class="stat-card completion">
            <div class="stat-header">
              <div class="stat-icon completion">
                <i class="fas fa-chart-line"></i>
              </div>
            </div>
            <div class="stat-value" id="completionRate">0%</div>
            <div class="stat-label">Completion Rate</div>
          </div>
        </div>

        <!-- Realtime Status Card -->
        <div
          class="content-section"
          style="
            margin-top: 8px;
            padding: 20px;
            background: linear-gradient(
              135deg,
              rgba(255, 255, 255, 0.92),
              rgba(255, 255, 255, 0.85)
            );
            border: 1px solid var(--primary-100);
            position: relative;
            overflow: hidden;
          "
        >
          <div
            style="
              position: absolute;
              inset: 0;
              background: radial-gradient(
                circle at 85% 20%,
                rgba(30, 64, 175, 0.08),
                transparent 60%
              );
            "
          ></div>
          <div
            style="
              display: flex;
              align-items: flex-start;
              gap: 16px;
              position: relative;
            "
          >
            <div
              style="
                width: 50px;
                height: 50px;
                border-radius: 16px;
                background: var(--success-gradient);
                display: flex;
                align-items: center;
                justify-content: center;
                color: #fff;
                box-shadow: var(--shadow-lg);
                font-size: 22px;
              "
            >
              <i class="fas fa-bolt"></i>
            </div>
            <div style="flex: 1">
              <div class="realtime-container" style="margin-bottom: 6px">
                <h3
                  style="
                    margin: 0;
                    font-size: 18px;
                    font-weight: 800;
                    background: var(--primary-gradient);
                    -webkit-background-clip: text;
                    background-clip: text;
                    -webkit-text-fill-color: transparent;
                  "
                >
                  Realtime Metrics
                </h3>
                <span id="realtimeStatusBadge" class="realtime-badge"
                  >INIT</span
                >
                <span id="realtimeLastUpdated" class="realtime-timestamp"
                  >Waiting for first update...</span
                >
              </div>
              <p
                style="
                  margin: 0 0 10px 0;
                  font-size: 14px;
                  color: var(--gray-600);
                  line-height: 1.55;
                "
              >
                Your dashboard now receives live push updates. Metric cards
                animate when data changes. Occasional background refresh ensures
                consistency if a WebSocket hiccup occurs.
              </p>
              <ul
                style="
                  margin: 0 0 10px 0;
                  padding-left: 18px;
                  font-size: 13px;
                  color: var(--gray-600);
                  line-height: 1.45;
                  columns: 2;
                  column-gap: 28px;
                "
              >
                <li>Team creations</li>
                <li>Task creations</li>
                <li>Task updates</li>
                <li>Task deletions</li>
              </ul>
              <div style="display: flex; gap: 10px; flex-wrap: wrap">
                <button
                  class="btn btn-primary btn-sm"
                  onclick="refreshDashboard()"
                  style="display: inline-flex; align-items: center; gap: 6px"
                >
                  <i class="fas fa-sync-alt"></i> Manual Snapshot
                </button>
                <button
                  class="btn btn-accent btn-sm"
                  onclick="showNotification('Socket status: ' + (organiserSocket && organiserSocket.connected), 'info')"
                  style="display: inline-flex; align-items: center; gap: 6px"
                >
                  <i class="fas fa-signal"></i> Socket Status
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="section-header">
          <h2 class="section-title">Quick Actions</h2>
        </div>
        <div class="actions-grid">
          <div class="action-card" onclick="switchSection('teams')">
            <div class="action-icon">
              <i class="fas fa-users"></i>
            </div>
            <h3 class="action-title">Browse Teams</h3>
            <p class="action-description">
              View all your teams and monitor their current status
            </p>
          </div>

          <div class="action-card" onclick="showTaskManagement()">
            <div class="action-icon">
              <i class="fas fa-clipboard-list"></i>
            </div>
            <h3 class="action-title">Manage Tasks</h3>
            <p class="action-description">
              Create, assign, and track tasks across all your teams
            </p>
          </div>

          <div class="action-card" onclick="switchSection('chat')">
            <div class="action-icon">
              <i class="fas fa-comments"></i>
            </div>
            <h3 class="action-title">Team Chat</h3>
            <p class="action-description">
              Communicate with your team members in real-time
            </p>
          </div>
        </div>
      </div>

      <!-- Teams Section -->
      <div id="teams-section" class="content-section" style="display: none">
        <div class="section-header">
          <h2 class="section-title">My Teams</h2>
          <button class="btn btn-primary" onclick="openCreateTeamModal()">
            <i class="fas fa-plus"></i>
            Create Team
          </button>
        </div>
        <div class="teams-grid" id="teamsGrid">
          <!-- Teams will be loaded here -->
        </div>
      </div>

      <!-- Tasks Section -->
      <div id="tasks-section" class="content-section" style="display: none">
        <div id="tasksContent">
          <!-- Tasks content will be loaded here -->
        </div>
      </div>

      <!-- Members Section -->
      <div id="members-section" class="content-section" style="display: none">
        <div class="section-header">
          <h2 class="section-title">Member Management</h2>
          <button class="btn btn-primary" onclick="openInviteMemberModal()">
            <i class="fas fa-user-plus"></i>
            Invite Member
          </button>
        </div>
        <div id="membersContent">
          <!-- Members content will be loaded here -->
        </div>

        <!-- Join Requests Section -->
        <div id="join-requests-section" style="margin-top: 2rem">
          <div class="section-header">
            <h3 class="section-subtitle">
              <i class="fas fa-user-clock"></i>
              Pending Join Requests
              <span id="requests-count" class="badge" style="display: none"
                >0</span
              >
            </h3>
            <button class="btn btn-outline btn-sm" onclick="loadJoinRequests()">
              <i class="fas fa-sync"></i> Refresh
            </button>
          </div>
          <div id="join-requests-list"></div>
        </div>
      </div>

      <!-- Settings Section -->
      <div id="settings-section" class="content-section" style="display: none">
        <div class="section-header">
          <h2 class="section-title">Settings</h2>
        </div>
        <div id="settingsContent">
          <div class="empty-state">
            <i class="fas fa-cog"></i>
            <h3>Settings Configuration</h3>
            <p>
              Account settings, preferences, and team configurations will be
              available here.
            </p>
          </div>
        </div>
      </div>

      <!-- Chat Section -->
      <div id="chat-section" class="content-section" style="display: block">
        <div class="section-header">
          <h2 class="section-title">Team Chat</h2>
          <div class="chat-controls">
            <select
              id="chatTeamSelect"
              class="form-select"
              style="width: 200px; margin-right: 16px"
            >
              <option value="">Select a team</option>
            </select>
            <div class="online-indicator">
              <span id="onlineCount">0</span> online
            </div>
          </div>
        </div>

        <div
          class="chat-container"
          style="
            height: calc(100vh - 160px);
            display: flex;
            flex-direction: column;
            min-height: 0;
          "
        >
          <div
            class="chat-messages"
            id="chatMessages"
            style="flex: 1; overflow-y: auto"
          >
            <div class="chat-welcome">
              <div class="welcome-icon">
                <i class="fas fa-comments"></i>
              </div>
              <h3>Welcome to Team Chat</h3>
              <p>
                Select a team above to start chatting with your team members
              </p>
            </div>
          </div>

          <div
            class="typing-indicator"
            id="typingIndicator"
            style="display: none"
          >
            <div class="typing-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
            <span class="typing-text">Someone is typing...</span>
          </div>

          <div class="chat-input-container" style="padding-bottom: 8px">
            <div class="chat-input-wrapper">
              <input
                type="text"
                id="messageInput"
                class="chat-input"
                placeholder="Type your message..."
                disabled
              />
              <button id="sendButton" class="send-button" disabled>
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
            <div class="chat-actions">
              <button
                id="attachFileBtn"
                class="chat-action-btn"
                title="Attach file"
              >
                <i class="fas fa-paperclip"></i>
              </button>
              <button id="emojiBtn" class="chat-action-btn" title="Emoji">
                <i class="fas fa-smile"></i>
              </button>
              <input
                type="file"
                id="fileInput"
                style="display: none"
                accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt"
              />
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Create Team Modal -->
    <div id="createTeamModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Create New Team</h3>
          <button class="close-modal" onclick="closeModal('createTeamModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="createTeamForm" onsubmit="createTeam(event)">
          <div class="form-group">
            <label class="form-label">Team Name *</label>
            <input
              type="text"
              class="form-input"
              name="name"
              required
              placeholder="Enter team name"
            />
          </div>
          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea
              class="form-textarea"
              name="description"
              placeholder="Describe your team's purpose and goals"
            ></textarea>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Privacy Setting</label>
              <select class="form-select" name="isPublic">
                <option value="false">Private</option>
                <option value="true">Public</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">Team Tag</label>
              <select class="form-select" name="category">
                <option value="development">Development</option>
                <option value="design">Design</option>
                <option value="marketing">Marketing</option>
                <option value="research">Research</option>
                <option value="general">General</option>
              </select>
            </div>
          </div>
          <div class="form-group">
            <button type="submit" class="btn btn-primary" style="width: 100%">
              <i class="fas fa-plus"></i>
              Create Team
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Create Task Modal -->
    <div id="createTaskModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Create New Task</h3>
          <button class="close-modal" onclick="closeModal('createTaskModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="createTaskForm" onsubmit="createTask(event)">
          <div class="form-group">
            <label class="form-label">Task Title *</label>
            <input
              type="text"
              class="form-input"
              name="title"
              required
              placeholder="Enter task title"
            />
          </div>
          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea
              class="form-textarea"
              name="description"
              placeholder="Describe the task details"
            ></textarea>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Team *</label>
              <select
                class="form-select"
                name="team"
                id="taskTeamSelect"
                required
              >
                <option value="">Select a team</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">Priority</label>
              <select class="form-select" name="priority">
                <option value="low">Low</option>
                <option value="medium" selected>Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Due Date</label>
              <input
                type="date"
                class="form-input"
                name="dueDate"
                id="taskDueDate"
              />
            </div>
            <div class="form-group">
              <label class="form-label">Estimated Hours</label>
              <input
                type="number"
                class="form-input"
                name="estimatedHours"
                min="0"
                max="1000"
                step="0.5"
                placeholder="Hours"
              />
            </div>
          </div>
          <div class="form-group">
            <button type="submit" class="btn btn-primary" style="width: 100%">
              <i class="fas fa-plus"></i>
              Create Task
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Edit Task Modal -->
    <div id="editTaskModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Edit Task</h3>
          <button class="close-modal" onclick="closeModal('editTaskModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="editTaskForm" onsubmit="updateTask(event)">
          <input type="hidden" id="editTaskId" name="taskId" />
          <div class="form-group">
            <label class="form-label">Task Title *</label>
            <input
              type="text"
              class="form-input"
              id="editTaskTitle"
              name="title"
              required
              placeholder="Enter task title"
            />
          </div>
          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea
              class="form-textarea"
              id="editTaskDescription"
              name="description"
              placeholder="Describe the task details"
            ></textarea>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Team *</label>
              <select
                class="form-select"
                id="editTaskTeam"
                name="team"
                required
              >
                <option value="">Select a team</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">Priority</label>
              <select class="form-select" id="editTaskPriority" name="priority">
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Status</label>
              <select class="form-select" id="editTaskStatus" name="status">
                <option value="todo">To Do</option>
                <option value="in_progress">In Progress</option>
                <option value="review">Review</option>
                <option value="completed">Completed</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">Due Date</label>
              <input
                type="date"
                class="form-input"
                id="editTaskDueDate"
                name="dueDate"
              />
            </div>
          </div>
          <div class="form-group">
            <label class="form-label">Estimated Hours</label>
            <input
              type="number"
              class="form-input"
              id="editTaskEstimatedHours"
              name="estimatedHours"
              min="0"
              max="1000"
              step="0.5"
              placeholder="Hours"
            />
          </div>
          <div class="form-group">
            <button type="submit" class="btn btn-primary" style="width: 100%">
              <i class="fas fa-save"></i>
              Update Task
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Invite Member Modal -->
    <div id="inviteMemberModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Invite Team Member</h3>
          <button class="close-modal" onclick="closeModal('inviteMemberModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="inviteMemberForm" onsubmit="inviteMember(event)">
          <div class="form-group">
            <label class="form-label">Email Address *</label>
            <input
              type="email"
              class="form-input"
              name="email"
              required
              placeholder="Enter member's email"
            />
          </div>
          <div class="form-group">
            <label class="form-label">Team *</label>
            <select
              class="form-select"
              name="team"
              id="inviteTeamSelect"
              required
            >
              <option value="">Select a team</option>
            </select>
          </div>
          <div class="form-group">
            <label class="form-label">Role</label>
            <select class="form-select" name="role">
              <option value="member">Member</option>
              <option value="moderator">Moderator</option>
            </select>
          </div>
          <div class="form-group">
            <label class="form-label">Personal Message (Optional)</label>
            <textarea
              class="form-textarea"
              name="message"
              placeholder="Add a personal message to the invitation"
            ></textarea>
          </div>
          <div class="form-group">
            <button type="submit" class="btn btn-primary" style="width: 100%">
              <i class="fas fa-paper-plane"></i>
              Send Invitation
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- View Team Modal -->
    <div id="viewTeamModal" class="modal">
      <div class="modal-content modal-wide">
        <div class="modal-header">
          <h3 class="modal-title">Team Details</h3>
          <button class="close-modal" onclick="closeModal('viewTeamModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="team-details-card">
            <div class="team-basic-info">
              <div class="team-header">
                <h4 id="viewTeamName">Team Name</h4>
              </div>
              <p id="viewTeamDescription" class="team-description">
                Team description will appear here
              </p>
              <div class="team-meta">
                <span id="viewTeamVisibility" class="visibility-badge"
                  >Private</span
                >
                <span id="viewTeamCategory" class="category-badge"
                  >Development</span
                >
                <span id="viewTeamCreated" class="created-date"
                  >Created: Jan 1, 2024</span
                >
              </div>
            </div>

            <div class="team-stats-grid">
              <div class="stat-card">
                <div class="stat-value" id="viewTeamMemberCount">0</div>
                <div class="stat-label">Members</div>
              </div>
              <div class="stat-card">
                <div class="stat-value" id="viewTeamTaskCount">0</div>
                <div class="stat-label">Tasks</div>
              </div>
              <div class="stat-card">
                <div class="stat-value" id="viewTeamCompletedTasks">0</div>
                <div class="stat-label">Completed</div>
              </div>
              <div class="stat-card">
                <div class="stat-value" id="viewTeamPendingTasks">0</div>
                <div class="stat-label">Pending</div>
              </div>
            </div>

            <div class="team-sections">
              <div class="section">
                <h5 class="section-title">
                  <i class="fas fa-users"></i>
                  Team Members
                </h5>
                <div id="viewTeamMembers" class="members-list">
                  <!-- Members will be populated here -->
                </div>
              </div>

              <div class="section">
                <h5 class="section-title">
                  <i class="fas fa-tasks"></i>
                  Recent Tasks
                </h5>
                <div id="viewTeamTasks" class="tasks-list">
                  <!-- Tasks will be populated here -->
                </div>
              </div>
            </div>

            <div class="team-actions-footer">
              <button
                class="btn btn-secondary"
                onclick="closeModal('viewTeamModal'); editTeam(window.currentTeamId);"
              >
                <i class="fas fa-edit"></i>
                Edit Team
              </button>
              <button
                class="btn btn-secondary"
                onclick="closeModal('viewTeamModal'); manageTeamMembers(window.currentTeamId);"
              >
                <i class="fas fa-users"></i>
                Manage Members
              </button>
              <button
                class="btn btn-danger"
                onclick="confirmDeleteTeam(window.currentTeamId);"
              >
                <i class="fas fa-trash"></i>
                Delete Team
              </button>
              <button
                class="btn btn-primary"
                onclick="window.location.href='/chat?team=' + window.currentTeamId"
              >
                <i class="fas fa-comments"></i>
                Team Chat
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Team Modal -->
    <div id="editTeamModal" class="modal">
      <div class="modal-content modal-wide">
        <div class="modal-header">
          <h3 class="modal-title">Edit Team</h3>
          <button class="close-modal" onclick="closeModal('editTeamModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="editTeamForm" onsubmit="updateTeam(event)">
          <div class="modal-body">
            <div class="form-group">
              <label class="form-label">Team Name *</label>
              <input
                type="text"
                class="form-input"
                id="editTeamName"
                name="name"
                required
                placeholder="Enter team name"
              />
            </div>
            <div class="form-group">
              <label class="form-label">Description</label>
              <textarea
                class="form-textarea"
                id="editTeamDescription"
                name="description"
                placeholder="Describe your team's purpose and goals"
              ></textarea>
            </div>
            <div class="form-row">
              <div class="form-group">
                <label class="form-label">Privacy Setting</label>
                <select
                  class="form-select"
                  id="editTeamPrivacy"
                  name="isPublic"
                >
                  <option value="false">Private</option>
                  <option value="true">Public</option>
                </select>
              </div>
              <div class="form-group">
                <label class="form-label">Team Category</label>
                <select
                  class="form-select"
                  id="editTeamCategory"
                  name="category"
                >
                  <option value="development">Development</option>
                  <option value="design">Design</option>
                  <option value="marketing">Marketing</option>
                  <option value="research">Research</option>
                  <option value="general">General</option>
                </select>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              onclick="closeModal('editTeamModal')"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i>
              Update Team
            </button>
          </div>
          <input type="hidden" id="editTeamId" name="teamId" />
        </form>
      </div>
    </div>

    <!-- Manage Members Modal -->
    <div id="manageMembersModal" class="modal">
      <div class="modal-content modal-wide">
        <div class="modal-header">
          <h3 class="modal-title">Manage Team Members</h3>
          <button
            class="close-modal"
            onclick="closeModal('manageMembersModal')"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="members-management">
            <div class="section">
              <div class="section-header">
                <h5 class="section-title">
                  <i class="fas fa-users"></i>
                  Current Members
                </h5>
                <button
                  class="btn btn-primary btn-sm"
                  onclick="showAddMemberForm()"
                >
                  <i class="fas fa-plus"></i>
                  Add Member
                </button>
              </div>
              <div id="currentMembers" class="current-members-list">
                <!-- Current members will be populated here -->
              </div>
            </div>

            <div
              id="addMemberSection"
              class="section add-member-section"
              style="display: none"
            >
              <h5 class="section-title">
                <i class="fas fa-user-plus"></i>
                Add New Member
              </h5>
              <form id="addMemberForm" onsubmit="addTeamMember(event)">
                <div class="form-row">
                  <div class="form-group">
                    <label class="form-label">Email Address *</label>
                    <input
                      type="email"
                      class="form-input"
                      name="email"
                      required
                      placeholder="Enter member's email"
                    />
                  </div>
                  <div class="form-group">
                    <label class="form-label">Role</label>
                    <select class="form-select" name="role">
                      <option value="member">Member</option>
                      <option value="moderator">Moderator</option>
                    </select>
                  </div>
                </div>
                <div class="form-actions">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    onclick="hideAddMemberForm()"
                  >
                    Cancel
                  </button>
                  <button type="submit" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Add Member
                  </button>
                </div>
                <input type="hidden" id="manageMembersTeamId" name="teamId" />
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Delete Team Confirmation Modal -->
    <div id="deleteTeamModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">
            <i
              class="fas fa-exclamation-triangle"
              style="color: #dc2626; margin-right: 8px"
            ></i>
            Delete Team
          </h3>
          <button class="close-modal" onclick="closeModal('deleteTeamModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="warning-message">
            <div class="warning-icon">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="warning-content">
              <h4>Are you sure you want to delete this team?</h4>
              <p>
                <strong id="deleteTeamName">Team Name</strong> will be
                permanently deleted.
              </p>
              <div class="warning-details">
                <p><strong>This action cannot be undone!</strong></p>
                <ul>
                  <li>All team data will be permanently removed</li>
                  <li>All team members will lose access</li>
                  <li>All team tasks and discussions will be deleted</li>
                  <li>Team chat history will be lost</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button
            class="btn btn-secondary"
            onclick="closeModal('deleteTeamModal')"
          >
            <i class="fas fa-times"></i>
            Cancel
          </button>
          <button
            class="btn btn-danger"
            id="confirmDeleteBtn"
            onclick="deleteTeam()"
          >
            <i class="fas fa-trash"></i>
            Yes, Delete Team
          </button>
        </div>
      </div>
    </div>

    <!-- Delete Task Confirmation Modal -->
    <div id="deleteTaskModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">
            <i
              class="fas fa-exclamation-triangle"
              style="color: #dc2626; margin-right: 8px"
            ></i>
            Delete Task
          </h3>
          <button class="close-modal" onclick="closeModal('deleteTaskModal')">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="warning-message">
            <div class="warning-icon">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="warning-content">
              <h4>Are you sure you want to delete this task?</h4>
              <p>
                <strong id="deleteTaskName">Task Name</strong> will be
                permanently deleted.
              </p>
              <div class="warning-details">
                <p><strong>This action cannot be undone!</strong></p>
                <ul>
                  <li>All task data will be permanently removed</li>
                  <li>Task progress and updates will be lost</li>
                  <li>Task attachments and comments will be deleted</li>
                  <li>Task history will be permanently erased</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button
            class="btn btn-secondary"
            onclick="closeModal('deleteTaskModal')"
          >
            <i class="fas fa-times"></i>
            Cancel
          </button>
          <button
            class="btn btn-danger"
            id="confirmDeleteTaskBtn"
            onclick="confirmDeleteTask()"
          >
            <i class="fas fa-trash"></i>
            Yes, Delete Task
          </button>
        </div>
      </div>
    </div>

    <!-- Delete Account Modal -->
    <div id="deleteAccountModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">
            <i
              class="fas fa-exclamation-triangle"
              style="color: #dc2626; margin-right: 8px"
            ></i>
            Delete Account
          </h3>
          <button
            class="close-modal"
            onclick="closeModal('deleteAccountModal')"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="warning-message">
            <div class="warning-icon">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="warning-content">
              <h4>Are you sure you want to delete your account?</h4>
              <p>
                Your account
                <strong id="deleteAccountName">Account</strong> will be
                permanently deleted.
              </p>
              <div class="warning-details">
                <p><strong>This action cannot be undone!</strong></p>
                <ul>
                  <li>
                    Your profile and all personal data will be permanently
                    removed
                  </li>
                  <li>All teams you created will be deleted</li>
                  <li>
                    All tasks and projects associated with your account will be
                    lost
                  </li>
                  <li>
                    Chat messages and communication history will be erased
                  </li>
                  <li>You will lose access to all team collaborations</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button
            class="btn btn-secondary"
            onclick="closeModal('deleteAccountModal')"
          >
            <i class="fas fa-times"></i>
            Cancel
          </button>
          <button
            class="btn btn-danger"
            id="confirmDeleteAccountBtn"
            onclick="confirmDeleteAccount()"
          >
            <i class="fas fa-trash"></i>
            Yes, Delete My Account
          </button>
        </div>
      </div>
    </div>

    <!-- Notification Container -->
    <div id="notificationContainer" class="notification-container"></div>

    <!-- JavaScript -->
    <script>
      // Inject Socket.IO client script
      (function () {
        const s = document.createElement("script");
        s.src = "/socket.io/socket.io.js";
        s.onload = () => {
          console.log("Socket.IO client loaded");
        };
        document.head.appendChild(s);
      })();
      // Global variables
      let currentUser = null;
      let teams = [];
      let tasks = [];
      let currentSection = "overview";
      let organiserSocket = null;
      let lastSummary = null;
      let deleteTaskId = null; // Store task ID for deletion

      // Initialize dashboard
      document.addEventListener("DOMContentLoaded", function () {
        loadDashboardData();
        setupNavigation();
        setupModals();
        setupDateValidation();
        setupGlobalChatHandlers(); // Add global chat handlers
        // Try delayed socket init (session may not be ready instantly)
        setTimeout(initOrganiserSocket, 1500);
      });

      function initOrganiserSocket() {
        if (organiserSocket || typeof io === "undefined") return;
        try {
          organiserSocket = io();
          organiserSocket.on("connect", () => {
            console.log("Organiser socket connected");
            if (currentUser && currentUser.data && currentUser.data._id) {
              organiserSocket.emit("registerOrganiser", currentUser.data._id);
            }
          });

          // Dashboard summary events
          organiserSocket.on("dashboardSummary", (summary) => {
            applyRealtimeSummary(summary);
          });

          // Chat events
          organiserSocket.on("new message", (messageData) => {
            console.log("Received via Socket.IO:", messageData); // Debug log
            const incomingTeamId = messageData.teamId || messageData.team;
            if (currentChatTeam === incomingTeamId) {
              const message = {
                content: messageData.content,
                sender: messageData.sender,
                createdAt: messageData.timestamp || new Date().toISOString(),
                messageType: messageData.messageType,
                fileName: messageData.fileName,
                fileType: messageData.fileType,
                fileSize: messageData.fileSize,
                fileUrl: messageData.fileUrl,
              };
              console.log("Constructed message for display:", message); // Debug log
              chatMessages.push(message);
              displayMessage(message);
            }
          });

          organiserSocket.on("user typing", (data) => {
            if (
              currentChatTeam === data.teamId &&
              data.userId !== currentUser?.data?._id
            ) {
              showTypingIndicator(data.userName);
            }
          });

          organiserSocket.on("user stopped typing", (data) => {
            if (currentChatTeam === data.teamId) {
              hideTypingIndicator();
            }
          });

          organiserSocket.on("onlineCountUpdate", (data) => {
            if (currentChatTeam === data.teamId) {
              updateOnlineCountDisplay(data.count);
            }
          });

          // Real-time task updates
          organiserSocket.on("task updated", (data) => {
            console.log("Task updated event received:", data);
            // Refresh task list if we're in task management view
            if (currentSection === "task-management") {
              loadTasks();
            }
          });

          // Dashboard refresh events
          organiserSocket.on("dashboard refresh", (data) => {
            console.log("Dashboard refresh event received:", data);
            // Refresh dashboard stats
            loadDashboardStats();
            // Refresh current section data
            if (currentSection === "task-management") {
              loadTasks();
            }
          });

          organiserSocket.on("disconnect", () => {
            console.log("Socket disconnected");
            // Could show reconnecting indicator here
          });
        } catch (e) {
          console.warn("Socket init failed", e);
        }
      }

      function applyRealtimeSummary(summary) {
        if (!summary) return;
        const mappings = [
          { id: "totalTeams", key: "totalTeams" },
          { id: "totalMembers", key: "totalMembers" },
          { id: "totalTasks", key: "activeTasks" }, // Use activeTasks for the totalTasks display element
          // { id: 'completionRate', key:'completionRate', format: v => v + '%' } // DISABLED: Using API stats instead
        ];
        mappings.forEach((m) => {
          const el = document.getElementById(m.id);
          if (!el) return;
          const newValueRaw = summary[m.key];
          const newValue = m.format ? m.format(newValueRaw) : newValueRaw;
          const oldValue = el.textContent.trim();
          if (oldValue != newValue.toString()) {
            animateStatChange(el, newValue);
          }
        });
        lastSummary = summary;
        updateRealtimeStatus(summary.timestamp);
        console.log(
          "🔍 Real-time summary applied but completion rate skipped:",
          summary
        );
      }

      function animateStatChange(el, newValue) {
        console.log("🎬 animateStatChange called:", {
          element: el?.id || "unknown",
          currentValue: el?.textContent,
          newValue: newValue,
        });

        if (!el) {
          console.error("🎬 Element not found for animation");
          return;
        }

        el.classList.add("stat-updating");
        setTimeout(() => {
          el.textContent = newValue;
          el.classList.add("stat-updated");
          console.log("🎬 Element updated:", el.id, "new value:", newValue);
          setTimeout(() => {
            el.classList.remove("stat-updating");
            setTimeout(() => el.classList.remove("stat-updated"), 600);
          }, 50);
        }, 150);
      }

      function updateRealtimeStatus(ts) {
        const badge = document.getElementById("realtimeStatusBadge");
        const timeEl = document.getElementById("realtimeLastUpdated");
        if (badge) badge.textContent = "LIVE";
        if (timeEl && ts) {
          const d = new Date(ts);
          timeEl.textContent = "Last update: " + d.toLocaleTimeString();
        }
      }

      function updateOnlineCountDisplay(count) {
        const onlineCountEl = document.getElementById("onlineCount");
        if (onlineCountEl) {
          onlineCountEl.textContent = count;
          console.log(`Updated online count display: ${count}`);
        }
      }

      // Navigation
      function setupNavigation() {
        document.querySelectorAll(".nav-link").forEach((link) => {
          link.addEventListener("click", function (e) {
            if (
              !this.getAttribute("href") ||
              this.getAttribute("href") === "#"
            ) {
              e.preventDefault();
              const section = this.getAttribute("data-section");
              if (section) {
                switchSection(section);
              }
            }
          });
        });
      }

      // Setup global chat handlers that work across all sections
      function setupGlobalChatHandlers() {
        // Use event delegation for emoji button to ensure it works even if recreated
        document.addEventListener("click", function (e) {
          if (e.target.closest("#emojiBtn")) {
            console.log("Global emoji button clicked!"); // Debug log
            e.preventDefault();
            e.stopPropagation();
            toggleEmojiPicker();
          }
        });
      }

      function switchSection(section) {
        // Update navigation
        document.querySelectorAll(".nav-link").forEach((link) => {
          link.classList.remove("active");
        });
        document
          .querySelector(`[data-section="${section}"]`)
          .classList.add("active");

        // Hide all content sections
        document.querySelectorAll(".content-section").forEach((sec) => {
          sec.style.display = "none";
        });

        // Show/hide dashboard header based on section
        const dashboardHeader = document.querySelector(".dashboard-header");
        if (section === "overview") {
          // Show dashboard header and overview section for overview
          dashboardHeader.style.display = "block";
          document.getElementById("overview-section").style.display = "block";
        } else {
          // Hide dashboard header for other sections
          dashboardHeader.style.display = "none";

          // Show the selected section
          const sectionElement = document.getElementById(`${section}-section`);
          if (sectionElement) {
            sectionElement.style.display = "block";
          }
        }

        currentSection = section;

        // Update page title based on section
        updatePageTitle(section);

        // Load section-specific data
        switch (section) {
          case "teams":
            loadTeams();
            break;
          case "tasks":
            loadTasks();
            break;
          case "members":
            loadMembers();
            break;
          case "settings":
            loadSettings();
            break;
          case "chat":
            loadChat();
            break;
        }
      }

      function updatePageTitle(section) {
        const titleMap = {
          overview: "Dashboard Overview - CollabSpace",
          teams: "My Teams - CollabSpace",
          tasks: "Task Management - CollabSpace",
          members: "Member Management - CollabSpace",
          settings: "Settings - CollabSpace",
          chat: "Team Chat - CollabSpace",
        };

        document.title = titleMap[section] || "CollabSpace Dashboard";
      }

      // Load dashboard data with rate limiting
      let lastDataLoad = 0;
      const DATA_LOAD_THROTTLE = 5000; // Minimum 5 seconds between loads

      async function loadDashboardData(forceRefresh = false) {
        const now = Date.now();
        if (!forceRefresh && now - lastDataLoad < DATA_LOAD_THROTTLE) {
          console.log("Dashboard data load throttled");
          return;
        }
        lastDataLoad = now;

        try {
          showLoadingState();

          // Try optimized single API call first
          try {
            const dashboardResponse = await fetch("/api/dashboard/stats", {
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            });

            if (dashboardResponse.ok) {
              const dashboardData = await dashboardResponse.json();
              console.log(
                "✅ Dashboard data received via optimized endpoint:",
                dashboardData
              );

              if (dashboardData.success && dashboardData.data) {
                // Update current user
                currentUser = { data: dashboardData.data.user };
                updateUserInfo();

                // Update teams
                teams = dashboardData.data.teams || [];
                console.log("Teams array after assignment:", teams);

                // Update tasks
                tasks = dashboardData.data.tasks || [];

                // Use pre-calculated stats from API instead of recalculating
                if (dashboardData.data.stats) {
                  document.getElementById("totalTeams").textContent =
                    dashboardData.data.stats.totalTeams;
                  document.getElementById("totalMembers").textContent =
                    dashboardData.data.stats.totalMembers;
                  document.getElementById("totalTasks").textContent =
                    dashboardData.data.stats.activeTasks; // Show active tasks, not total
                  document.getElementById("completionRate").textContent =
                    dashboardData.data.stats.completionRate + "%";
                  console.log(
                    "📊 Stats updated from API (showing activeTasks as totalTasks):",
                    dashboardData.data.stats
                  );
                  console.log(
                    "🔍 Completion Rate set to:",
                    dashboardData.data.stats.completionRate + "%"
                  );

                  // Debug: Check if completion rate changes after 2 seconds
                  setTimeout(() => {
                    const currentRate =
                      document.getElementById("completionRate").textContent;
                    console.log(
                      "🔍 Completion Rate after 2 seconds:",
                      currentRate
                    );
                    if (
                      currentRate !==
                      dashboardData.data.stats.completionRate + "%"
                    ) {
                      console.error(
                        "🚨 COMPLETION RATE CHANGED! Was:",
                        dashboardData.data.stats.completionRate + "%, Now:",
                        currentRate
                      );
                    }
                  }, 2000);
                } else {
                  // Fallback to calculating stats if not provided
                  updateStats();
                }

                loadTeamSelects();

                hideLoadingState();
                return; // Success, exit early
              }
            } else {
              console.warn(
                "Optimized endpoint failed with status:",
                dashboardResponse.status
              );
            }
          } catch (error) {
            console.warn("Optimized endpoint failed:", error);
          }

          // Fallback to original multiple API calls
          console.log("🔄 Falling back to original API calls...");

          // Load user info with error handling
          try {
            const userResponse = await fetch("/api/auth/me");
            if (userResponse.ok) {
              currentUser = await userResponse.json();
              updateUserInfo();
            } else if (userResponse.status === 401) {
              console.log("Authentication required");
              showNotification("Please log in to continue", "warning");
            }
          } catch (error) {
            console.warn("Failed to load user info:", error);
          }

          // Load teams with error handling
          try {
            const teamsResponse = await fetch("/api/teams?admin=true", {
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            });
            console.log("Teams response status:", teamsResponse.status);
            if (teamsResponse.ok) {
              const teamsData = await teamsResponse.json();
              console.log("Teams data received:", teamsData);
              teams = teamsData.data?.teams || [];
              console.log("Teams array after assignment:", teams);
              // Don't call updateStats() here since we're using pre-calculated stats from dashboard API
              loadTeamSelects();
            } else if (teamsResponse.status === 429) {
              showNotification(
                "Too many requests. Please wait a moment.",
                "warning"
              );
              return;
            } else {
              console.error(
                "Teams response not ok:",
                teamsResponse.status,
                teamsResponse.statusText
              );
            }
          } catch (error) {
            console.warn("Failed to load teams:", error);
          }

          // Load tasks with error handling
          try {
            const tasksResponse = await fetch("/api/tasks?organiser=true", {
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            });
            if (tasksResponse.ok) {
              const tasksData = await tasksResponse.json();
              tasks = tasksData.data || [];
              // Don't call updateStats() here since we're using pre-calculated stats from dashboard API
            }
          } catch (error) {
            console.warn("Failed to load tasks:", error);
          }

          hideLoadingState();
        } catch (error) {
          console.error("Error loading dashboard:", error);
          showNotification("Failed to load dashboard data", "error");
          hideLoadingState();
        }
      }

      function updateUserInfo() {
        if (currentUser && currentUser.data) {
          const user = currentUser.data;
          document.getElementById("userName").textContent =
            user.firstName + " " + user.lastName;

          // Update avatar with initials
          const initials =
            (user.firstName?.charAt(0) || "") +
            (user.lastName?.charAt(0) || "");
          document.getElementById("userAvatar").textContent =
            initials.toUpperCase();
        }
      }

      function updateStats() {
        console.log(
          "� updateStats() called but disabled to prevent overriding dashboard API stats"
        );
        console.log("🔍 Call stack:", new Error().stack);
        return; // Disable this function to prevent overriding dashboard API stats

        console.log("�🔍 updateStats() called with teams:", teams);
        // Update stats from current data
        document.getElementById("totalTeams").textContent = teams.length;
        // Calculate total members (NOT including admins, to match server-side calculation)
        const totalMembers = teams.reduce((sum, team) => {
          // Avoid double counting admin in members array
          const adminId = team.admin
            ? typeof team.admin === "object"
              ? team.admin._id
              : team.admin
            : null;
          const actualMembers = team.members
            ? team.members.filter((member) => {
                const memberId =
                  typeof member === "object" ? member._id : member;
                return memberId !== adminId;
              })
            : [];
          const memberCount = actualMembers.length;
          console.log(
            `🔍 Team ${team.name}: filtered_members=${memberCount} (admin not counted, duplicates removed)`
          );
          return sum + memberCount;
        }, 0);
        console.log(
          "🔍 updateStats() calculated totalMembers (without admins, no duplicates):",
          totalMembers
        );
        document.getElementById("totalMembers").textContent = totalMembers;
        const completedTasks = tasks.filter(
          (task) => task.status === "completed"
        ).length;
        const activeTasks = tasks.length - completedTasks; // Active tasks = total - completed
        // document.getElementById('totalTasks').textContent = activeTasks; // DISABLED: Show active tasks instead of total
        const completionRate =
          tasks.length > 0
            ? Math.round((completedTasks / tasks.length) * 100)
            : 0;
        // document.getElementById('completionRate').textContent = completionRate + '%'; // DISABLED: Using API stats instead

        console.log("📊 Stats updated:", {
          teams: teams.length,
          members: totalMembers,
          tasks: tasks.length,
          completion: completionRate + "%",
        });
      }

      function forceUpdateOverviewStats() {
        // COMPLETELY DISABLED to prevent overriding API completion rate
        console.log(
          "🎯 forceUpdateOverviewStats called but DISABLED to prevent completion rate override"
        );
        return;

        const totalTeams = teams.length;
        // Calculate total members (NOT including admins, to match server-side calculation)
        const totalMembers = teams.reduce((sum, team) => {
          // Avoid double counting admin in members array
          const adminId = team.admin
            ? typeof team.admin === "object"
              ? team.admin._id
              : team.admin
            : null;
          const actualMembers = team.members
            ? team.members.filter((member) => {
                const memberId =
                  typeof member === "object" ? member._id : member;
                return memberId !== adminId;
              })
            : [];
          const memberCount = actualMembers.length;
          console.log(
            `🎯 Team ${team.name}: filtered_members=${memberCount} (admin not counted, duplicates removed)`
          );
          return sum + memberCount;
        }, 0);
        const totalTasks = tasks.length;
        const completedTasks = tasks.filter(
          (task) => task.status === "completed"
        ).length;
        const activeTasks = totalTasks - completedTasks; // Active tasks = total - completed
        const completionRate =
          totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;

        console.log(
          "🎯 forceUpdateOverviewStats calculated stats (without admins, no duplicates):",
          {
            teams: totalTeams,
            members: totalMembers,
            totalTasks: totalTasks,
            activeTasks: activeTasks,
            completedTasks: completedTasks,
            tasks: totalTasks,
            activeTasks: activeTasks,
            completion: completionRate + "%",
          }
        );

        // Find DOM elements
        const teamsEl = document.getElementById("totalTeams");
        const membersEl = document.getElementById("totalMembers");
        const tasksEl = document.getElementById("totalTasks");
        const completionEl = document.getElementById("completionRate");

        console.log("🎯 DOM elements found:", {
          teamsEl: !!teamsEl,
          membersEl: !!membersEl,
          tasksEl: !!tasksEl,
          completionEl: !!completionEl,
        });

        if (teamsEl)
          console.log("🎯 Current totalTeams value:", teamsEl.textContent);
        if (membersEl)
          console.log("🎯 Current totalMembers value:", membersEl.textContent);

        // Animate the stat changes
        if (teamsEl) animateStatChange(teamsEl, totalTeams);
        if (membersEl) animateStatChange(membersEl, totalMembers);
        if (tasksEl) animateStatChange(tasksEl, activeTasks); // Show active tasks instead of total
        // if (completionEl) animateStatChange(completionEl, completionRate + '%'); // DISABLED: Using API stats instead

        console.log("🎯 Overview stats force updated with animation:", {
          teams: totalTeams,
          members: totalMembers,
          totalTasks: totalTasks,
          activeTasks: activeTasks,
          completion: completionRate + "%",
        });
      }

      // Teams management
      async function loadTeams() {
        console.log("🔄 loadTeams called with teams array:", teams);
        const teamsGrid = document.getElementById("teamsGrid");

        // If teams array is empty, try to fetch teams directly
        if (teams.length === 0) {
          console.log("Teams array is empty, fetching teams directly...");
          try {
            const teamsResponse = await fetch("/api/teams?admin=true", {
              headers: {
                "Cache-Control": "no-cache",
                Pragma: "no-cache",
              },
            });
            if (teamsResponse.ok) {
              const teamsData = await teamsResponse.json();
              console.log("🏆 Teams data fetched directly:", teamsData);
              teams = teamsData.data?.teams || [];
              console.log("🏆 Teams array updated:", teams);
            } else {
              console.error("Failed to fetch teams:", teamsResponse.status);
              teamsGrid.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-exclamation-triangle"></i>
                                <h3>Failed to Load Teams</h3>
                                <p>Please try refreshing the page</p>
                            </div>
                        `;
              return;
            }
          } catch (error) {
            console.error("Error fetching teams:", error);
            teamsGrid.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h3>Failed to Load Teams</h3>
                            <p>Please try refreshing the page</p>
                        </div>
                    `;
            return;
          }
        }

        if (teams.length === 0) {
          console.log("No teams found, showing empty state");
          teamsGrid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <h3>No Teams Yet</h3>
                        <p>Create your first team to start collaborating</p>
                        <button class="btn btn-primary" onclick="openCreateTeamModal()" style="margin-top: 16px;">
                            <i class="fas fa-plus"></i>
                            Create Team
                        </button>
                    </div>
                `;
          return;
        }

        console.log("Rendering teams:", teams.length);
        console.log(
          "🔍 Full teams data for debugging:",
          JSON.stringify(teams, null, 2)
        );

        teamsGrid.innerHTML = teams
          .map((team, index) => {
            console.log(`🔍 Processing team ${index + 1}:`, {
              name: team.name,
              admin: team.admin,
              members: team.members,
              adminType: typeof team.admin,
              membersType: typeof team.members,
              membersIsArray: Array.isArray(team.members),
              membersLength: team.members ? team.members.length : "N/A",
              stats: team.stats,
            });

            // Calculate consistent member count (admin + members, avoid double counting)
            const adminId = team.admin
              ? typeof team.admin === "object"
                ? team.admin._id
                : team.admin
              : null;
            const adminCount = team.admin ? 1 : 0;

            // Filter out admin from members array to avoid double counting
            const actualMembers = team.members
              ? team.members.filter((member) => {
                  const memberId =
                    typeof member === "object" ? member._id : member;
                  return memberId !== adminId;
                })
              : [];

            const memberCount = actualMembers.length;
            const totalMembers = adminCount + memberCount;

            // Use stats from team model if available, otherwise default to 0
            const totalTasks = team.stats ? team.stats.totalTasks : 0;
            const completedTasks = team.stats ? team.stats.completedTasks : 0;

            console.log(
              `🏷️ Team ${team.name}: adminId=${adminId}, admin=${adminCount}, filtered_members=${memberCount}, total=${totalMembers}, tasks=${totalTasks}`
            );

            return `
                <div class="team-card">
                    <div class="team-header">
                        <div>
                            <div class="team-title-row">
                                <h3 class="team-name">${team.name}</h3>
                                <span class="team-number">Team ${
                                  index + 1
                                }</span>
                            </div>
                            <p class="team-description">${
                              team.description || "No description available"
                            }</p>
                        </div>
                    </div>
                    <div class="team-stats">
                        <div class="team-stat">
                            <span class="team-stat-value">${totalMembers}</span>
                            <span class="team-stat-label">Members</span>
                        </div>
                        <div class="team-stat">
                            <span class="team-stat-value">${totalTasks}</span>
                            <span class="team-stat-label">Tasks</span>
                        </div>
                        <div class="team-stat">
                            <span class="team-stat-value">${
                              team.isPublic ? "Public" : "Private"
                            }</span>
                            <span class="team-stat-label">Visibility</span>
                        </div>
                    </div>
                    <div class="team-actions">
                        <button class="btn btn-primary btn-sm" onclick="viewTeamDetails('${
                          team._id
                        }')">
                            <i class="fas fa-eye"></i>
                            View
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="editTeam('${
                          team._id
                        }')">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="manageTeamMembers('${
                          team._id
                        }')">
                            <i class="fas fa-users"></i>
                            Members
                        </button>
                    </div>
                </div>
                `;
          })
          .join("");
      }

      function loadTeamSelects() {
        const taskTeamSelect = document.getElementById("taskTeamSelect");
        const editTaskTeam = document.getElementById("editTaskTeam");
        const inviteTeamSelect = document.getElementById("inviteTeamSelect");
        const chatTeamSelect = document.getElementById("chatTeamSelect");

        const optionsHTML = teams
          .map((team) => `<option value="${team._id}">${team.name}</option>`)
          .join("");

        if (taskTeamSelect) {
          taskTeamSelect.innerHTML =
            '<option value="">Select a team</option>' + optionsHTML;
        }
        if (editTaskTeam) {
          editTaskTeam.innerHTML =
            '<option value="">Select a team</option>' + optionsHTML;
        }
        if (inviteTeamSelect) {
          inviteTeamSelect.innerHTML =
            '<option value="">Select a team</option>' + optionsHTML;
        }
        if (chatTeamSelect) {
          chatTeamSelect.innerHTML =
            '<option value="">Select a team</option>' + optionsHTML;
        }
      }

      // Chat functionality
      let currentChatTeam = null;
      let chatMessages = [];
      let typingTimer = null;
      let isTyping = false;

      function loadChat() {
        loadChatTeamSelects();
        setupChatEventListeners();
      }

      function loadChatTeamSelects() {
        const chatTeamSelect = document.getElementById("chatTeamSelect");
        if (chatTeamSelect && teams.length > 0) {
          const optionsHTML = teams
            .map((team) => `<option value="${team._id}">${team.name}</option>`)
            .join("");
          chatTeamSelect.innerHTML =
            '<option value="">Select a team</option>' + optionsHTML;
        }
      }

      function setupChatEventListeners() {
        const chatTeamSelect = document.getElementById("chatTeamSelect");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");

        // Team selection
        if (chatTeamSelect) {
          chatTeamSelect.addEventListener("change", function () {
            switchChatTeam(this.value);
          });
        }

        // Message input
        if (messageInput) {
          messageInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              sendMessage();
            } else {
              handleTyping();
            }
          });

          messageInput.addEventListener("input", handleTyping);
          messageInput.addEventListener("blur", stopTyping);
        }

        // Send button
        if (sendButton) {
          sendButton.addEventListener("click", sendMessage);
        }

        // Attachment button
        const attachFileBtn = document.getElementById("attachFileBtn");
        const fileInput = document.getElementById("fileInput");
        if (attachFileBtn && fileInput) {
          attachFileBtn.addEventListener("click", function () {
            fileInput.click();
          });

          fileInput.addEventListener("change", function (e) {
            const file = e.target.files[0];
            if (file) {
              handleFileAttachment(file);
            }
          });
        }

        // Note: Emoji button handler is now managed globally in setupGlobalChatHandlers()
      }

      function switchChatTeam(teamId) {
        if (!teamId) {
          currentChatTeam = null;
          document.getElementById("messageInput").disabled = true;
          document.getElementById("sendButton").disabled = true;
          clearChatMessages();
          showChatWelcome();
          return;
        }

        // Leave current team room
        if (currentChatTeam && organiserSocket) {
          organiserSocket.emit("leave team", { teamId: currentChatTeam });
        }

        currentChatTeam = teamId;
        const team = teams.find((t) => t._id === teamId);

        // Join new team room
        if (organiserSocket) {
          organiserSocket.emit("join team", {
            teamId: teamId,
            userId: currentUser?.data?._id,
          });
        }

        // Enable chat input
        document.getElementById("messageInput").disabled = false;
        document.getElementById("sendButton").disabled = false;
        document.getElementById("messageInput").placeholder = `Message ${
          team?.name || "team"
        }...`;

        // Load chat messages for this team
        loadChatMessages(teamId);
      }

      function loadChatMessages(teamId) {
        // Clear current messages
        clearChatMessages();

        // Fetch messages from API
        fetch(`/api/chat/messages/${teamId}`)
          .then((response) => response.json())
          .then((data) => {
            console.log("Received chat data:", data); // Debug log
            if (data.success && data.messages) {
              console.log("First message:", data.messages[0]); // Debug log
              chatMessages = data.messages;
              displayChatMessages();
            }
          })
          .catch((error) => {
            console.error("Error loading chat messages:", error);
            showSystemMessage("Failed to load chat messages");
          });
      }

      function clearChatMessages() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (chatMessagesContainer) {
          chatMessagesContainer.innerHTML = "";
        }
        chatMessages = [];
      }

      function showChatWelcome() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (chatMessagesContainer) {
          chatMessagesContainer.innerHTML = `
                    <div class="chat-welcome">
                        <div class="welcome-icon">
                            <i class="fas fa-comments"></i>
                        </div>
                        <h3>Welcome to Team Chat</h3>
                        <p>Select a team above to start chatting with your team members</p>
                    </div>
                `;
        }
      }

      function displayChatMessages() {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        chatMessagesContainer.innerHTML = "";

        chatMessages.forEach((message) => {
          displayMessage(message);
        });

        // Scroll to bottom
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      function displayMessage(message) {
        console.log("Displaying message:", message); // Debug log
        console.log("Message sender:", message.sender); // Debug log

        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        const isOwn =
          currentUser &&
          currentUser.data &&
          message.sender._id === currentUser.data._id;
        const messageTime = new Date(message.createdAt).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        const senderInitials = getSenderInitials(message.sender);

        const messageElement = document.createElement("div");
        messageElement.className = `message ${isOwn ? "own" : ""}`;

        // Check if this is a file message
        let messageContent = "";
        console.log(
          "Message type:",
          message.messageType,
          "File URL:",
          message.fileUrl
        ); // Debug log
        if (message.messageType === "file" && message.fileUrl) {
          // This is a file attachment
          const fileIcon = getFileIcon(message.fileType);
          const fileName = message.fileName || "Unknown file";
          const fileSize = message.fileSize
            ? formatFileSize(message.fileSize)
            : "";

          if (message.fileType && message.fileType.startsWith("image/")) {
            // Display image attachment
            messageContent = `
                        <div class="file-attachment image-attachment">
                            <img src="${
                              message.fileUrl
                            }" alt="${fileName}" onclick="openFileInNewTab('${
              message.fileUrl
            }')" style="max-width: 300px; max-height: 200px; border-radius: 8px; cursor: pointer;">
                            <div class="file-info">
                                <span class="file-name">${fileName}</span>
                                <span class="file-size">${fileSize}</span>
                            </div>
                        </div>
                        ${
                          message.content
                            ? `<div class="file-caption">${escapeHtml(
                                message.content
                              )}</div>`
                            : ""
                        }
                    `;
          } else {
            // Display other file types
            messageContent = `
                        <div class="file-attachment">
                            <div class="file-icon">${fileIcon}</div>
                            <div class="file-details">
                                <div class="file-name" onclick="openFileInNewTab('${
                                  message.fileUrl
                                }')" style="cursor: pointer; color: var(--primary);">${fileName}</div>
                                <div class="file-size">${fileSize}</div>
                            </div>
                            <button onclick="downloadFile('${
                              message.fileUrl
                            }', '${fileName}')" class="download-btn" title="Download">
                                <i class="fas fa-download"></i>
                            </button>
                        </div>
                        ${
                          message.content
                            ? `<div class="file-caption">${escapeHtml(
                                message.content
                              )}</div>`
                            : ""
                        }
                    `;
          }
        } else {
          // Regular text message
          messageContent = escapeHtml(message.content);
        }

        messageElement.innerHTML = `
                <div class="message-avatar">${senderInitials}</div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="sender-name">${message.sender.firstName} ${message.sender.lastName}</span>
                        <span class="message-time">${messageTime}</span>
                    </div>
                    <div class="message-bubble">${messageContent}</div>
                </div>
            `;

        chatMessagesContainer.appendChild(messageElement);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const content = messageInput.value.trim();

        if (!content || !currentChatTeam || !currentUser) return;

        const messageData = {
          content: content,
          teamId: currentChatTeam,
          sender: currentUser.data,
        };

        // Send to API; server will emit to sockets
        fetch("/api/chat/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            content: content,
            teamId: currentChatTeam,
            messageType: "text",
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success && data.message) {
              // Render the server-formatted message so sender sees it
              displayMessage(data.message);
              messageInput.value = "";
              stopTyping();
            } else {
              console.error("Error sending message:", data.message || data);
              showNotification("Failed to send message", "error");
            }
          })
          .catch((error) => {
            console.error("Error sending message:", error);
            showNotification("Failed to send message", "error");
          });

        // Clear input
        messageInput.value = "";
        stopTyping();
      }

      function handleFileAttachment(file) {
        // Check file size (max 10MB)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
          showNotification("File size must be less than 10MB", "error");
          return;
        }

        // Create preview for images
        const fileType = file.type.split("/")[0];
        let previewContent = "";

        if (fileType === "image") {
          const reader = new FileReader();
          reader.onload = function (e) {
            previewContent = `<img src="${e.target.result}" alt="Image preview" style="max-width: 200px; max-height: 200px; border-radius: 8px;">`;
            showFilePreview(file, previewContent);
          };
          reader.readAsDataURL(file);
        } else {
          previewContent = `<div class="file-preview">
                    <i class="fas fa-file"></i>
                    <span>${file.name}</span>
                    <span class="file-size">${formatFileSize(file.size)}</span>
                </div>`;
          showFilePreview(file, previewContent);
        }
      }

      function showFilePreview(file, previewContent) {
        // Create preview modal or inline preview
        const messageInput = document.getElementById("messageInput");
        const previewHtml = `
                <div id="filePreview" class="file-preview-container">
                    <div class="file-preview-content">
                        ${previewContent}
                        <div class="file-preview-actions">
                            <input type="text" id="fileCaption" placeholder="Add a caption..." class="file-caption-input">
                            <div class="file-preview-buttons">
                                <button onclick="cancelFileUpload()" class="btn-cancel">Cancel</button>
                                <button onclick="sendFileMessage()" class="btn-send">Send</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

        // Insert preview above the input
        const chatContainer = document.querySelector(".chat-input-container");
        chatContainer.insertAdjacentHTML("beforebegin", previewHtml);

        // Store file for later upload
        window.pendingFile = file;
      }

      function cancelFileUpload() {
        const preview = document.getElementById("filePreview");
        if (preview) {
          preview.remove();
        }
        window.pendingFile = null;
        document.getElementById("fileInput").value = "";
      }

      function sendFileMessage() {
        if (!window.pendingFile || !currentChatTeam) {
          console.error("No pending file or chat team selected");
          return;
        }

        console.log("Sending file:", window.pendingFile); // Debug log

        const caption = document.getElementById("fileCaption").value.trim();

        // Show upload progress
        const sendButton = document.querySelector("#filePreview .btn-send");
        sendButton.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> Uploading...';
        sendButton.disabled = true;

        // Create FormData for file upload
        const formData = new FormData();
        formData.append("file", window.pendingFile);

        // Upload file first
        console.log("Starting file upload...", window.pendingFile); // Debug log
        fetch("/api/upload", {
          method: "POST",
          credentials: "include",
          body: formData,
        })
          .then((response) => {
            console.log("Upload response status:", response.status); // Debug log
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((uploadData) => {
            console.log("Upload response:", uploadData); // Debug log
            if (uploadData.success) {
              // File uploaded successfully, now send message with file info
              const messageData = {
                content: caption || "", // Caption text or empty
                teamId: currentChatTeam,
                messageType: "file",
                fileName: uploadData.file.originalName,
                fileType: uploadData.file.mimetype,
                fileSize: uploadData.file.size,
                fileUrl: uploadData.file.url,
                uploadedFile: uploadData.file,
              };

              console.log("Sending message data:", messageData); // Debug log

              // Send to API (server will broadcast)
              fetch("/api/chat/messages", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify(messageData),
              })
                .then((response) => response.json())
                .then((data) => {
                  if (data.success && data.message) {
                    // Render returned message
                    displayMessage(data.message);
                    cancelFileUpload();
                    showNotification("File sent successfully", "success");
                  } else {
                    throw new Error(data.message || "Failed to send file");
                  }
                })
                .catch((error) => {
                  console.error("Error sending file message:", error);
                  showNotification("Failed to send file message", "error");
                  sendButton.innerHTML = "Send";
                  sendButton.disabled = false;
                });
            } else {
              throw new Error(uploadData.message || "Upload failed");
            }
          })
          .catch((error) => {
            console.error("Error uploading file:", error);
            showNotification(
              "Failed to upload file: " + error.message,
              "error"
            );
            sendButton.innerHTML = "Send";
            sendButton.disabled = false;
          });
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      function toggleEmojiPicker() {
        console.log("toggleEmojiPicker called!"); // Debug log
        const existingPicker = document.getElementById("emojiPicker");
        if (existingPicker) {
          console.log("Removing existing picker"); // Debug log
          existingPicker.remove();
          return;
        }

        console.log("Creating new emoji picker"); // Debug log

        const emojis = [
          "😀",
          "😂",
          "😍",
          "🥰",
          "😘",
          "😊",
          "😉",
          "😎",
          "🤔",
          "😅",
          "😆",
          "😋",
          "😜",
          "🤩",
          "🥳",
          "😇",
          "🙂",
          "🤗",
          "🤝",
          "👍",
          "👎",
          "👏",
          "🙌",
          "👌",
          "✌️",
          "🤞",
          "🤟",
          "🤘",
          "👈",
          "👉",
          "👆",
          "👇",
          "☝️",
          "✋",
          "🤚",
          "🖐️",
          "🖖",
          "👋",
          "🤙",
          "💪",
          "🦾",
          "🖕",
          "✍️",
          "🙏",
          "🦶",
          "🦵",
          "🦿",
          "💄",
          "💋",
          "👄",
          "🦷",
          "👅",
          "👂",
          "🦻",
          "👃",
          "👣",
          "👁️",
          "👀",
          "🧠",
          "🗣️",
          "👤",
          "👥",
          "👶",
          "👧",
          "🧒",
          "👦",
          "👩",
          "🧑",
          "👨",
          "👵",
          "🧓",
          "👴",
          "👲",
          "👳‍♀️",
          "👳‍♂️",
          "🧕",
          "👮‍♀️",
          "👮‍♂️",
          "👷‍♀️",
          "👷‍♂️",
          "💂‍♀️",
          "💂‍♂️",
          "🕵️‍♀️",
          "🕵️‍♂️",
          "👩‍⚕️",
          "👨‍⚕️",
          "👩‍🌾",
          "👨‍🌾",
          "👩‍🍳",
          "👨‍🍳",
          "👩‍🎓",
          "👨‍🎓",
          "👩‍🎤",
          "👨‍🎤",
          "👩‍🏫",
          "👨‍🏫",
          "👩‍🏭",
          "👨‍🏭",
          "👩‍💻",
          "👨‍💻",
          "👩‍💼",
          "👨‍💼",
          "👩‍🔧",
          "👨‍🔧",
          "👩‍🔬",
          "👨‍🔬",
          "👩‍🎨",
          "👨‍🎨",
          "👩‍🚒",
          "👨‍🚒",
          "👩‍✈️",
          "👨‍✈️",
          "👩‍🚀",
          "👨‍🚀",
          "👩‍⚖️",
          "👨‍⚖️",
          "👰",
          "🤵",
          "👸",
          "🤴",
          "🦸‍♀️",
          "🦸‍♂️",
          "🦹‍♀️",
          "🦹‍♂️",
          "🤶",
          "🎅",
          "🧙‍♀️",
          "🧙‍♂️",
          "🧝‍♀️",
          "🧝‍♂️",
          "🧛‍♀️",
          "🧛‍♂️",
          "🧟‍♀️",
          "🧟‍♂️",
          "🧞‍♀️",
          "🧞‍♂️",
          "🧜‍♀️",
          "🧜‍♂️",
          "🧚‍♀️",
          "🧚‍♂️",
          "👼",
          "🤰",
          "🤱",
          "🙇‍♀️",
          "🙇‍♂️",
          "💁‍♀️",
          "💁‍♂️",
          "🙅‍♀️",
          "🙅‍♂️",
          "🙆‍♀️",
          "🙆‍♂️",
          "🙋‍♀️",
          "🙋‍♂️",
          "🧏‍♀️",
          "🧏‍♂️",
          "🤦‍♀️",
          "🤦‍♂️",
          "🤷‍♀️",
          "🤷‍♂️",
          "🙎‍♀️",
          "🙎‍♂️",
          "🙍‍♀️",
          "🙍‍♂️",
          "💇‍♀️",
          "💇‍♂️",
          "💆‍♀️",
          "💆‍♂️",
          "🧖‍♀️",
          "🧖‍♂️",
          "💅",
          "🤳",
          "💃",
          "🕺",
          "👯‍♀️",
          "👯‍♂️",
          "🕴️",
          "👩‍🦽",
          "👨‍🦽",
          "👩‍🦼",
          "👨‍🦼",
          "🚶‍♀️",
          "🚶‍♂️",
          "👩‍🦯",
          "👨‍🦯",
          "🧎‍♀️",
          "🧎‍♂️",
          "🏃‍♀️",
          "🏃‍♂️",
          "🧍‍♀️",
          "🧍‍♂️",
          "👫",
          "👭",
          "👬",
          "👩‍❤️‍👩",
          "👨‍❤️‍👨",
          "👩‍❤️‍👨",
          "👩‍❤️‍💋‍👩",
          "👨‍❤️‍💋‍👨",
          "👩‍❤️‍💋‍👨",
          "👨‍👩‍👧",
          "👨‍👩‍👧‍👦",
          "👨‍👩‍👦‍👦",
          "👨‍👩‍👧‍👧",
          "👨‍👨‍👧",
          "👨‍👨‍👧‍👦",
          "👨‍👨‍👦‍👦",
          "👨‍👨‍👧‍👧",
          "👩‍👩‍👧",
          "👩‍👩‍👧‍👦",
          "👩‍👩‍👦‍👦",
          "👩‍👩‍👧‍👧",
          "👨‍👧",
          "👨‍👧‍👦",
          "👨‍👦",
          "👨‍👦‍👦",
          "👨‍👧‍👧",
          "👩‍👧",
          "👩‍👧‍👦",
          "👩‍👦",
          "👩‍👦‍👦",
          "👩‍👧‍👧",
          "🗣️",
          "👤",
          "👥",
          "👣",
          "🦰",
          "🦱",
          "🦳",
          "🦲",
          "🐵",
          "🐒",
          "🦍",
          "🦧",
          "🐶",
          "🐕",
          "🦮",
          "🐕‍🦺",
          "🐩",
          "🐺",
          "🦊",
          "🦝",
          "🐱",
          "🐈",
          "🐈‍⬛",
          "🦁",
          "🐯",
          "🐅",
          "🐆",
          "🐴",
          "🐎",
          "🦄",
          "🦓",
          "🦌",
          "🐮",
          "🐂",
          "🐃",
          "🐄",
          "🐷",
          "🐖",
          "🐗",
          "🐽",
          "🐏",
          "🐑",
          "🐐",
          "🐪",
          "🐫",
          "🦙",
          "🦒",
          "🐘",
          "🦏",
          "🦛",
          "🐭",
          "🐁",
          "🐀",
          "🐹",
          "🐰",
          "🐇",
          "🐿️",
          "🦔",
          "🦇",
          "🐻",
          "🐨",
          "🐼",
          "🦥",
          "🦦",
          "🦨",
          "🦘",
          "🦡",
          "🐾",
          "🦃",
          "🐔",
          "🐓",
          "🐣",
          "🐤",
          "🐥",
          "🐦",
          "🐧",
          "🕊️",
          "🦅",
          "🦆",
          "🦢",
          "🦉",
          "🦩",
          "🦚",
          "🦜",
          "🐸",
          "🐊",
          "🐢",
          "🦎",
          "🐍",
          "🐲",
          "🐉",
          "🦕",
          "🦖",
          "🐳",
          "🐋",
          "🐬",
          "🐟",
          "🐠",
          "🐡",
          "🦈",
          "🐙",
          "🐚",
          "🐌",
          "🦋",
          "🐛",
          "🐜",
          "🐝",
          "🐞",
          "🦗",
          "🕷️",
          "🦂",
          "🦟",
          "🦠",
          "💐",
          "🌸",
          "💮",
          "🏵️",
          "🌹",
          "🥀",
          "🌺",
          "🌻",
          "🌼",
          "🌷",
          "🌱",
          "🪴",
          "🌲",
          "🌳",
          "🌴",
          "🌵",
          "🌶️",
          "🍄",
          "🌾",
          "💐",
          "🌸",
          "💮",
          "🏵️",
          "🌹",
          "🥀",
          "🌺",
          "🌻",
          "🌼",
          "🌷",
        ];

        const pickerHtml = `
                <div id="emojiPicker" class="emoji-picker">
                    <div class="emoji-grid">
                        ${emojis
                          .map(
                            (emoji) =>
                              `<span class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</span>`
                          )
                          .join("")}
                    </div>
                </div>
            `;

        const emojiBtn = document.getElementById("emojiBtn");
        emojiBtn.insertAdjacentHTML("afterend", pickerHtml);

        // Close picker when clicking outside
        setTimeout(() => {
          document.addEventListener("click", function closeEmojiPicker(e) {
            if (
              !e.target.closest("#emojiPicker") &&
              !e.target.closest("#emojiBtn")
            ) {
              const picker = document.getElementById("emojiPicker");
              if (picker) picker.remove();
              document.removeEventListener("click", closeEmojiPicker);
            }
          });
        }, 100);
      }

      function insertEmoji(emoji) {
        const messageInput = document.getElementById("messageInput");
        const currentValue = messageInput.value;
        const cursorPosition = messageInput.selectionStart;

        const newValue =
          currentValue.slice(0, cursorPosition) +
          emoji +
          currentValue.slice(cursorPosition);
        messageInput.value = newValue;

        // Set cursor position after the emoji
        messageInput.focus();
        messageInput.setSelectionRange(
          cursorPosition + emoji.length,
          cursorPosition + emoji.length
        );

        // Close emoji picker
        const picker = document.getElementById("emojiPicker");
        if (picker) picker.remove();
      }

      function getFileIcon(mimeType) {
        if (!mimeType) return '<i class="fas fa-file"></i>';

        if (mimeType.startsWith("image/"))
          return '<i class="fas fa-image"></i>';
        if (mimeType.startsWith("video/"))
          return '<i class="fas fa-video"></i>';
        if (mimeType.startsWith("audio/"))
          return '<i class="fas fa-music"></i>';
        if (mimeType.includes("pdf")) return '<i class="fas fa-file-pdf"></i>';
        if (mimeType.includes("word") || mimeType.includes("document"))
          return '<i class="fas fa-file-word"></i>';
        if (mimeType.includes("text")) return '<i class="fas fa-file-alt"></i>';
        if (mimeType.includes("zip") || mimeType.includes("archive"))
          return '<i class="fas fa-file-archive"></i>';

        return '<i class="fas fa-file"></i>';
      }

      function openFileInNewTab(fileUrl) {
        window.open(fileUrl, "_blank");
      }

      function downloadFile(fileUrl, fileName) {
        const link = document.createElement("a");
        link.href = fileUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }

      function handleTyping() {
        if (!currentChatTeam || !organiserSocket) return;

        if (!isTyping) {
          isTyping = true;
          organiserSocket.emit("typing", {
            teamId: currentChatTeam,
            userId: currentUser?.data?._id,
            userName: `${currentUser?.data?.firstName} ${currentUser?.data?.lastName}`,
          });
        }

        clearTimeout(typingTimer);
        typingTimer = setTimeout(stopTyping, 1000);
      }

      function stopTyping() {
        if (isTyping && currentChatTeam && organiserSocket) {
          isTyping = false;
          organiserSocket.emit("stop typing", {
            teamId: currentChatTeam,
            userId: currentUser?.data?._id,
          });
        }
        clearTimeout(typingTimer);
      }

      function showTypingIndicator(userName) {
        const typingIndicator = document.getElementById("typingIndicator");
        if (typingIndicator) {
          typingIndicator.style.display = "flex";
          typingIndicator.querySelector(
            ".typing-text"
          ).textContent = `${userName} is typing...`;
        }
      }

      function hideTypingIndicator() {
        const typingIndicator = document.getElementById("typingIndicator");
        if (typingIndicator) {
          typingIndicator.style.display = "none";
        }
      }

      function showSystemMessage(message) {
        const chatMessagesContainer = document.getElementById("chatMessages");
        if (!chatMessagesContainer) return;

        const systemElement = document.createElement("div");
        systemElement.className = "system-message";
        systemElement.textContent = message;

        chatMessagesContainer.appendChild(systemElement);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      function getSenderInitials(sender) {
        if (!sender) return "?";
        const firstName = sender.firstName || "";
        const lastName = sender.lastName || "";
        return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || "?";
      }

      function escapeHtml(text) {
        const div = document.createElement("div");
        div.textContent = text;
        return div.innerHTML;
      }

      // Task management
      async function loadTasks() {
        const tasksContent = document.getElementById("tasksContent");

        try {
          showLoadingState("tasksContent");

          // Fetch tasks for the organiser
          const response = await fetch("/api/tasks?organiser=true");

          if (response.ok) {
            const data = await response.json();
            const tasks = data.data.tasks || [];

            console.log("📋 Tasks loaded:", tasks);

            if (tasks.length === 0) {
              tasksContent.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-tasks"></i>
                                <h3>No Tasks Found</h3>
                                <p>Create your first task to get started with task management</p>
                                <button class="btn btn-primary" onclick="openCreateTaskModal()">
                                    <i class="fas fa-plus"></i>
                                    Create Task
                                </button>
                            </div>
                        `;
            } else {
              // Group tasks by status
              const tasksByStatus = {
                todo: tasks.filter((task) => task.status === "todo"),
                in_progress: tasks.filter(
                  (task) => task.status === "in_progress"
                ),
                review: tasks.filter((task) => task.status === "review"),
                completed: tasks.filter((task) => task.status === "completed"),
              };

              tasksContent.innerHTML = `
                            <div class="task-management-header">
                                <h2>Task Management</h2>
                                <button class="btn btn-primary" onclick="openCreateTaskModal()">
                                    <i class="fas fa-plus"></i>
                                    Create Task
                                </button>
                            </div>
                            
                            <div class="task-board">
                                <div class="task-column">
                                    <div class="task-column-header">
                                        <h3>To Do (${
                                          tasksByStatus.todo.length
                                        })</h3>
                                    </div>
                                    <div class="task-list">
                                        ${tasksByStatus.todo
                                          .map((task) => createTaskCard(task))
                                          .join("")}
                                    </div>
                                </div>
                                
                                <div class="task-column">
                                    <div class="task-column-header">
                                        <h3>In Progress (${
                                          tasksByStatus.in_progress.length
                                        })</h3>
                                    </div>
                                    <div class="task-list">
                                        ${tasksByStatus.in_progress
                                          .map((task) => createTaskCard(task))
                                          .join("")}
                                    </div>
                                </div>
                                
                                <div class="task-column">
                                    <div class="task-column-header">
                                        <h3>Review (${
                                          tasksByStatus.review.length
                                        })</h3>
                                    </div>
                                    <div class="task-list">
                                        ${tasksByStatus.review
                                          .map((task) => createTaskCard(task))
                                          .join("")}
                                    </div>
                                </div>
                                
                                <div class="task-column">
                                    <div class="task-column-header">
                                        <h3>Completed (${
                                          tasksByStatus.completed.length
                                        })</h3>
                                    </div>
                                    <div class="task-list">
                                        ${tasksByStatus.completed
                                          .map((task) => createTaskCard(task))
                                          .join("")}
                                    </div>
                                </div>
                            </div>
                        `;
            }
          } else {
            console.error("Failed to load tasks:", response.status);
            tasksContent.innerHTML = `
                        <div class="error-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h3>Failed to Load Tasks</h3>
                            <p>Unable to load tasks. Please try again.</p>
                            <button class="btn btn-primary" onclick="loadTasks()">
                                <i class="fas fa-refresh"></i>
                                Retry
                            </button>
                        </div>
                    `;
          }
        } catch (error) {
          console.error("Error loading tasks:", error);
          tasksContent.innerHTML = `
                    <div class="error-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error Loading Tasks</h3>
                        <p>An error occurred while loading tasks.</p>
                        <button class="btn btn-primary" onclick="loadTasks()">
                            <i class="fas fa-refresh"></i>
                            Retry
                        </button>
                    </div>
                `;
        }
      }

      function createTaskCard(task) {
        const priorityColors = {
          low: "#28a745",
          medium: "#ffc107",
          high: "#fd7e14",
          urgent: "#dc3545",
        };

        const dueDate = task.dueDate
          ? new Date(task.dueDate).toLocaleDateString()
          : "No due date";
        const teamName = task.team?.name || "Unknown Team";
        const assignedTo = task.assignedTo
          ? `${task.assignedTo.firstName} ${task.assignedTo.lastName}`
          : "Unassigned";

        return `
                <div class="task-card" data-task-id="${task._id}">
                    <div class="task-card-header">
                        <h4 class="task-title">${task.title}</h4>
                        <div class="task-priority" style="background-color: ${
                          priorityColors[task.priority]
                        }">
                            ${task.priority.toUpperCase()}
                        </div>
                    </div>
                    
                    ${
                      task.description
                        ? `<p class="task-description">${task.description}</p>`
                        : ""
                    }
                    
                    <div class="task-meta">
                        <div class="task-team">
                            <i class="fas fa-users"></i>
                            ${teamName}
                        </div>
                        <div class="task-assignee">
                            <i class="fas fa-user"></i>
                            ${assignedTo}
                        </div>
                        <div class="task-due-date">
                            <i class="fas fa-calendar"></i>
                            ${dueDate}
                        </div>
                    </div>
                    
                    <div class="task-actions">
                        ${
                          task.status !== "completed"
                            ? `
                            <button class="btn btn-sm btn-success" onclick="updateTaskStatus('${task._id}', 'completed')">
                                <i class="fas fa-check"></i>
                                Mark Complete
                            </button>
                        `
                            : `
                            <span class="task-status completed">
                                <i class="fas fa-check-circle"></i>
                                Completed
                            </span>
                        `
                        }
                        <button class="btn btn-sm btn-edit" onclick="editTask('${
                          task._id
                        }')">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn btn-sm btn-delete" onclick="deleteTask('${
                          task._id
                        }')">
                            <i class="fas fa-trash"></i>
                            Delete
                        </button>
                    </div>
                </div>
            `;
      }

      // Task action functions
      async function editTask(taskId) {
        try {
          // Fetch task details
          const response = await fetch(`/api/tasks/${taskId}`);
          if (!response.ok) {
            showNotification("Failed to load task details", "error");
            return;
          }

          const data = await response.json();
          const task = data.data.task;

          // Populate the edit form
          document.getElementById("editTaskId").value = task._id;
          document.getElementById("editTaskTitle").value = task.title;
          document.getElementById("editTaskDescription").value =
            task.description || "";
          document.getElementById("editTaskPriority").value = task.priority;
          document.getElementById("editTaskStatus").value = task.status;
          document.getElementById("editTaskEstimatedHours").value =
            task.estimatedHours || "";

          // Set due date
          if (task.dueDate) {
            const date = new Date(task.dueDate);
            document.getElementById("editTaskDueDate").value = date
              .toISOString()
              .split("T")[0];
          }

          // Populate team dropdown
          loadTeamSelects();
          setTimeout(() => {
            document.getElementById("editTaskTeam").value =
              task.team._id || task.team;
          }, 200);

          // Open the modal
          openModal("editTaskModal");
        } catch (error) {
          console.error("Error loading task for edit:", error);
          showNotification("Failed to load task details", "error");
        }
      }

      async function updateTask(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const taskId = formData.get("taskId");
        const taskData = {
          title: formData.get("title"),
          team: formData.get("team"),
          priority: formData.get("priority"),
          status: formData.get("status"),
        };

        // Add optional fields
        const description = formData.get("description");
        if (description) taskData.description = description;

        const dueDate = formData.get("dueDate");
        if (dueDate) taskData.dueDate = dueDate;

        const estimatedHours = formData.get("estimatedHours");
        if (estimatedHours)
          taskData.estimatedHours = parseFloat(estimatedHours);

        try {
          const response = await fetch(`/api/tasks/${taskId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(taskData),
          });

          if (response.ok) {
            showNotification("Task updated successfully!", "success");
            closeModal("editTaskModal");
            loadTasks(); // Reload the task list
            loadDashboardData(true); // Force refresh dashboard stats
          } else {
            const errorData = await response.json();
            showNotification(
              errorData.message || "Failed to update task",
              "error"
            );
          }
        } catch (error) {
          console.error("Error updating task:", error);
          showNotification("Failed to update task", "error");
        }
      }

      async function deleteTask(taskId) {
        // Store the task ID and find the task details
        deleteTaskId = taskId;

        // Find the task to get its name
        const task = tasks.find((t) => t._id === taskId);
        const taskName = task ? task.title : "Unknown Task";

        // Update the modal with task name
        document.getElementById("deleteTaskName").textContent = taskName;

        // Show the confirmation modal
        openModal("deleteTaskModal");
      }

      async function confirmDeleteTask() {
        if (!deleteTaskId) return;

        try {
          const response = await fetch(`/api/tasks/${deleteTaskId}`, {
            method: "DELETE",
            credentials: "include", // Include cookies for session authentication
          });

          if (response.ok) {
            showNotification("Task deleted successfully!", "success");
            closeModal("deleteTaskModal");

            // Reload the page to fetch latest updates
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            const errorData = await response.json();
            showNotification(
              errorData.message || "Failed to delete task",
              "error"
            );
          }
        } catch (error) {
          console.error("Error deleting task:", error);
          showNotification("Failed to delete task", "error");
        }

        // Reset the delete task ID
        deleteTaskId = null;
      }

      async function updateTaskStatus(taskId, status) {
        try {
          console.log(`Updating task ${taskId} to status: ${status}`);

          const response = await fetch(`/api/tasks/${taskId}/status`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include", // Include cookies for session authentication
            body: JSON.stringify({ status }),
          });

          if (response.ok) {
            showNotification(`Task marked as ${status}!`, "success");

            // If task was marked as completed, reload the page to fetch latest data
            if (status === "completed") {
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              // For other status updates, reload tasks and dashboard stats
              loadTasks();
              loadDashboardData(true); // Force refresh dashboard stats
            }
          } else {
            const errorData = await response.json();
            showNotification(
              errorData.message || "Failed to update task status",
              "error"
            );
          }
        } catch (error) {
          console.error("Error updating task status:", error);
          showNotification("Failed to update task status", "error");
        }
      }

      function showTaskManagement() {
        switchSection("tasks");
      }

      // Member management
      function loadMembers() {
        const membersContent = document.getElementById("membersContent");
        // Implementation for member management interface
        membersContent.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-user-friends"></i>
                    <h3>Member Management</h3>
                    <p>Member management interface will be implemented here</p>
                </div>
            `;
      }

      function showMemberManagement() {
        switchSection("members");
      }

      // Settings
      function loadSettings() {
        const settingsContent = document.getElementById("settingsContent");

        // Get user data from the global currentUser variable
        const user = currentUser?.data || {};
        const userFirstName = user.firstName || "";
        const userLastName = user.lastName || "";
        const userName =
          userFirstName + (userLastName ? " " + userLastName : "") || "User";
        const userEmail = user.email || "user@example.com";
        const userRole = user.role || "organiser";
        const userBio = user.bio || "";
        const joinDate = user.createdAt
          ? new Date(user.createdAt).toLocaleDateString()
          : "Unknown";

        settingsContent.innerHTML = `
                <div class="settings-container">
                    <!-- Settings Navigation -->
                    <div class="settings-nav">
                        <div class="settings-nav-item active" data-tab="profile">
                            <i class="fas fa-user"></i>
                            <span>Profile</span>
                        </div>
                        <div class="settings-nav-item" data-tab="account">
                            <i class="fas fa-shield-alt"></i>
                            <span>Account & Security</span>
                        </div>
                        <div class="settings-nav-item" data-tab="preferences">
                            <i class="fas fa-cog"></i>
                            <span>Preferences</span>
                        </div>
                        <div class="settings-nav-item" data-tab="notifications">
                            <i class="fas fa-bell"></i>
                            <span>Notifications</span>
                        </div>
                        <div class="settings-nav-item" data-tab="teams">
                            <i class="fas fa-users"></i>
                            <span>Team Settings</span>
                        </div>
                    </div>

                    <!-- Settings Content -->
                    <div class="settings-content">
                        <!-- Profile Tab -->
                        <div class="settings-tab active" id="profile-tab">
                            <div class="settings-section">
                                <h3 class="settings-section-title">Profile Information</h3>
                                <div class="profile-card">
                                    <div class="profile-avatar">
                                        <div class="avatar-circle">
                                            <span class="avatar-text">${userName
                                              .charAt(0)
                                              .toUpperCase()}</span>
                                        </div>
                                        <button class="btn btn-sm btn-secondary" onclick="changeAvatar()">
                                            <i class="fas fa-camera"></i>
                                            Change Photo
                                        </button>
                                    </div>
                                    <div class="profile-info">
                                        <form id="profileForm" onsubmit="updateProfile(event)">
                                            <div class="form-row">
                                                <div class="form-group">
                                                    <label class="form-label">First Name</label>
                                                    <input type="text" class="form-input" id="profileFirstName" value="${userFirstName}" required>
                                                </div>
                                                <div class="form-group">
                                                    <label class="form-label">Last Name</label>
                                                    <input type="text" class="form-input" id="profileLastName" value="${userLastName}">
                                                </div>
                                            </div>
                                            <div class="form-row">
                                                <div class="form-group">
                                                    <label class="form-label">Email</label>
                                                    <input type="email" class="form-input" id="profileEmail" value="${userEmail}" readonly>
                                                </div>
                                                <div class="form-group">
                                                    <label class="form-label">Role</label>
                                                    <input type="text" class="form-input" value="${userRole}" readonly>
                                                </div>
                                            </div>
                                            <div class="form-row">
                                                <div class="form-group">
                                                    <label class="form-label">Member Since</label>
                                                    <input type="text" class="form-input" value="${joinDate}" readonly>
                                                </div>
                                                <div class="form-group">
                                                    <!-- Empty space for alignment -->
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="form-label">Bio</label>
                                                <textarea class="form-textarea" id="profileBio" placeholder="Tell us about yourself..." rows="3">${userBio}</textarea>
                                            </div>
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-save"></i>
                                                Save Changes
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Account & Security Tab -->
                        <div class="settings-tab" id="account-tab">
                            <div class="settings-section">
                                <h3 class="settings-section-title">Change Password</h3>
                                <form id="passwordForm" onsubmit="changePassword(event)">
                                    <div class="form-group">
                                        <label class="form-label">Current Password</label>
                                        <input type="password" class="form-input" id="currentPassword" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">New Password</label>
                                        <input type="password" class="form-input" id="newPassword" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Confirm New Password</label>
                                        <input type="password" class="form-input" id="confirmPassword" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-lock"></i>
                                        Update Password
                                    </button>
                                </form>
                            </div>

                            <div class="settings-section">
                                <h3 class="settings-section-title">Security Settings</h3>
                                <div class="security-options">
                                    <div class="security-option">
                                        <div class="security-option-info">
                                            <h4>Two-Factor Authentication</h4>
                                            <p>Add an extra layer of security to your account</p>
                                        </div>
                                        <button class="btn btn-secondary" onclick="setup2FA()">
                                            <i class="fas fa-shield-alt"></i>
                                            Enable 2FA
                                        </button>
                                    </div>
                                    <div class="security-option">
                                        <div class="security-option-info">
                                            <h4>Login History</h4>
                                            <p>View recent login activity and manage sessions</p>
                                        </div>
                                        <button class="btn btn-secondary" onclick="viewLoginHistory()">
                                            <i class="fas fa-history"></i>
                                            View History
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Preferences Tab -->
                        <div class="settings-tab" id="preferences-tab">
                            <div class="settings-section">
                                <h3 class="settings-section-title">Appearance</h3>
                                <div class="preference-group">
                                    <label class="preference-label">
                                        <span>Theme</span>
                                        <select class="form-select" id="themeSelect">
                                            <option value="light">Light</option>
                                            <option value="dark">Dark</option>
                                            <option value="auto">Auto</option>
                                        </select>
                                    </label>
                                    <label class="preference-label">
                                        <span>Language</span>
                                        <select class="form-select" id="languageSelect">
                                            <option value="en">English</option>
                                            <option value="es">Spanish</option>
                                            <option value="fr">French</option>
                                        </select>
                                    </label>
                                </div>
                            </div>

                            <div class="settings-section">
                                <h3 class="settings-section-title">Dashboard</h3>
                                <div class="preference-group">
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="showCompletedTasks" checked>
                                        <span class="checkmark"></span>
                                        <span>Show completed tasks</span>
                                    </label>
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="autoRefresh" checked>
                                        <span class="checkmark"></span>
                                        <span>Auto-refresh dashboard</span>
                                    </label>
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="showTeamStats">
                                        <span class="checkmark"></span>
                                        <span>Show detailed team statistics</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Notifications Tab -->
                        <div class="settings-tab" id="notifications-tab">
                            <div class="settings-section">
                                <h3 class="settings-section-title">Email Notifications</h3>
                                <div class="preference-group">
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="emailTaskUpdates" checked>
                                        <span class="checkmark"></span>
                                        <span>Task updates and assignments</span>
                                    </label>
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="emailTeamInvites" checked>
                                        <span class="checkmark"></span>
                                        <span>Team invitations and member changes</span>
                                    </label>
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="emailDeadlines" checked>
                                        <span class="checkmark"></span>
                                        <span>Upcoming deadlines and reminders</span>
                                    </label>
                                </div>
                            </div>

                            <div class="settings-section">
                                <h3 class="settings-section-title">Push Notifications</h3>
                                <div class="preference-group">
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="pushMessages" checked>
                                        <span class="checkmark"></span>
                                        <span>New chat messages</span>
                                    </label>
                                    <label class="preference-checkbox">
                                        <input type="checkbox" id="pushTaskAssignments">
                                        <span class="checkmark"></span>
                                        <span>Task assignments</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Team Settings Tab -->
                        <div class="settings-tab" id="teams-tab">
                            <div class="settings-section">
                                <h3 class="settings-section-title">Default Team Settings</h3>
                                <form id="teamSettingsForm" onsubmit="updateTeamSettings(event)">
                                    <div class="form-group">
                                        <label class="form-label">Default Team Visibility</label>
                                        <select class="form-select" id="defaultVisibility">
                                            <option value="private">Private</option>
                                            <option value="public">Public</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Auto-assign Tasks</label>
                                        <select class="form-select" id="autoAssign">
                                            <option value="none">No auto-assignment</option>
                                            <option value="random">Random assignment</option>
                                            <option value="balanced">Balanced workload</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i>
                                        Save Team Settings
                                    </button>
                                </form>
                            </div>

                            <div class="settings-section">
                                <h3 class="settings-section-title">Danger Zone</h3>
                                <div class="danger-zone">
                                    <div class="danger-option">
                                        <div class="danger-option-info">
                                            <h4>Export Data</h4>
                                            <p>Download all your team and task data</p>
                                        </div>
                                        <button class="btn btn-secondary" onclick="exportData()">
                                            <i class="fas fa-download"></i>
                                            Export Data
                                        </button>
                                    </div>
                                    <div class="danger-option">
                                        <div class="danger-option-info">
                                            <h4>Delete Account</h4>
                                            <p>Permanently delete your account and all data</p>
                                        </div>
                                        <button class="btn btn-danger" onclick="deleteAccount()">
                                            <i class="fas fa-trash"></i>
                                            Delete Account
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

        // Initialize settings tabs
        initializeSettingsTabs();
      }

      // Settings support functions
      function initializeSettingsTabs() {
        // Add click listeners for settings navigation
        document.querySelectorAll(".settings-nav-item").forEach((item) => {
          item.addEventListener("click", function () {
            const tabId = this.dataset.tab;
            switchSettingsTab(tabId);
          });
        });
      }

      function switchSettingsTab(tabId) {
        // Update navigation
        document.querySelectorAll(".settings-nav-item").forEach((item) => {
          item.classList.remove("active");
        });
        document.querySelector(`[data-tab="${tabId}"]`).classList.add("active");

        // Update content
        document.querySelectorAll(".settings-tab").forEach((tab) => {
          tab.classList.remove("active");
        });
        document.getElementById(`${tabId}-tab`).classList.add("active");
      }

      async function updateProfile(event) {
        event.preventDefault();

        const firstName = document
          .getElementById("profileFirstName")
          .value.trim();
        const lastName = document
          .getElementById("profileLastName")
          .value.trim();
        const bio = document.getElementById("profileBio").value.trim();

        // Basic validation
        if (!firstName) {
          showNotification("First name is required!", "error");
          return;
        }

        try {
          const response = await fetch("/api/users/profile/me", {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              firstName: firstName,
              lastName: lastName,
              bio: bio,
            }),
          });

          const data = await response.json();

          if (response.ok) {
            showNotification("Profile updated successfully!", "success");

            // Update the current user data
            if (currentUser && currentUser.data) {
              currentUser.data.firstName = firstName;
              currentUser.data.lastName = lastName;
              currentUser.data.bio = bio;
            }

            // Update the sidebar display
            updateUserInfo();

            // Update avatar display in settings
            const avatarText = document.querySelector(
              ".avatar-circle .avatar-text"
            );
            if (avatarText) {
              avatarText.textContent = firstName.charAt(0).toUpperCase();
            }
          } else {
            showNotification(
              data.message || "Failed to update profile",
              "error"
            );
          }
        } catch (error) {
          console.error("Error updating profile:", error);
          showNotification("Network error: Failed to update profile", "error");
        }
      }

      function updateSettingsAvatar(newUsername) {
        // Update the avatar in settings
        const settingsAvatar = document.querySelector(
          ".avatar-circle .avatar-text"
        );
        if (settingsAvatar) {
          settingsAvatar.textContent = newUsername.charAt(0).toUpperCase();
        }
      }

      async function changePassword(event) {
        event.preventDefault();

        const currentPassword =
          document.getElementById("currentPassword").value;
        const newPassword = document.getElementById("newPassword").value;
        const confirmPassword =
          document.getElementById("confirmPassword").value;

        // Basic validation
        if (!currentPassword || !newPassword || !confirmPassword) {
          showNotification("All password fields are required!", "error");
          return;
        }

        if (newPassword !== confirmPassword) {
          showNotification("Passwords do not match!", "error");
          return;
        }

        if (newPassword.length < 8) {
          showNotification(
            "New password must be at least 8 characters long!",
            "error"
          );
          return;
        }

        // Check password strength
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/;
        if (!passwordRegex.test(newPassword)) {
          showNotification(
            "New password must contain at least one lowercase letter, one uppercase letter, and one number!",
            "error"
          );
          return;
        }

        try {
          const response = await fetch("/api/users/profile/password", {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              currentPassword: currentPassword,
              newPassword: newPassword,
            }),
          });

          const data = await response.json();

          if (response.ok) {
            showNotification("Password changed successfully!", "success");
            document.getElementById("passwordForm").reset();
          } else {
            showNotification(
              data.message || "Failed to change password",
              "error"
            );
          }
        } catch (error) {
          console.error("Error changing password:", error);
          showNotification("Network error: Failed to change password", "error");
        }
      }

      function changeAvatar() {
        showNotification("Avatar change feature coming soon!", "info");
      }

      function setup2FA() {
        showNotification(
          "Two-factor authentication setup coming soon!",
          "info"
        );
      }

      function viewLoginHistory() {
        showNotification("Login history feature coming soon!", "info");
      }

      async function updateTeamSettings(event) {
        event.preventDefault();

        try {
          showNotification("Team settings updated successfully!", "success");
        } catch (error) {
          showNotification("Failed to update team settings", "error");
        }
      }

      function exportData() {
        showNotification("Data export feature coming soon!", "info");
      }

      function deleteAccount() {
        // Set the account name in the modal
        const user = currentUser?.data || {};
        const userName =
          user.firstName + (user.lastName ? " " + user.lastName : "") || "User";
        document.getElementById("deleteAccountName").textContent = userName;

        // Show the modal
        openModal("deleteAccountModal");
      }

      async function confirmDeleteAccount() {
        try {
          const response = await fetch("/api/users/me", {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            closeModal("deleteAccountModal");
            showNotification(
              "Account deleted successfully. Redirecting...",
              "success"
            );

            // Wait a moment then redirect to login page
            setTimeout(() => {
              window.location.href = "/login";
            }, 2000);
          } else {
            const data = await response.json();
            showNotification(
              data.message || "Failed to delete account",
              "error"
            );
          }
        } catch (error) {
          console.error("Error deleting account:", error);
          showNotification("Network error: Failed to delete account", "error");
        }
      }

      // Modal management
      function setupModals() {
        // Close modals when clicking outside
        document.querySelectorAll(".modal").forEach((modal) => {
          modal.addEventListener("click", function (e) {
            if (e.target === modal) {
              closeModal(modal.id);
            }
          });
        });

        // Close modals with Escape key
        document.addEventListener("keydown", function (e) {
          if (e.key === "Escape") {
            document.querySelectorAll(".modal.active").forEach((modal) => {
              closeModal(modal.id);
            });
          }
        });
      }

      function setupDateValidation() {
        // Set minimum date to today for create task form
        const taskDueDateInput = document.getElementById("taskDueDate");
        const editTaskDueDateInput = document.getElementById("editTaskDueDate");

        const today = new Date().toISOString().split("T")[0];

        if (taskDueDateInput) {
          taskDueDateInput.setAttribute("min", today);
        }

        if (editTaskDueDateInput) {
          editTaskDueDateInput.setAttribute("min", today);
        }
      }

      function openModal(modalId) {
        document.getElementById(modalId).classList.add("active");
      }

      function closeModal(modalId) {
        document.getElementById(modalId).classList.remove("active");
      }

      function openCreateTeamModal() {
        openModal("createTeamModal");
      }

      function openCreateTaskModal() {
        // Ensure team selects are loaded before opening modal
        loadTeamSelects();

        // Set minimum date to today
        const taskDueDateInput = document.getElementById("taskDueDate");
        if (taskDueDateInput) {
          const today = new Date().toISOString().split("T")[0];
          taskDueDateInput.setAttribute("min", today);
        }

        openModal("createTaskModal");
      }

      function openInviteMemberModal() {
        openModal("inviteMemberModal");
      }

      // Team operations
      async function createTeam(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const teamData = {
          name: formData.get("name"),
          description: formData.get("description"),
          isPublic: formData.get("isPublic") === "true",
          tags: formData.get("category") ? [formData.get("category")] : [],
        };

        console.log("Creating team with data:", teamData);

        try {
          const response = await fetch("/api/teams", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(teamData),
          });

          console.log("Response status:", response.status);
          console.log("Response headers:", response.headers);

          if (response.ok) {
            const responseData = await response.json();
            console.log("✅ Team created successfully:", responseData);
            showNotification("Team created successfully!", "success");
            closeModal("createTeamModal");

            // Force cache-busting reload to ensure fresh data
            setTimeout(() => {
              // Clear any cached data first
              if ("caches" in window) {
                caches.keys().then((names) => {
                  names.forEach((name) => {
                    caches.delete(name);
                  });
                });
              }
              // Force reload with cache busting
              const url = new URL(window.location);
              url.searchParams.set("_t", Date.now());
              window.location.href = url.toString();
            }, 1000); // Give time for the notification to show

            // Reset form
            event.target.reset();
          } else {
            const errorText = await response.text();
            console.error("Error response text:", errorText);

            let error;
            try {
              error = JSON.parse(errorText);
            } catch (e) {
              error = { message: errorText || "Failed to create team" };
            }

            console.error("Error response:", error);
            showNotification(error.message || "Failed to create team", "error");
          }
        } catch (error) {
          console.error("Network error creating team:", error);
          showNotification("Network error: Failed to create team", "error");
        }
      }

      async function createTask(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const title = formData.get("title");
        const team = formData.get("team");
        const dueDate = formData.get("dueDate");

        // Validation
        if (!title || title.trim() === "") {
          showNotification("Task title is required!", "error");
          return;
        }

        if (!team) {
          showNotification("Please select a team!", "error");
          return;
        }

        // Validate due date - should not be in the past
        if (dueDate) {
          const today = new Date();
          const selectedDate = new Date(dueDate);
          today.setHours(0, 0, 0, 0); // Reset time to start of day
          selectedDate.setHours(0, 0, 0, 0);

          if (selectedDate < today) {
            showNotification("Due date cannot be in the past!", "error");
            return;
          }
        }

        const taskData = {
          title: title.trim(),
          team: team,
          priority: formData.get("priority") || "medium",
        };

        // Add optional fields only if they have values
        const description = formData.get("description");
        if (description && description.trim()) {
          taskData.description = description.trim();
        }

        if (dueDate) {
          taskData.dueDate = dueDate;
        }

        const estimatedHours = formData.get("estimatedHours");
        if (estimatedHours && parseFloat(estimatedHours) > 0) {
          taskData.estimatedHours = parseFloat(estimatedHours);
        }

        console.log("📝 Creating task with data:", taskData);

        try {
          const response = await fetch("/api/tasks", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(taskData),
          });

          console.log("📡 Response status:", response.status);

          if (response.ok) {
            showNotification("Task created successfully!", "success");
            closeModal("createTaskModal");

            // Reload the page to fetch latest updates
            setTimeout(() => {
              window.location.reload();
            }, 1000);

            event.target.reset();
          } else {
            const errorData = await response.json();
            console.error("❌ Task creation failed:", errorData);

            // Show detailed validation errors
            if (errorData.errors && errorData.errors.length > 0) {
              const errorMessages = errorData.errors
                .map((err) => err.msg)
                .join(", ");
              showNotification(`Validation failed: ${errorMessages}`, "error");
            } else {
              showNotification(
                errorData.message || "Failed to create task",
                "error"
              );
            }
          }
        } catch (error) {
          console.error("Error creating task:", error);
          showNotification("Failed to create task", "error");
        }
      }

      async function inviteMember(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const inviteData = {
          teamId: formData.get("team"),
          email: formData.get("email"),
          message: formData.get("message"),
        };

        try {
          const response = await fetch("/api/invitations/send-invitation", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify(inviteData),
          });

          const result = await response.json();

          if (response.ok) {
            showNotification(
              result.message || "Invitation sent successfully!",
              "success"
            );
            closeModal("inviteMemberModal");
            event.target.reset();
          } else {
            showNotification(
              result.message || "Failed to send invitation",
              "error"
            );
          }
        } catch (error) {
          console.error("Error sending invitation:", error);
          showNotification("Failed to send invitation", "error");
        }
      }

      // Team actions
      function viewTeamDetails(teamId) {
        console.log("Viewing team details for:", teamId);
        window.currentTeamId = teamId;

        // Show loading state
        openModal("viewTeamModal");
        document.getElementById("viewTeamName").textContent = "Loading...";

        // Fetch team details
        fetch(`/api/teams/${teamId}`, {
          method: "GET",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        })
          .then((response) => {
            console.log("API Response status:", response.status);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            console.log("Received API result:", result);
            const team = result.data?.team || result; // Handle both wrapped and direct responses
            console.log("Extracted team data:", team);
            console.log("Team structure:", JSON.stringify(team, null, 2));
            populateTeamDetailsModal(team);
          })
          .catch((error) => {
            console.error("Error fetching team details:", error);
            showNotification("Error loading team details", "error");
            closeModal("viewTeamModal");
          });
      }

      function populateTeamDetailsModal(team) {
        console.log("Populating modal with team:", team);

        // Basic info
        const teamName = team.name || "Unnamed Team";
        const teamDescription = team.description || "";
        console.log("Team name:", teamName, "Description:", teamDescription);

        // Set team name (main title)
        document.getElementById("viewTeamName").textContent = teamName;

        // Set description - hide if empty or same as name
        const descriptionElement = document.getElementById(
          "viewTeamDescription"
        );
        if (
          teamDescription &&
          teamDescription !== teamName &&
          teamDescription.trim() !== ""
        ) {
          descriptionElement.textContent = teamDescription;
          descriptionElement.style.display = "block";
        } else {
          descriptionElement.style.display = "none";
        }

        // Meta info
        console.log(
          "Team visibility:",
          team.isPublic,
          "Category:",
          team.category,
          "Tags:",
          team.tags
        );
        document.getElementById("viewTeamVisibility").textContent =
          team.isPublic ? "Public" : "Private";
        document.getElementById(
          "viewTeamVisibility"
        ).className = `visibility-badge ${
          team.isPublic ? "public" : "private"
        }`;

        // Use first tag as category if available, otherwise default to 'General'
        const category =
          team.tags && team.tags.length > 0 ? team.tags[0] : "General";
        document.getElementById("viewTeamCategory").textContent = category;

        // Format creation date
        console.log("Team created at:", team.createdAt);
        let createdDate = "Unknown";
        if (team.createdAt) {
          try {
            createdDate = new Date(team.createdAt).toLocaleDateString("en-US", {
              year: "numeric",
              month: "short",
              day: "numeric",
            });
          } catch (e) {
            console.error("Error formatting date:", e);
            createdDate = "Invalid Date";
          }
        }
        document.getElementById(
          "viewTeamCreated"
        ).textContent = `Created: ${createdDate}`;

        // Stats
        console.log(
          "Team admin:",
          team.admin,
          "Team members:",
          team.members,
          "Team stats:",
          team.stats
        );

        // TEMPORARY: Force team stats recalculation if stats look wrong
        if (
          team.stats &&
          (team.stats.completedTasks > team.stats.totalTasks ||
            team.stats.totalTasks < 0 ||
            team.stats.completedTasks < 0)
        ) {
          console.log("⚠️ Team stats look incorrect, forcing recalculation...");
          fetch(`/api/teams/${team._id}/stats`, {
            method: "GET",
            headers: { "Cache-Control": "no-cache" },
          })
            .then(() => {
              console.log("✅ Team stats recalculation requested");
              // Refresh the modal after a short delay
              setTimeout(() => {
                closeModal("viewTeamModal");
                viewTeam(team._id);
              }, 1000);
            })
            .catch((err) =>
              console.error("Failed to recalculate team stats:", err)
            );
        }

        // Avoid double counting admin in members
        const adminId = team.admin
          ? typeof team.admin === "object"
            ? team.admin._id
            : team.admin
          : null;
        const adminCount = team.admin ? 1 : 0;

        // Filter out admin from members array to avoid double counting
        const actualMembers = team.members
          ? team.members.filter((member) => {
              const memberId = typeof member === "object" ? member._id : member;
              return memberId !== adminId;
            })
          : [];

        const memberCount = adminCount + actualMembers.length;
        const taskCount = team.stats ? team.stats.totalTasks : 0;
        const completedTasks = team.stats ? team.stats.completedTasks : 0;
        const pendingTasks = taskCount - completedTasks;

        console.log(
          "Calculated stats - Members:",
          memberCount,
          "Tasks:",
          taskCount,
          "Completed:",
          completedTasks,
          "Pending:",
          pendingTasks
        );

        document.getElementById("viewTeamMemberCount").textContent =
          memberCount;
        document.getElementById("viewTeamTaskCount").textContent = taskCount;
        document.getElementById("viewTeamCompletedTasks").textContent =
          completedTasks;
        document.getElementById("viewTeamPendingTasks").textContent =
          pendingTasks;

        // Members list
        const membersContainer = document.getElementById("viewTeamMembers");
        membersContainer.innerHTML = "";

        // Add admin
        if (team.admin) {
          const adminElement = createMemberElement(team.admin, "Admin", true);
          membersContainer.appendChild(adminElement);
        }

        // Add members (excluding admin to avoid duplication)
        if (actualMembers.length > 0) {
          actualMembers.forEach((member) => {
            const memberElement = createMemberElement(member, "Member", false);
            membersContainer.appendChild(memberElement);
          });
        }

        if (memberCount === 0) {
          membersContainer.innerHTML =
            '<div class="empty-state">No members found</div>';
        }

        // For tasks, we'll need to fetch them separately or show a message
        const tasksContainer = document.getElementById("viewTeamTasks");
        tasksContainer.innerHTML =
          '<div class="empty-state">Tasks will be loaded separately</div>';

        // Optionally fetch recent tasks
        fetchRecentTasks(team._id);
      }

      function fetchRecentTasks(teamId) {
        fetch(`/api/tasks?team=${teamId}&limit=5`, {
          method: "GET",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        })
          .then((response) => response.json())
          .then((result) => {
            const tasks = result.data?.tasks || result.tasks || [];
            const tasksContainer = document.getElementById("viewTeamTasks");

            if (tasks.length > 0) {
              tasksContainer.innerHTML = "";
              tasks.forEach((task) => {
                const taskElement = createTaskElement(task);
                tasksContainer.appendChild(taskElement);
              });
            } else {
              tasksContainer.innerHTML =
                '<div class="empty-state">No tasks found</div>';
            }
          })
          .catch((error) => {
            console.error("Error fetching tasks:", error);
            const tasksContainer = document.getElementById("viewTeamTasks");
            tasksContainer.innerHTML =
              '<div class="empty-state">Error loading tasks</div>';
          });
      }

      function createMemberElement(member, role, isAdmin) {
        const memberDiv = document.createElement("div");
        memberDiv.className = "member-item";

        // Handle populated user data
        const name =
          member.firstName && member.lastName
            ? `${member.firstName} ${member.lastName}`
            : member.username || member.name || "Unknown User";
        const email = member.email || "";

        memberDiv.innerHTML = `
                <div class="member-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="member-info">
                    <div class="member-name">${name}</div>
                    <div class="member-email">${email}</div>
                </div>
                <div class="member-role ${
                  isAdmin ? "admin" : "member"
                }">${role}</div>
            `;

        return memberDiv;
      }

      function createTaskElement(task) {
        const taskDiv = document.createElement("div");
        taskDiv.className = "task-item";

        const statusClass =
          task.status === "completed" ? "completed" : "pending";
        const priorityClass = task.priority || "medium";
        const priorityText = (task.priority || "medium").toUpperCase();

        console.log(
          "Creating task element for:",
          task.title,
          "Priority:",
          task.priority,
          "Class:",
          priorityClass
        );

        taskDiv.innerHTML = `
                <div class="task-info">
                    <div class="task-title">${task.title}</div>
                    <div class="task-meta">
                        <span class="task-status ${statusClass}">${(
          task.status || "pending"
        ).toUpperCase()}</span>
                        <span class="task-priority ${priorityClass}" style="background-color: ${
          priorityClass === "medium"
            ? "#fff3cd"
            : priorityClass === "low"
            ? "#d4edda"
            : priorityClass === "high"
            ? "#ffeaa7"
            : "#fab1a0"
        }; color: ${
          priorityClass === "medium"
            ? "#856404"
            : priorityClass === "low"
            ? "#155724"
            : "#d63031"
        }; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 600; display: inline-block; margin: 0 0.25rem;">${priorityText}</span>
                        ${
                          task.dueDate
                            ? `<span class="task-due">DUE: ${new Date(
                                task.dueDate
                              ).toLocaleDateString()}</span>`
                            : ""
                        }
                    </div>
                </div>
            `;

        return taskDiv;
      }

      function editTeam(teamId) {
        console.log("Editing team:", teamId);
        window.currentEditTeamId = teamId;

        // Fetch team details first
        fetch(`/api/teams/${teamId}`, {
          method: "GET",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            const team = result.data?.team || result; // Handle both wrapped and direct responses
            console.log("Received team data for editing:", team);
            populateEditTeamModal(team);
            openModal("editTeamModal");
          })
          .catch((error) => {
            console.error("Error fetching team details for editing:", error);
            showNotification("Error loading team details for editing", "error");
          });
      }

      function populateEditTeamModal(team) {
        document.getElementById("editTeamId").value = team._id;
        document.getElementById("editTeamName").value = team.name || "";
        document.getElementById("editTeamDescription").value =
          team.description || "";
        document.getElementById("editTeamPrivacy").value = team.isPublic
          ? "true"
          : "false";

        // Handle tags - use first tag as category if available
        const category =
          team.tags && team.tags.length > 0 ? team.tags[0] : "general";
        document.getElementById("editTeamCategory").value = category;
      }

      function updateTeam(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const teamId = formData.get("teamId");

        const teamData = {
          name: formData.get("name"),
          description: formData.get("description"),
          isPublic: formData.get("isPublic") === "true",
          tags: [formData.get("category")], // Convert category to tags array
        };

        console.log("Updating team:", teamId, teamData);

        fetch(`/api/teams/${teamId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(teamData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((updatedTeam) => {
            console.log("Team updated successfully:", updatedTeam);
            showNotification("Team updated successfully", "success");
            closeModal("editTeamModal");

            // Force cache-busting reload to ensure fresh data
            setTimeout(() => {
              // Clear any cached data first
              if ("caches" in window) {
                caches.keys().then((names) => {
                  names.forEach((name) => {
                    caches.delete(name);
                  });
                });
              }
              // Force reload with cache busting
              const url = new URL(window.location);
              url.searchParams.set("_t", Date.now());
              window.location.href = url.toString();
            }, 1000); // Give time for the notification to show
          })
          .catch((error) => {
            console.error("Error updating team:", error);
            showNotification("Error updating team. Please try again.", "error");
          });
      }

      function manageTeamMembers(teamId) {
        console.log("Managing team members:", teamId);
        window.currentManageMembersTeamId = teamId;

        // Fetch team details first
        fetch(`/api/teams/${teamId}`, {
          method: "GET",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            const team = result.data?.team || result; // Handle both wrapped and direct responses
            console.log("Received team data for member management:", team);
            populateMembersModal(team);
            openModal("manageMembersModal");
          })
          .catch((error) => {
            console.error(
              "Error fetching team details for member management:",
              error
            );
            showNotification("Error loading team members", "error");
          });
      }

      function populateMembersModal(team) {
        document.getElementById("manageMembersTeamId").value = team._id;

        const membersContainer = document.getElementById("currentMembers");
        membersContainer.innerHTML = "";

        // Avoid double counting admin in members
        const adminId = team.admin
          ? typeof team.admin === "object"
            ? team.admin._id
            : team.admin
          : null;

        // Add admin
        if (team.admin) {
          const adminElement = createManageableMemberElement(
            team.admin,
            "Admin",
            true,
            team._id
          );
          membersContainer.appendChild(adminElement);
        }

        // Add members (excluding admin to avoid duplication)
        if (team.members && team.members.length > 0) {
          const actualMembers = team.members.filter((member) => {
            const memberId = typeof member === "object" ? member._id : member;
            return memberId !== adminId;
          });

          actualMembers.forEach((member) => {
            const memberElement = createManageableMemberElement(
              member,
              "Member",
              false,
              team._id
            );
            membersContainer.appendChild(memberElement);
          });
        }

        const memberCount =
          (team.admin ? 1 : 0) +
          (team.members
            ? team.members.filter((member) => {
                const memberId =
                  typeof member === "object" ? member._id : member;
                return memberId !== adminId;
              }).length
            : 0);

        if (memberCount === 0) {
          membersContainer.innerHTML =
            '<div class="empty-state">No members found</div>';
        }
      }

      function createManageableMemberElement(member, role, isAdmin, teamId) {
        const memberDiv = document.createElement("div");
        memberDiv.className = "manageable-member-item";

        // Handle populated user data
        const name =
          member.firstName && member.lastName
            ? `${member.firstName} ${member.lastName}`
            : member.username || member.name || "Unknown User";
        const email = member.email || "";

        memberDiv.innerHTML = `
                <div class="member-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="member-info">
                    <div class="member-name">${name}</div>
                    <div class="member-email">${email}</div>
                </div>
                <div class="member-role ${
                  isAdmin ? "admin" : "member"
                }">${role}</div>
                <div class="member-actions">
                    ${
                      !isAdmin
                        ? `
                        <button class="btn btn-sm btn-danger" onclick="removeMember('${teamId}', '${member._id}', '${name}')" title="Remove member">
                            <i class="fas fa-trash"></i>
                        </button>
                    `
                        : '<span class="admin-badge">Owner</span>'
                    }
                </div>
            `;

        return memberDiv;
      }

      function showAddMemberForm() {
        document.getElementById("addMemberSection").style.display = "block";
        document.getElementById("addMemberForm").reset();
      }

      function hideAddMemberForm() {
        document.getElementById("addMemberSection").style.display = "none";
      }

      function addTeamMember(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        const teamId = formData.get("teamId");
        const email = formData.get("email");
        const role = formData.get("role");

        console.log("Adding member to team:", teamId, email, role);

        // For now, we'll use the invite member endpoint
        const memberData = {
          email: email,
          team: teamId,
          role: role,
        };

        fetch("/api/teams/invite", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(memberData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            console.log("Member invited successfully:", result);
            showNotification("Member invitation sent successfully", "success");
            hideAddMemberForm();
            // Refresh the members list
            manageTeamMembers(teamId);
          })
          .catch((error) => {
            console.error("Error inviting member:", error);
            showNotification(
              "Error inviting member. Please try again.",
              "error"
            );
          });
      }

      function removeMember(teamId, memberId, memberName) {
        if (
          !confirm(
            `Are you sure you want to remove ${memberName} from the team?`
          )
        ) {
          return;
        }

        console.log("Removing member from team:", teamId, memberId);

        fetch(`/api/teams/${teamId}/remove-member`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({ userId: memberId }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            console.log("Member removed successfully:", result);
            showNotification("Member removed successfully", "success");
            // Refresh the members list
            manageTeamMembers(teamId);
          })
          .catch((error) => {
            console.error("Error removing member:", error);
            showNotification(
              "Error removing member. Please try again.",
              "error"
            );
          });
      }

      // Utility functions
      function refreshDashboard() {
        showNotification("Refreshing dashboard...", "info");
        loadDashboardData(true) // Force refresh
          .then(() => {
            showNotification("Dashboard refreshed successfully!", "success");
          })
          .catch((error) => {
            console.error("Refresh failed:", error);
            showNotification("Failed to refresh dashboard", "error");
          });
      }

      function exportDashboardData() {
        try {
          const dashboardData = {
            exportDate: new Date().toISOString(),
            user: currentUser?.data?.name || "Unknown",
            summary: {
              totalTeams: teams.length,
              // Calculate total members including admins consistently
              totalMembers: teams.reduce((sum, team) => {
                const adminCount = team.admin ? 1 : 0;
                const memberCount = team.members ? team.members.length : 0;
                return sum + adminCount + memberCount;
              }, 0),
              totalTasks: tasks.length,
              completedTasks: tasks.filter(
                (task) => task.status === "completed"
              ).length,
            },
            teams: teams.map((team) => ({
              id: team._id,
              name: team.name,
              description: team.description,
              // Calculate member count including admin consistently
              memberCount:
                (team.admin ? 1 : 0) + (team.members ? team.members.length : 0),
              createdAt: team.createdAt,
            })),
            tasks: tasks.map((task) => ({
              id: task._id,
              title: task.title,
              status: task.status,
              priority: task.priority,
              teamName:
                teams.find((t) => t._id === task.team)?.name || "Unknown",
              createdAt: task.createdAt,
              dueDate: task.dueDate,
            })),
          };

          const dataStr = JSON.stringify(dashboardData, null, 2);
          const dataBlob = new Blob([dataStr], { type: "application/json" });
          const url = URL.createObjectURL(dataBlob);

          const link = document.createElement("a");
          link.href = url;
          link.download = `dashboard-export-${
            new Date().toISOString().split("T")[0]
          }.json`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);

          showNotification("Dashboard data exported successfully", "success");
        } catch (error) {
          console.error("Export failed:", error);
          showNotification("Failed to export dashboard data", "error");
        }
      }

      function showLoadingState(contentId = null) {
        if (contentId) {
          // Show loading state for specific content area
          const content = document.getElementById(contentId);
          if (content) {
            content.innerHTML = `
                        <div class="loading-state">
                            <div class="spinner"></div>
                            <p>Loading...</p>
                        </div>
                    `;
          }
        } else {
          // Show loading indicators on stat values
          document.querySelectorAll(".stat-value").forEach((el) => {
            el.innerHTML = '<div class="spinner"></div>';
          });

          // Add loading state to refresh button
          const refreshBtn = document.querySelector(
            'button[onclick="refreshDashboard()"]'
          );
          if (refreshBtn) {
            refreshBtn.disabled = true;
            refreshBtn.innerHTML =
              '<i class="fas fa-spinner fa-spin"></i> Refreshing...';
          }
        }
      }

      function hideLoadingState() {
        // Re-enable refresh button
        const refreshBtn = document.querySelector(
          'button[onclick="refreshDashboard()"]'
        );
        if (refreshBtn) {
          refreshBtn.disabled = false;
          refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';
        }
        // updateStats() will replace spinners with actual values
      }

      function showNotification(message, type = "info") {
        const container = document.getElementById("notificationContainer");
        const notification = document.createElement("div");
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <i class="fas fa-${getNotificationIcon(type)}"></i>
                    <span>${message}</span>
                </div>
            `;

        container.appendChild(notification);

        // Show notification
        setTimeout(() => notification.classList.add("show"), 100);

        // Auto remove after 5 seconds
        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => container.removeChild(notification), 300);
        }, 5000);
      }

      function getNotificationIcon(type) {
        const icons = {
          success: "check-circle",
          error: "exclamation-circle",
          warning: "exclamation-triangle",
          info: "info-circle",
        };
        return icons[type] || "info-circle";
      }

      async function logout() {
        try {
          const response = await fetch("/api/auth/logout", {
            method: "POST",
          });

          if (response.ok) {
            window.location.href = "/login";
          } else {
            showNotification("Failed to logout", "error");
          }
        } catch (error) {
          console.error("Logout error:", error);
          showNotification("Failed to logout", "error");
        }
      }

      // Auto-refresh dashboard every 2 minutes (less frequent to avoid rate limiting)
      // Periodic safety refresh (less frequent now that realtime exists)
      setInterval(() => {
        if (currentSection === "overview" && !lastSummary) {
          loadDashboardData();
        }
      }, 300000); // 5 minutes

      // Delete Team Functions
      function confirmDeleteTeam(teamId) {
        if (!teamId) {
          showNotification("No team selected for deletion", "error");
          return;
        }

        // Store team ID for deletion
        window.teamToDelete = teamId;

        // Get team name from the current modal or teams list
        const teams = window.dashboardData?.teams || [];
        const team = teams.find((t) => t._id === teamId);
        const teamName = team ? team.name : "Unknown Team";

        // Set team name in confirmation dialog
        document.getElementById("deleteTeamName").textContent = teamName;

        // Close current modal and open confirmation
        closeModal("viewTeamModal");
        openModal("deleteTeamModal");
      }

      function deleteTeam() {
        const teamId = window.teamToDelete;
        if (!teamId) {
          showNotification("No team selected for deletion", "error");
          return;
        }

        // Show loading state
        const deleteBtn = document.getElementById("confirmDeleteBtn");
        const originalText = deleteBtn.innerHTML;
        deleteBtn.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> Deleting...';
        deleteBtn.disabled = true;

        // Make API call to delete team
        fetch(`/api/teams/${teamId}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            "Cache-Control": "no-cache",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((result) => {
            console.log("Team deleted successfully:", result);

            // Close confirmation modal
            closeModal("deleteTeamModal");

            // Show success notification
            showNotification("Team deleted successfully", "success");

            // Clear stored team ID
            window.teamToDelete = null;

            // Force cache-busting reload to ensure fresh data
            setTimeout(() => {
              // Clear any cached data first
              if ("caches" in window) {
                caches.keys().then((names) => {
                  names.forEach((name) => {
                    caches.delete(name);
                  });
                });
              }
              // Force reload with cache busting
              const url = new URL(window.location);
              url.searchParams.set("_t", Date.now());
              window.location.href = url.toString();
            }, 1000); // Give time for the notification to show
          })
          .catch((error) => {
            console.error("Error deleting team:", error);
            showNotification(
              `Failed to delete team: ${error.message}`,
              "error"
            );
          })
          .finally(() => {
            // Reset button state
            deleteBtn.innerHTML = originalText;
            deleteBtn.disabled = false;
          });
      }

      // Join Request Management Functions
      async function loadJoinRequests() {
        try {
          const response = await fetch("/api/invitations/my-requests", {
            credentials: "include",
          });

          if (response.ok) {
            const data = await response.json();
            displayJoinRequests(data.requests);
          } else {
            console.error("Failed to load join requests");
          }
        } catch (error) {
          console.error("Error loading join requests:", error);
        }
      }

      function displayJoinRequests(requests) {
        const listElement = document.getElementById("join-requests-list");
        const countBadge = document.getElementById("requests-count");

        if (!requests || requests.length === 0) {
          listElement.innerHTML = `
                    <div class="empty-state" style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <i class="fas fa-users" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                        <h3>No pending requests</h3>
                        <p>No members have requested to join your teams yet</p>
                    </div>
                `;
          countBadge.style.display = "none";
          return;
        }

        countBadge.textContent = requests.length;
        countBadge.style.display = "inline-block";

        listElement.innerHTML = requests
          .map((request) => {
            const requesterName = request.invitedBy
              ? request.invitedBy.firstName && request.invitedBy.lastName
                ? `${request.invitedBy.firstName} ${request.invitedBy.lastName}`
                : request.invitedBy.username || request.invitedBy.email
              : "Unknown User";
            const teamName = request.team ? request.team.name : "Unknown Team";

            return `
                <div class="join-request-card">
                    <div class="request-header">
                        <div class="request-info">
                            <h4>${escapeHtml(requesterName)}</h4>
                            <div class="request-meta">
                                Wants to join <strong>${escapeHtml(
                                  teamName
                                )}</strong> • 
                                ${new Date(
                                  request.createdAt
                                ).toLocaleDateString()}
                            </div>
                        </div>
                        <div class="request-actions">
                            <button class="btn btn-success btn-sm" onclick="respondToJoinRequest('${
                              request._id
                            }', 'accept')">
                                <i class="fas fa-check"></i> Accept
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="respondToJoinRequest('${
                              request._id
                            }', 'reject')">
                                <i class="fas fa-times"></i> Reject
                            </button>
                        </div>
                    </div>
                    ${
                      request.message
                        ? `<div class="request-message">"${escapeHtml(
                            request.message
                          )}"</div>`
                        : ""
                    }
                </div>
            `;
          })
          .join("");
      }

      async function respondToJoinRequest(requestId, response) {
        try {
          const res = await fetch("/api/invitations/respond", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ invitationId: requestId, response }),
          });

          const data = await res.json();

          if (res.ok) {
            showNotification(data.message, "success");
            loadJoinRequests(); // Refresh requests
            loadDashboardData(true); // Refresh dashboard stats
          } else {
            showNotification(
              data.message || "Failed to respond to request",
              "error"
            );
          }
        } catch (error) {
          console.error("Error responding to join request:", error);
          showNotification("Failed to respond to request", "error");
        }
      }

      // Setup socket events for join requests
      function setupJoinRequestSocketEvents() {
        if (!organiserSocket) return;

        organiserSocket.on("team_request_received", (data) => {
          showNotification(
            `${data.requesterName} wants to join your team "${data.teamName}"`,
            "info"
          );
          loadJoinRequests(); // Refresh requests
        });

        organiserSocket.on("invitation_response", (data) => {
          const status = data.response === "accept" ? "accepted" : "rejected";
          showNotification(
            `Your invitation to "${data.teamName}" was ${status}`,
            data.response === "accept" ? "success" : "warning"
          );
        });
      }

      // Load join requests when members section is shown
      document.addEventListener("DOMContentLoaded", () => {
        // Setup socket events
        setTimeout(setupJoinRequestSocketEvents, 2000); // After socket is initialized
      });
    </script>
    <style>
      /* Realtime status badge & animations */
      .realtime-badge {
        display: inline-flex;
        align-items: center;
        font-size: 11px;
        font-weight: 700;
        padding: 4px 8px;
        border-radius: 12px;
        background: var(--success-gradient);
        color: #fff;
        letter-spacing: 0.5px;
        box-shadow: var(--shadow-md);
      }
      .realtime-container {
        display: flex;
        gap: 12px;
        align-items: center;
        flex-wrap: wrap;
      }
      .realtime-timestamp {
        font-size: 12px;
        color: var(--gray-600);
        font-weight: 500;
      }
      .stat-updating {
        transform: scale(1.05);
        opacity: 0.6;
        transition: all 0.15s ease;
      }
      .stat-updated {
        animation: flashChange 0.6s ease;
      }
      @keyframes flashChange {
        0% {
          background: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0.6),
            rgba(255, 255, 255, 0)
          );
          -webkit-background-clip: text;
        }
        50% {
          text-shadow: 0 0 10px rgba(99, 102, 241, 0.4);
        }
        100% {
          text-shadow: none;
        }
      }

      /* Chat Section Styles */
      .chat-controls {
        display: flex;
        align-items: center;
      }

      .online-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: var(--gray-600);
        font-weight: 500;
      }

      .online-indicator::before {
        content: "";
        width: 8px;
        height: 8px;
        background: var(--success);
        border-radius: 50%;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }

      .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: var(--shadow-lg);
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 24px;
        display: flex;
        flex-direction: column;
        gap: 16px;
      }

      .chat-welcome {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: var(--gray-500);
      }

      .welcome-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
        color: white;
        font-size: 32px;
        box-shadow: var(--shadow-lg);
      }

      .chat-welcome h3 {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 8px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .message {
        display: flex;
        gap: 12px;
        margin-bottom: 16px;
      }

      .message.own {
        flex-direction: row-reverse;
      }

      .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
        flex-shrink: 0;
        box-shadow: var(--shadow-md);
      }

      .message-content {
        max-width: 70%;
        display: flex;
        flex-direction: column;
        gap: 4px;
      }

      .message-header {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 12px;
        color: var(--gray-500);
        font-weight: 500;
      }

      .message.own .message-header {
        flex-direction: row-reverse;
      }

      .message-bubble {
        padding: 12px 16px;
        border-radius: 20px;
        background: var(--gray-100);
        color: var(--gray-900);
        font-size: 14px;
        line-height: 1.5;
        word-wrap: break-word;
        box-shadow: var(--shadow-sm);
      }

      .message.own .message-bubble {
        background: var(--primary-gradient);
        color: white;
        border-radius: 20px 20px 4px 20px;
      }

      .message:not(.own) .message-bubble {
        border-radius: 20px 20px 20px 4px;
      }

      .typing-indicator {
        padding: 16px 24px;
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(var(--primary-rgb), 0.05);
        border-top: 1px solid var(--gray-200);
        font-size: 14px;
        color: var(--gray-600);
      }

      .typing-dots {
        display: flex;
        gap: 4px;
      }

      .typing-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--primary);
        animation: typing 1.4s infinite ease-in-out;
      }

      .typing-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }

      .typing-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }

      @keyframes typing {
        0%,
        80%,
        100% {
          transform: scale(0.8);
          opacity: 0.5;
        }
        40% {
          transform: scale(1);
          opacity: 1;
        }
      }

      .chat-input-container {
        border-top: 1px solid var(--gray-200);
        padding: 20px 24px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
      }

      .chat-input-wrapper {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 12px;
      }

      .chat-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid var(--gray-200);
        border-radius: 25px;
        font-size: 14px;
        background: white;
        transition: all 0.2s ease;
        outline: none;
      }

      .chat-input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
      }

      .chat-input:disabled {
        background: var(--gray-100);
        color: var(--gray-400);
        cursor: not-allowed;
      }

      .send-button {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: var(--primary-gradient);
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-md);
      }

      .send-button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      .send-button:disabled {
        background: var(--gray-300);
        cursor: not-allowed;
        transform: none;
        box-shadow: var(--shadow-sm);
      }

      .chat-actions {
        display: flex;
        gap: 8px;
        justify-content: center;
      }

      .chat-action-btn {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: var(--gray-100);
        border: none;
        color: var(--gray-600);
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .chat-action-btn:hover {
        background: var(--gray-200);
        color: var(--primary);
      }

      /* System messages */
      .system-message {
        text-align: center;
        font-size: 12px;
        color: var(--gray-500);
        padding: 8px 16px;
        background: var(--gray-50);
        border-radius: 20px;
        margin: 8px auto;
        max-width: 300px;
      }

      /* Settings Styles */
      .settings-container {
        display: flex;
        gap: 24px;
        max-width: 1200px;
        margin: 0 auto;
        height: calc(100vh - 200px);
      }

      .settings-nav {
        width: 250px;
        background: white;
        border-radius: 16px;
        padding: 16px;
        box-shadow: var(--shadow-md);
        height: fit-content;
      }

      .settings-nav-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 16px;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 4px;
        color: #64748b;
        font-weight: 500;
      }

      .settings-nav-item:hover {
        background: #f1f5f9;
        color: #334155;
      }

      .settings-nav-item.active {
        background: var(--primary-gradient);
        color: white;
        box-shadow: var(--shadow-md);
      }

      .settings-nav-item i {
        width: 20px;
        text-align: center;
      }

      .settings-content {
        flex: 1;
        background: white;
        border-radius: 16px;
        padding: 32px;
        box-shadow: var(--shadow-md);
        overflow-y: auto;
      }

      .settings-tab {
        display: none;
      }

      .settings-tab.active {
        display: block;
      }

      .settings-section {
        margin-bottom: 40px;
      }

      .settings-section:last-child {
        margin-bottom: 0;
      }

      .settings-section-title {
        font-size: 20px;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 24px;
        padding-bottom: 12px;
        border-bottom: 2px solid #e2e8f0;
      }

      .profile-card {
        display: flex;
        gap: 32px;
        align-items: flex-start;
      }

      .profile-avatar {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
      }

      .avatar-circle {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 48px;
        font-weight: 700;
        color: white;
        box-shadow: var(--shadow-lg);
      }

      .profile-info {
        flex: 1;
      }

      .preference-group {
        display: flex;
        flex-direction: column;
        gap: 16px;
      }

      .preference-label {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
      }

      .preference-checkbox {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .preference-checkbox:hover {
        background: #f1f5f9;
        border-color: #cbd5e0;
      }

      .preference-checkbox input[type="checkbox"] {
        display: none;
      }

      .checkmark {
        width: 20px;
        height: 20px;
        border: 2px solid #cbd5e0;
        border-radius: 4px;
        position: relative;
        transition: all 0.2s ease;
      }

      .preference-checkbox input[type="checkbox"]:checked + .checkmark {
        background: var(--primary);
        border-color: var(--primary);
      }

      .preference-checkbox input[type="checkbox"]:checked + .checkmark::after {
        content: "✓";
        position: absolute;
        top: -2px;
        left: 3px;
        color: white;
        font-weight: bold;
        font-size: 14px;
      }

      .security-options {
        display: flex;
        flex-direction: column;
        gap: 16px;
      }

      .security-option {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
      }

      .security-option-info h4 {
        margin: 0 0 4px 0;
        color: #1e293b;
        font-weight: 600;
      }

      .security-option-info p {
        margin: 0;
        color: #64748b;
        font-size: 14px;
      }

      .danger-zone {
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 12px;
        padding: 24px;
      }

      .danger-option {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 0;
        border-bottom: 1px solid #fecaca;
      }

      .danger-option:last-child {
        border-bottom: none;
        padding-bottom: 0;
      }

      .danger-option-info h4 {
        margin: 0 0 4px 0;
        color: #dc2626;
        font-weight: 600;
      }

      .danger-option-info p {
        margin: 0;
        color: #991b1b;
        font-size: 14px;
      }

      .btn-danger {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        color: white;
        border: none;
      }

      .btn-danger:hover {
        background: linear-gradient(135deg, #b91c1c 0%, #991b1b 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(220, 38, 38, 0.3);
      }

      /* Settings responsive design */
      @media (max-width: 768px) {
        .settings-container {
          flex-direction: column;
          height: auto;
        }

        .settings-nav {
          width: 100%;
          margin-bottom: 16px;
        }

        .profile-card {
          flex-direction: column;
          text-align: center;
        }

        .security-option,
        .danger-option {
          flex-direction: column;
          gap: 16px;
          text-align: center;
        }
      }

      /* Chat responsive design */
      @media (max-width: 768px) {
        .chat-container {
          height: 400px;
        }

        .chat-controls {
          flex-direction: column;
          gap: 12px;
          align-items: stretch;
        }

        .message-content {
          max-width: 85%;
        }

        .chat-input-wrapper {
          flex-direction: column;
          gap: 12px;
        }

        .chat-input {
          border-radius: 12px;
        }
      }

      /* File Preview Styles */
      .file-preview-container {
        background: white;
        border: 1px solid var(--gray-200);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 12px;
        box-shadow: var(--shadow-sm);
      }

      .file-preview-content {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .file-preview {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--gray-50);
        border-radius: 8px;
      }

      .file-preview i {
        font-size: 24px;
        color: var(--primary);
      }

      .file-size {
        font-size: 12px;
        color: var(--gray-500);
        margin-left: 8px;
      }

      .file-caption-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.2s ease;
      }

      .file-caption-input:focus {
        border-color: var(--primary);
      }

      .file-preview-buttons {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
      }

      .btn-cancel,
      .btn-send {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .btn-cancel {
        background: var(--gray-100);
        color: var(--gray-600);
      }

      .btn-cancel:hover {
        background: var(--gray-200);
      }

      .btn-send {
        background: var(--primary);
        color: white;
      }

      .btn-send:hover {
        background: var(--primary-dark);
      }

      /* Emoji Picker Styles */
      .emoji-picker {
        position: absolute;
        bottom: 70px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        border: 1px solid var(--gray-200);
        border-radius: 12px;
        box-shadow: var(--shadow-lg);
        z-index: 1000;
        width: 320px;
        max-height: 200px;
        overflow-y: auto;
      }

      .emoji-grid {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        gap: 4px;
        padding: 12px;
      }

      .emoji-item {
        font-size: 20px;
        padding: 8px;
        text-align: center;
        cursor: pointer;
        border-radius: 6px;
        transition: background-color 0.2s ease;
      }

      .emoji-item:hover {
        background: var(--gray-100);
      }

      /* Chat action button positioning */
      .chat-actions {
        position: relative;
      }

      /* File Attachment Styles */
      .file-attachment {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--gray-50);
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        margin: 8px 0;
        max-width: 300px;
      }

      .file-attachment.image-attachment {
        flex-direction: column;
        align-items: flex-start;
        background: transparent;
        border: none;
        padding: 0;
      }

      .file-icon {
        font-size: 24px;
        color: var(--primary);
        flex-shrink: 0;
      }

      .file-details {
        flex: 1;
        min-width: 0;
      }

      .file-name {
        font-weight: 500;
        color: var(--gray-900);
        word-break: break-all;
        cursor: pointer;
        transition: color 0.2s ease;
      }

      .file-name:hover {
        color: var(--primary);
      }

      .file-size {
        font-size: 12px;
        color: var(--gray-500);
        margin-top: 4px;
      }

      .file-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 8px;
        padding: 4px 0;
      }

      .file-caption {
        margin-top: 8px;
        font-style: italic;
        color: var(--gray-700);
      }

      .download-btn {
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
        flex-shrink: 0;
      }

      .download-btn:hover {
        background: var(--primary-dark);
      }

      .download-btn i {
        font-size: 12px;
      }
    </style>
  </body>
</html>
